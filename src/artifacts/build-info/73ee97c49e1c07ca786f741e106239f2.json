{
	"id": "73ee97c49e1c07ca786f741e106239f2",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.16",
	"solcLongVersion": "0.8.16+commit.07a7930e",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [
				"ds-test/=lib/forge-std/lib/ds-test/src/",
				"forge-std/=lib/forge-std/src/",
				"@openzeppelin/=lib/openzeppelin-contracts/",
				"@uma/=lib/protocol/packages/"
			]
		},
		"sources": {
			"src/DeepFakeDetector.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol\";\nimport \"@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract DeepFakeDetector {\n    using SafeERC20 for IERC20;\n    IERC20 public immutable defaultCurrency;\n\n    OptimisticOracleV3Interface public immutable oo;\n    uint64 public constant assertionLiveness = 3600;\n    bytes32 public immutable defaultIdentifier;\n\n    struct ImageAssertion {\n        bytes32 imageId; // image ID -> the hash of the image\n        string imageUrl; // the IPFS link where the image is stored\n        address asserter; // the address that made the assertion\n        bool resolved; // whether the assertion has been resolved\n    }\n\n    mapping(bytes32 => ImageAssertion) imageAssertions; // mapping from IDs to Image Assertions\n\n    event ImageAsserted(\n        bytes32 indexed imageId,\n        string imageUrl,\n        address indexed asserter,\n        bytes32 indexed assertionId\n    );\n\n    event ImageAssertionResolved(\n        bytes32 indexed imageId,\n        string imageUrl,\n        address indexed asserter,\n        bytes32 indexed assertionId\n    );\n\n    constructor() {\n        defaultCurrency = IERC20(0x07865c6E87B9F70255377e024ace6630C1Eaa37F); // USDC on Goerli\n        oo = OptimisticOracleV3Interface(\n            0x9923D42eF695B5dd9911D05Ac944d4cAca3c4EAB\n        ); // OOV3 on Goerli\n        defaultIdentifier = oo.defaultIdentifier();\n    }\n\n    // For a given assertionId, returns a boolean indicating whether the image is accessible and the image itself.\n    function getImage(\n        bytes32 assertionId\n    ) public view returns (bool, string memory) {\n        if (!imageAssertions[assertionId].resolved) return (false, \"\");\n        return (true, imageAssertions[assertionId].imageUrl);\n    }\n\n    function assertDataFor(\n        bytes32 imageId,\n        string calldata imageUrl,\n        address asserter\n    ) public returns (bytes32 assertionId) {\n        asserter = asserter == address(0) ? msg.sender : asserter;\n        uint256 bond = oo.getMinimumBond(address(defaultCurrency));\n        defaultCurrency.safeTransferFrom(msg.sender, address(this), bond);\n        defaultCurrency.safeApprove(address(oo), bond);\n\n        assertionId = oo.assertTruth(\n            abi.encodePacked(\n                \"Image asserted at url: \",\n                imageUrl,\n                \" for imageID: 0x\",\n                ClaimData.toUtf8Bytes(imageId),\n                \" and asserter: 0x\",\n                ClaimData.toUtf8BytesAddress(asserter),\n                ClaimData.toUtf8BytesAddress(asserter),\n                \" at timestamp: \",\n                ClaimData.toUtf8BytesUint(block.timestamp),\n                \" in the DataAsserter contract at 0x\",\n                ClaimData.toUtf8BytesAddress(address(this)),\n                \" is not a deepfake.\"\n            ),\n            asserter,\n            address(this),\n            address(0),\n            assertionLiveness,\n            defaultCurrency,\n            bond,\n            defaultIdentifier,\n            bytes32(0)\n        );\n\n        imageAssertions[assertionId] = ImageAssertion(\n            imageId,\n            imageUrl,\n            asserter,\n            false\n        );\n\n        emit ImageAsserted(imageId, imageUrl, asserter, assertionId);\n    }\n\n    // OptimisticOracleV3 resolve callback.\n    function assertionResolvedCallback(\n        bytes32 assertionId,\n        bool assertedTruthfully\n    ) public {\n        require(msg.sender == address(oo));\n        // If the assertion was true, then the data assertion is resolved.\n        if (assertedTruthfully) {\n            imageAssertions[assertionId].resolved = true;\n            ImageAssertion memory imageAssertion = imageAssertions[assertionId];\n            emit ImageAssertionResolved(\n                imageAssertion.imageId,\n                imageAssertion.imageUrl,\n                imageAssertion.asserter,\n                assertionId\n            );\n        } else delete imageAssertions[assertionId];\n    }\n\n    // If assertion is disputed, do nothing and wait for resolution.\n    // This OptimisticOracleV3 callback function needs to be defined so the OOv3 doesn't revert when it tries to call it.\n    function assertionDisputedCallback(bytes32 assertionId) public {}\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
			},
			"lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Optimistic Oracle V3 Interface that callers must use to assert truths about the world.\n */\ninterface OptimisticOracleV3Interface {\n    // Struct grouping together the settings related to the escalation manager stored in the assertion.\n    struct EscalationManagerSettings {\n        bool arbitrateViaEscalationManager; // False if the DVM is used as an oracle (EscalationManager on True).\n        bool discardOracle; // False if Oracle result is used for resolving assertion after dispute.\n        bool validateDisputers; // True if the EM isDisputeAllowed should be checked on disputes.\n        address assertingCaller; // Stores msg.sender when assertion was made.\n        address escalationManager; // Address of the escalation manager (zero address if not configured).\n    }\n\n    // Struct for storing properties and lifecycle of an assertion.\n    struct Assertion {\n        EscalationManagerSettings escalationManagerSettings; // Settings related to the escalation manager.\n        address asserter; // Address of the asserter.\n        uint64 assertionTime; // Time of the assertion.\n        bool settled; // True if the request is settled.\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\n        uint64 expirationTime; // Unix timestamp marking threshold when the assertion can no longer be disputed.\n        bool settlementResolution; // Resolution of the assertion (false till resolved).\n        bytes32 domainId; // Optional domain that can be used to relate the assertion to others in the escalationManager.\n        bytes32 identifier; // UMA DVM identifier to use for price requests in the event of a dispute.\n        uint256 bond; // Amount of currency that the asserter has bonded.\n        address callbackRecipient; // Address that receives the callback.\n        address disputer; // Address of the disputer.\n    }\n\n    // Struct for storing cached currency whitelist.\n    struct WhitelistedCurrency {\n        bool isWhitelisted; // True if the currency is whitelisted.\n        uint256 finalFee; // Final fee of the currency.\n    }\n\n    /**\n     * @notice Returns the default identifier used by the Optimistic Oracle V3.\n     * @return The default identifier.\n     */\n    function defaultIdentifier() external view returns (bytes32);\n\n    /**\n     * @notice Fetches information about a specific assertion and returns it.\n     * @param assertionId unique identifier for the assertion to fetch information for.\n     * @return assertion information about the assertion.\n     */\n    function getAssertion(bytes32 assertionId) external view returns (Assertion memory);\n\n    /**\n     * @notice Asserts a truth about the world, using the default currency and liveness. No callback recipient or\n     * escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage\n     * (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency.\n     * @dev The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).\n     * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\n     * @param asserter receives bonds back at settlement. This could be msg.sender or\n     * any other account that the caller wants to receive the bond at settlement time.\n     * @return assertionId unique identifier for this assertion.\n     */\n    function assertTruthWithDefaults(bytes memory claim, address asserter) external returns (bytes32);\n\n    /**\n     * @notice Asserts a truth about the world, using a fully custom configuration.\n     * @dev The caller must approve this contract to spend at least bond amount of currency.\n     * @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\n     * @param asserter receives bonds back at settlement. This could be msg.sender or\n     * any other account that the caller wants to receive the bond at settlement time.\n     * @param callbackRecipient if configured, this address will receive a function call assertionResolvedCallback and\n     * assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The\n     * recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.\n     * @param escalationManager if configured, this address will control escalation properties of the assertion. This\n     * means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to\n     * validate disputes. Combining these, the asserter can define their own security properties for the assertion.\n     * escalationManager also _must_ implement the same callbacks as callbackRecipient.\n     * @param liveness time to wait before the assertion can be resolved. Assertion can be disputed in this time.\n     * @param currency bond currency pulled from the caller and held in escrow until the assertion is resolved.\n     * @param bond amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This\n     * must be >= getMinimumBond(address(currency)).\n     * @param identifier UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.\n     * @param domainId optional domain that can be used to relate this assertion to others in the escalationManager and\n     * can be used by the configured escalationManager to define custom behavior for groups of assertions. This is\n     * typically used for \"escalation games\" by changing bonds or other assertion properties based on the other\n     * assertions that have come before. If not needed this value should be 0 to save gas.\n     * @return assertionId unique identifier for this assertion.\n     */\n    function assertTruth(\n        bytes memory claim,\n        address asserter,\n        address callbackRecipient,\n        address escalationManager,\n        uint64 liveness,\n        IERC20 currency,\n        uint256 bond,\n        bytes32 identifier,\n        bytes32 domainId\n    ) external returns (bytes32);\n\n    /**\n     * @notice Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy\n     * of the information within this contract. This is used to save gas when making assertions as we can avoid an\n     * external call to the UMA contracts to fetch this.\n     * @param identifier identifier to fetch information for and store locally.\n     * @param currency currency to fetch information for and store locally.\n     */\n    function syncUmaParams(bytes32 identifier, address currency) external;\n\n    /**\n     * @notice Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the\n     * asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle\n     * result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an\n     * amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of\n     * the bond is returned to the asserter or disputer.\n     * @param assertionId unique identifier for the assertion to resolve.\n     */\n    function settleAssertion(bytes32 assertionId) external;\n\n    /**\n     * @notice Settles an assertion and returns the resolution.\n     * @param assertionId unique identifier for the assertion to resolve and return the resolution for.\n     * @return resolution of the assertion.\n     */\n    function settleAndGetAssertionResult(bytes32 assertionId) external returns (bool);\n\n    /**\n     * @notice Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then\n     * this will revert. If the assertion was disputed and configured to discard the oracle resolution return false.\n     * @param assertionId unique identifier for the assertion to fetch the resolution for.\n     * @return resolution of the assertion.\n     */\n    function getAssertionResult(bytes32 assertionId) external view returns (bool);\n\n    /**\n     * @notice Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the\n     * currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee.\n     * @param currency currency to calculate the minimum bond for.\n     * @return minimum bond amount.\n     */\n    function getMinimumBond(address currency) external view returns (uint256);\n\n    event AssertionMade(\n        bytes32 indexed assertionId,\n        bytes32 domainId,\n        bytes claim,\n        address indexed asserter,\n        address callbackRecipient,\n        address escalationManager,\n        address caller,\n        uint64 expirationTime,\n        IERC20 currency,\n        uint256 bond,\n        bytes32 indexed identifier\n    );\n\n    event AssertionDisputed(bytes32 indexed assertionId, address indexed caller, address indexed disputer);\n\n    event AssertionSettled(\n        bytes32 indexed assertionId,\n        address indexed bondRecipient,\n        bool disputed,\n        bool settlementResolution,\n        address settleCaller\n    );\n\n    event AdminPropertiesSet(IERC20 defaultCurrency, uint64 defaultLiveness, uint256 burnedBondPercentage);\n}\n"
			},
			"lib/protocol/packages/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity 0.8.16;\n\nimport { AncillaryData as ClaimData } from \"../../common/implementation/AncillaryData.sol\";\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
			},
			"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity ^0.8.0;\n\n/**\n * @title Library for encoding and decoding ancillary data for DVM price requests.\n * @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\n * web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\n * dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\n * smart contracts. More details on UMA's ancillary data guidelines below:\n * https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\n */\nlibrary AncillaryData {\n    // This converts the bottom half of a bytes32 input to hex in a highly gas-optimized way.\n    // Source: the brilliant implementation at https://gitter.im/ethereum/solidity?at=5840d23416207f7b0ed08c9b.\n    function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {\n        unchecked {\n            uint256 x = uint256(bytesIn);\n\n            // Nibble interleave\n            x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\n            x = (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\n            x = (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\n            x = (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\n            x = (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\n            x = (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\n\n            // Hex encode\n            uint256 h = (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8;\n            uint256 i = (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4;\n            uint256 j = (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2;\n            x = x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030;\n\n            // Return the result.\n            return bytes32(x);\n        }\n    }\n\n    /**\n     * @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\n     * @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\n     * This has minor changes from the toUtf8BytesAddress to control for the size of the input.\n     * @param bytesIn bytes32 to encode.\n     * @return utf8 encoded bytes32.\n     */\n    function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn));\n    }\n\n    /**\n     * @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\n     * Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\n     * @dev Will return address in all lower case characters and without the leading 0x.\n     * @param x address to encode.\n     * @return utf8 encoded address bytes.\n     */\n    function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x))));\n    }\n\n    /**\n     * @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\n     * @dev This method is based off of this code: https://stackoverflow.com/a/65707309.\n     */\n    function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {\n        if (x == 0) {\n            return \"0\";\n        }\n        uint256 j = x;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint256 k = len;\n        while (x != 0) {\n            k = k - 1;\n            uint8 temp = (48 + uint8(x - (x / 10) * 10));\n            bytes1 b1 = bytes1(temp);\n            bstr[k] = b1;\n            x /= 10;\n        }\n        return bstr;\n    }\n\n    function appendKeyValueBytes32(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        bytes32 value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8Bytes(value));\n    }\n\n    /**\n     * @notice Adds \"key:value\" to `currentAncillaryData` where `value` is an address that first needs to be converted\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\n     * @return Newly appended ancillary data.\n     */\n    function appendKeyValueAddress(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        address value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesAddress(value));\n    }\n\n    /**\n     * @notice Adds \"key:value\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n     * @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\n     * @return Newly appended ancillary data.\n     */\n    function appendKeyValueUint(\n        bytes memory currentAncillaryData,\n        bytes memory key,\n        uint256 value\n    ) internal pure returns (bytes memory) {\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesUint(value));\n    }\n\n    /**\n     * @notice Helper method that returns the left hand side of a \"key:value\" pair plus the colon \":\" and a leading\n     * comma \",\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\n     * some utf8 value that is ultimately added to a comma-delimited, key-value dictionary.\n     */\n    function constructPrefix(bytes memory currentAncillaryData, bytes memory key) internal pure returns (bytes memory) {\n        if (currentAncillaryData.length > 0) {\n            return abi.encodePacked(\",\", key, \":\");\n        } else {\n            return abi.encodePacked(key, \":\");\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@uma/=lib/protocol/packages/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3dac621d015a68a5251b1e5d41dda0faf252699bf6e8bcf46a958b29964d9dd1\",\"dweb:/ipfs/QmP9axjgZv4cezAhALoTemM62sdLtMDJ9MGTxECnNwHgSJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@uma/=lib/protocol/packages/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x35e258421ae206f3db37281cea70871b4c3553914734aa76139a41af60ac1abb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ef94b6bc4ee356db612a1849c615f7dd4b15542d6c8584c86bb9243a7913cf0\",\"dweb:/ipfs/QmaxFj5NFpAjjitZtHPNS9PPtCuBATaRz9ktDDRCQCQ83y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":701:6912  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":701:6912  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ed815efff66d31a4841c8d89ba5608031aab885f67aed3677a617ba33844fcf864736f6c63430008100033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ed815efff66d31a4841c8d89ba5608031aab885f67aed3677a617ba33844fcf864736f6c63430008100033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED DUP2 0x5E SELFDESTRUCT 0xF6 PUSH14 0x31A4841C8D89BA5608031AAB885F PUSH8 0xAED3677A617BA338 DIFFICULTY 0xFC 0xF8 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
							"sourceMap": "701:6211:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;701:6211:2;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ed815efff66d31a4841c8d89ba5608031aab885f67aed3677a617ba33844fcf864736f6c63430008100033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED DUP2 0x5E SELFDESTRUCT 0xF6 PUSH14 0x31A4841C8D89BA5608031AAB885F PUSH8 0xAED3677A617BA338 DIFFICULTY 0xFC 0xF8 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
							"sourceMap": "701:6211:2:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "B"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "BYTE",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "ADDRESS",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "PUSH",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "MSTORE8",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 701,
									"end": 6912,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ed815efff66d31a4841c8d89ba5608031aab885f67aed3677a617ba33844fcf864736f6c63430008100033",
									".code": [
										{
											"begin": 701,
											"end": 6912,
											"name": "PUSHDEPLOYADDRESS",
											"source": 2
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 701,
											"end": 6912,
											"name": "REVERT",
											"source": 2
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol",
								"lib/protocol/packages/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
								"lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
								"src/DeepFakeDetector.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@uma/=lib/protocol/packages/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3dac621d015a68a5251b1e5d41dda0faf252699bf6e8bcf46a958b29964d9dd1\",\"dweb:/ipfs/QmP9axjgZv4cezAhALoTemM62sdLtMDJ9MGTxECnNwHgSJ\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x35e258421ae206f3db37281cea70871b4c3553914734aa76139a41af60ac1abb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ef94b6bc4ee356db612a1849c615f7dd4b15542d6c8584c86bb9243a7913cf0\",\"dweb:/ipfs/QmaxFj5NFpAjjitZtHPNS9PPtCuBATaRz9ktDDRCQCQ83y\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x8a63ea9ec07788740e51046ca14c61f411aedb901e89749c9d55fa56ed43086a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3035ae3f172ed9e172e1ba4d83bdc70279f63be51ce9218c530132def66ff577\",\"dweb:/ipfs/QmTQ3zfC3YUNeY3KUVFiHgTWDuxfmcEMgpGC6HMoTpgZJL\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xa6dfb97ce947b7c846b054ee7d45d12383359778f4f3743654ae0a34fa421b26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b97e7e5a77ea47c08ba422291df887eba76c80982f52a6e94a30106e9377a94f\",\"dweb:/ipfs/Qme7N2XRC7mcDxB8wZxNWPk6T8S2qsnmhAqXeUj4CNvsGD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":194:9363  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":194:9363  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205c98f1a29d378b99b1e5c1f9210c4fef4db44a237a3da9c4c56e03ee7f24f9b664736f6c63430008100033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205c98f1a29d378b99b1e5c1f9210c4fef4db44a237a3da9c4c56e03ee7f24f9b664736f6c63430008100033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C SWAP9 CALL LOG2 SWAP14 CALLDATACOPY DUP12 SWAP10 0xB1 0xE5 0xC1 0xF9 0x21 0xC 0x4F 0xEF 0x4D 0xB4 0x4A 0x23 PUSH27 0x3DA9C4C56E03EE7F24F9B664736F6C634300081000330000000000 ",
							"sourceMap": "194:9169:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205c98f1a29d378b99b1e5c1f9210c4fef4db44a237a3da9c4c56e03ee7f24f9b664736f6c63430008100033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C SWAP9 CALL LOG2 SWAP14 CALLDATACOPY DUP12 SWAP10 0xB1 0xE5 0xC1 0xF9 0x21 0xC 0x4F 0xEF 0x4D 0xB4 0x4A 0x23 PUSH27 0x3DA9C4C56E03EE7F24F9B664736F6C634300081000330000000000 ",
							"sourceMap": "194:9169:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 194,
									"end": 9363,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205c98f1a29d378b99b1e5c1f9210c4fef4db44a237a3da9c4c56e03ee7f24f9b664736f6c63430008100033",
									".code": [
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 194,
											"end": 9363,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol",
								"lib/protocol/packages/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
								"lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
								"src/DeepFakeDetector.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@uma/=lib/protocol/packages/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xa6dfb97ce947b7c846b054ee7d45d12383359778f4f3743654ae0a34fa421b26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b97e7e5a77ea47c08ba422291df887eba76c80982f52a6e94a30106e9377a94f\",\"dweb:/ipfs/Qme7N2XRC7mcDxB8wZxNWPk6T8S2qsnmhAqXeUj4CNvsGD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol": {
				"AncillaryData": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"title": "Library for encoding and decoding ancillary data for DVM price requests.",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":663:7225  library AncillaryData {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":663:7225  library AncillaryData {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ffb12b032625086cb8c14abf10fd3b76c6b11418005dcff5f897795d414129e964736f6c63430008100033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ffb12b032625086cb8c14abf10fd3b76c6b11418005dcff5f897795d414129e964736f6c63430008100033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0xB1 0x2B SUB 0x26 0x25 ADDMOD PUSH13 0xB8C14ABF10FD3B76C6B1141800 0x5D 0xCF CREATE2 0xF8 SWAP8 PUSH26 0x5D414129E964736F6C6343000810003300000000000000000000 ",
							"sourceMap": "663:6562:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;663:6562:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ffb12b032625086cb8c14abf10fd3b76c6b11418005dcff5f897795d414129e964736f6c63430008100033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT 0xB1 0x2B SUB 0x26 0x25 ADDMOD PUSH13 0xB8C14ABF10FD3B76C6B1141800 0x5D 0xCF CREATE2 0xF8 SWAP8 PUSH26 0x5D414129E964736F6C6343000810003300000000000000000000 ",
							"sourceMap": "663:6562:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"appendKeyValueAddress(bytes memory,bytes memory,address)": "infinite",
								"appendKeyValueBytes32(bytes memory,bytes memory,bytes32)": "infinite",
								"appendKeyValueUint(bytes memory,bytes memory,uint256)": "infinite",
								"constructPrefix(bytes memory,bytes memory)": "infinite",
								"toUtf8Bytes(bytes32)": "infinite",
								"toUtf8Bytes32Bottom(bytes32)": "infinite",
								"toUtf8BytesAddress(address)": "infinite",
								"toUtf8BytesUint(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 663,
									"end": 7225,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ffb12b032625086cb8c14abf10fd3b76c6b11418005dcff5f897795d414129e964736f6c63430008100033",
									".code": [
										{
											"begin": 663,
											"end": 7225,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 663,
											"end": 7225,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol",
								"lib/protocol/packages/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
								"lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
								"src/DeepFakeDetector.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for encoding and decoding ancillary data for DVM price requests.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity smart contracts. More details on UMA's ancillary data guidelines below: https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":\"AncillaryData\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@uma/=lib/protocol/packages/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":{\"keccak256\":\"0x8ff33ac32d3e6de25de9e0ac2c0ff9a621f187fa97e9ee84092b327471baa3ce\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0bbaed49756e8cf7ef405e132f441cd7a735ac6186a200b0179147e7d137b74a\",\"dweb:/ipfs/QmeSBJX5a61LZPxbkUKS2NF4LSxemgDwjD65fCAmyP7PX2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity smart contracts. More details on UMA's ancillary data guidelines below: https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit",
						"version": 1
					}
				}
			},
			"lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol": {
				"OptimisticOracleV3Interface": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "contract IERC20",
									"name": "defaultCurrency",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "defaultLiveness",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "burnedBondPercentage",
									"type": "uint256"
								}
							],
							"name": "AdminPropertiesSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "caller",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "disputer",
									"type": "address"
								}
							],
							"name": "AssertionDisputed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "domainId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "claim",
									"type": "bytes"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "callbackRecipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "escalationManager",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "caller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "expirationTime",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "contract IERC20",
									"name": "currency",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "bond",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "identifier",
									"type": "bytes32"
								}
							],
							"name": "AssertionMade",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "bondRecipient",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "disputed",
									"type": "bool"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "settlementResolution",
									"type": "bool"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "settleCaller",
									"type": "address"
								}
							],
							"name": "AssertionSettled",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "claim",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "callbackRecipient",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "escalationManager",
									"type": "address"
								},
								{
									"internalType": "uint64",
									"name": "liveness",
									"type": "uint64"
								},
								{
									"internalType": "contract IERC20",
									"name": "currency",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "bond",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "identifier",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "domainId",
									"type": "bytes32"
								}
							],
							"name": "assertTruth",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "claim",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								}
							],
							"name": "assertTruthWithDefaults",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultIdentifier",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "getAssertion",
							"outputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "bool",
													"name": "arbitrateViaEscalationManager",
													"type": "bool"
												},
												{
													"internalType": "bool",
													"name": "discardOracle",
													"type": "bool"
												},
												{
													"internalType": "bool",
													"name": "validateDisputers",
													"type": "bool"
												},
												{
													"internalType": "address",
													"name": "assertingCaller",
													"type": "address"
												},
												{
													"internalType": "address",
													"name": "escalationManager",
													"type": "address"
												}
											],
											"internalType": "struct OptimisticOracleV3Interface.EscalationManagerSettings",
											"name": "escalationManagerSettings",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "asserter",
											"type": "address"
										},
										{
											"internalType": "uint64",
											"name": "assertionTime",
											"type": "uint64"
										},
										{
											"internalType": "bool",
											"name": "settled",
											"type": "bool"
										},
										{
											"internalType": "contract IERC20",
											"name": "currency",
											"type": "address"
										},
										{
											"internalType": "uint64",
											"name": "expirationTime",
											"type": "uint64"
										},
										{
											"internalType": "bool",
											"name": "settlementResolution",
											"type": "bool"
										},
										{
											"internalType": "bytes32",
											"name": "domainId",
											"type": "bytes32"
										},
										{
											"internalType": "bytes32",
											"name": "identifier",
											"type": "bytes32"
										},
										{
											"internalType": "uint256",
											"name": "bond",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "callbackRecipient",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "disputer",
											"type": "address"
										}
									],
									"internalType": "struct OptimisticOracleV3Interface.Assertion",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "getAssertionResult",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "currency",
									"type": "address"
								}
							],
							"name": "getMinimumBond",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "settleAndGetAssertionResult",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "settleAssertion",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "identifier",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "currency",
									"type": "address"
								}
							],
							"name": "syncUmaParams",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)": {
								"details": "The caller must approve this contract to spend at least bond amount of currency.",
								"params": {
									"asserter": "receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.",
									"bond": "amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This must be >= getMinimumBond(address(currency)).",
									"callbackRecipient": "if configured, this address will receive a function call assertionResolvedCallback and assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.",
									"claim": "the truth claim being asserted. This is an assertion about the world, and is verified by disputers.",
									"currency": "bond currency pulled from the caller and held in escrow until the assertion is resolved.",
									"domainId": "optional domain that can be used to relate this assertion to others in the escalationManager and can be used by the configured escalationManager to define custom behavior for groups of assertions. This is typically used for \"escalation games\" by changing bonds or other assertion properties based on the other assertions that have come before. If not needed this value should be 0 to save gas.",
									"escalationManager": "if configured, this address will control escalation properties of the assertion. This means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to validate disputes. Combining these, the asserter can define their own security properties for the assertion. escalationManager also _must_ implement the same callbacks as callbackRecipient.",
									"identifier": "UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.",
									"liveness": "time to wait before the assertion can be resolved. Assertion can be disputed in this time."
								},
								"returns": {
									"_0": "assertionId unique identifier for this assertion."
								}
							},
							"assertTruthWithDefaults(bytes,address)": {
								"details": "The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).",
								"params": {
									"asserter": "receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.",
									"claim": "the truth claim being asserted. This is an assertion about the world, and is verified by disputers."
								},
								"returns": {
									"_0": "assertionId unique identifier for this assertion."
								}
							},
							"defaultIdentifier()": {
								"returns": {
									"_0": "The default identifier."
								}
							},
							"getAssertion(bytes32)": {
								"params": {
									"assertionId": "unique identifier for the assertion to fetch information for."
								},
								"returns": {
									"_0": "assertion information about the assertion."
								}
							},
							"getAssertionResult(bytes32)": {
								"params": {
									"assertionId": "unique identifier for the assertion to fetch the resolution for."
								},
								"returns": {
									"_0": "resolution of the assertion."
								}
							},
							"getMinimumBond(address)": {
								"params": {
									"currency": "currency to calculate the minimum bond for."
								},
								"returns": {
									"_0": "minimum bond amount."
								}
							},
							"settleAndGetAssertionResult(bytes32)": {
								"params": {
									"assertionId": "unique identifier for the assertion to resolve and return the resolution for."
								},
								"returns": {
									"_0": "resolution of the assertion."
								}
							},
							"settleAssertion(bytes32)": {
								"params": {
									"assertionId": "unique identifier for the assertion to resolve."
								}
							},
							"syncUmaParams(bytes32,address)": {
								"params": {
									"currency": "currency to fetch information for and store locally.",
									"identifier": "identifier to fetch information for and store locally."
								}
							}
						},
						"title": "Optimistic Oracle V3 Interface that callers must use to assert truths about the world.",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)": "6457c979",
							"assertTruthWithDefaults(bytes,address)": "36b13af4",
							"defaultIdentifier()": "d509b017",
							"getAssertion(bytes32)": "88302884",
							"getAssertionResult(bytes32)": "e39dfd7f",
							"getMinimumBond(address)": "4360af3d",
							"settleAndGetAssertionResult(bytes32)": "8ea2f2ab",
							"settleAssertion(bytes32)": "4124beef",
							"syncUmaParams(bytes32,address)": "a8655785"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"defaultCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"defaultLiveness\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedBondPercentage\",\"type\":\"uint256\"}],\"name\":\"AdminPropertiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"}],\"name\":\"AssertionDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claim\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callbackRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escalationManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"}],\"name\":\"AssertionMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"disputed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"settlementResolution\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"settleCaller\",\"type\":\"address\"}],\"name\":\"AssertionSettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"claim\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"escalationManager\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"liveness\",\"type\":\"uint64\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"}],\"name\":\"assertTruth\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"claim\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"}],\"name\":\"assertTruthWithDefaults\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"getAssertion\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"arbitrateViaEscalationManager\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"discardOracle\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"validateDisputers\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"assertingCaller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"escalationManager\",\"type\":\"address\"}],\"internalType\":\"struct OptimisticOracleV3Interface.EscalationManagerSettings\",\"name\":\"escalationManagerSettings\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"assertionTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"settlementResolution\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"domainId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callbackRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"}],\"internalType\":\"struct OptimisticOracleV3Interface.Assertion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"getAssertionResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"getMinimumBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"settleAndGetAssertionResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"settleAssertion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"syncUmaParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)\":{\"details\":\"The caller must approve this contract to spend at least bond amount of currency.\",\"params\":{\"asserter\":\"receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.\",\"bond\":\"amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This must be >= getMinimumBond(address(currency)).\",\"callbackRecipient\":\"if configured, this address will receive a function call assertionResolvedCallback and assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.\",\"claim\":\"the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\",\"currency\":\"bond currency pulled from the caller and held in escrow until the assertion is resolved.\",\"domainId\":\"optional domain that can be used to relate this assertion to others in the escalationManager and can be used by the configured escalationManager to define custom behavior for groups of assertions. This is typically used for \\\"escalation games\\\" by changing bonds or other assertion properties based on the other assertions that have come before. If not needed this value should be 0 to save gas.\",\"escalationManager\":\"if configured, this address will control escalation properties of the assertion. This means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to validate disputes. Combining these, the asserter can define their own security properties for the assertion. escalationManager also _must_ implement the same callbacks as callbackRecipient.\",\"identifier\":\"UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.\",\"liveness\":\"time to wait before the assertion can be resolved. Assertion can be disputed in this time.\"},\"returns\":{\"_0\":\"assertionId unique identifier for this assertion.\"}},\"assertTruthWithDefaults(bytes,address)\":{\"details\":\"The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).\",\"params\":{\"asserter\":\"receives bonds back at settlement. This could be msg.sender or any other account that the caller wants to receive the bond at settlement time.\",\"claim\":\"the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\"},\"returns\":{\"_0\":\"assertionId unique identifier for this assertion.\"}},\"defaultIdentifier()\":{\"returns\":{\"_0\":\"The default identifier.\"}},\"getAssertion(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to fetch information for.\"},\"returns\":{\"_0\":\"assertion information about the assertion.\"}},\"getAssertionResult(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to fetch the resolution for.\"},\"returns\":{\"_0\":\"resolution of the assertion.\"}},\"getMinimumBond(address)\":{\"params\":{\"currency\":\"currency to calculate the minimum bond for.\"},\"returns\":{\"_0\":\"minimum bond amount.\"}},\"settleAndGetAssertionResult(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to resolve and return the resolution for.\"},\"returns\":{\"_0\":\"resolution of the assertion.\"}},\"settleAssertion(bytes32)\":{\"params\":{\"assertionId\":\"unique identifier for the assertion to resolve.\"}},\"syncUmaParams(bytes32,address)\":{\"params\":{\"currency\":\"currency to fetch information for and store locally.\",\"identifier\":\"identifier to fetch information for and store locally.\"}}},\"title\":\"Optimistic Oracle V3 Interface that callers must use to assert truths about the world.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)\":{\"notice\":\"Asserts a truth about the world, using a fully custom configuration.\"},\"assertTruthWithDefaults(bytes,address)\":{\"notice\":\"Asserts a truth about the world, using the default currency and liveness. No callback recipient or escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency.\"},\"defaultIdentifier()\":{\"notice\":\"Returns the default identifier used by the Optimistic Oracle V3.\"},\"getAssertion(bytes32)\":{\"notice\":\"Fetches information about a specific assertion and returns it.\"},\"getAssertionResult(bytes32)\":{\"notice\":\"Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then this will revert. If the assertion was disputed and configured to discard the oracle resolution return false.\"},\"getMinimumBond(address)\":{\"notice\":\"Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee.\"},\"settleAndGetAssertionResult(bytes32)\":{\"notice\":\"Settles an assertion and returns the resolution.\"},\"settleAssertion(bytes32)\":{\"notice\":\"Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of the bond is returned to the asserter or disputer.\"},\"syncUmaParams(bytes32,address)\":{\"notice\":\"Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy of the information within this contract. This is used to save gas when making assertions as we can avoid an external call to the UMA contracts to fetch this.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol\":\"OptimisticOracleV3Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@uma/=lib/protocol/packages/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3dac621d015a68a5251b1e5d41dda0faf252699bf6e8bcf46a958b29964d9dd1\",\"dweb:/ipfs/QmP9axjgZv4cezAhALoTemM62sdLtMDJ9MGTxECnNwHgSJ\"]},\"lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol\":{\"keccak256\":\"0x06c16f033cb100a20286b0f9c866a33a227a9e534544d5da6e5e20103d182d00\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://a354805eab907d5e9e7910f66ef5c5c5594bb5144a77541d6d30c6cb3cbd6871\",\"dweb:/ipfs/QmTfUDPJrsuUQ2aPwsbQwTaSvjUzBQFvFxXtmscZFymM4X\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"assertTruth(bytes,address,address,address,uint64,address,uint256,bytes32,bytes32)": {
								"notice": "Asserts a truth about the world, using a fully custom configuration."
							},
							"assertTruthWithDefaults(bytes,address)": {
								"notice": "Asserts a truth about the world, using the default currency and liveness. No callback recipient or escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency."
							},
							"defaultIdentifier()": {
								"notice": "Returns the default identifier used by the Optimistic Oracle V3."
							},
							"getAssertion(bytes32)": {
								"notice": "Fetches information about a specific assertion and returns it."
							},
							"getAssertionResult(bytes32)": {
								"notice": "Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then this will revert. If the assertion was disputed and configured to discard the oracle resolution return false."
							},
							"getMinimumBond(address)": {
								"notice": "Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee."
							},
							"settleAndGetAssertionResult(bytes32)": {
								"notice": "Settles an assertion and returns the resolution."
							},
							"settleAssertion(bytes32)": {
								"notice": "Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of the bond is returned to the asserter or disputer."
							},
							"syncUmaParams(bytes32,address)": {
								"notice": "Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy of the information within this contract. This is used to save gas when making assertions as we can avoid an external call to the UMA contracts to fetch this."
							}
						},
						"version": 1
					}
				}
			},
			"src/DeepFakeDetector.sol": {
				"DeepFakeDetector": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "imageId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "imageUrl",
									"type": "string"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "ImageAsserted",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "imageId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "imageUrl",
									"type": "string"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "ImageAssertionResolved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "imageId",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "imageUrl",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "asserter",
									"type": "address"
								}
							],
							"name": "assertDataFor",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "assertionDisputedCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "assertionLiveness",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								},
								{
									"internalType": "bool",
									"name": "assertedTruthfully",
									"type": "bool"
								}
							],
							"name": "assertionResolvedCallback",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultCurrency",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "defaultIdentifier",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "assertionId",
									"type": "bytes32"
								}
							],
							"name": "getImage",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "oo",
							"outputs": [
								{
									"internalType": "contract OptimisticOracleV3Interface",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/DeepFakeDetector.sol\":298:4422  contract DeepFakeDetector {... */\n  mstore(0x40, 0xe0)\n    /* \"src/DeepFakeDetector.sol\":1287:1582  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"src/DeepFakeDetector.sol\":1336:1378  0x07865c6E87B9F70255377e024ace6630C1Eaa37F */\n  0x07865c6e87b9f70255377e024ace6630c1eaa37f\n    /* \"src/DeepFakeDetector.sol\":1311:1379  defaultCurrency = IERC20(0x07865c6E87B9F70255377e024ace6630C1Eaa37F) */\n  0x80\n  mstore\n    /* \"src/DeepFakeDetector.sol\":1453:1495  0x9923D42eF695B5dd9911D05Ac944d4cAca3c4EAB */\n  0x9923d42ef695b5dd9911d05ac944d4caca3c4eab\n    /* \"src/DeepFakeDetector.sol\":1407:1505  oo = OptimisticOracleV3Interface(... */\n  0xa0\n  dup2\n  swap1\n  mstore\n    /* \"src/DeepFakeDetector.sol\":1553:1575  oo.defaultIdentifier() */\n  0x40\n  dup1\n  mload\n  shl(0xe0, 0xd509b017)\n  dup2\n  mstore\n  swap1\n  mload\n    /* \"src/DeepFakeDetector.sol\":1553:1573  oo.defaultIdentifier */\n  0xd509b017\n  swap2\n    /* \"src/DeepFakeDetector.sol\":1553:1575  oo.defaultIdentifier() */\n  0x04\n  dup1\n  dup3\n  add\n  swap3\n  0x20\n  swap3\n  swap1\n  swap2\n  swap1\n  dup3\n  swap1\n  sub\n  add\n  dup2\n    /* \"src/DeepFakeDetector.sol\":1453:1495  0x9923D42eF695B5dd9911D05Ac944d4cAca3c4EAB */\n  dup7\n    /* \"src/DeepFakeDetector.sol\":1553:1575  oo.defaultIdentifier() */\n  gas\n  staticcall\n  iszero\n  dup1\n  iszero\n  tag_5\n  jumpi\n  returndatasize\n  0x00\n  dup1\n  returndatacopy\n  revert(0x00, returndatasize)\ntag_5:\n  pop\n  pop\n  pop\n  pop\n  mload(0x40)\n  returndatasize\n  not(0x1f)\n  0x1f\n  dup3\n  add\n  and\n  dup3\n  add\n  dup1\n  0x40\n  mstore\n  pop\n  dup2\n  add\n  swap1\n  tag_6\n  swap2\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n    /* \"src/DeepFakeDetector.sol\":1533:1575  defaultIdentifier = oo.defaultIdentifier() */\n  0xc0\n  mstore\n    /* \"src/DeepFakeDetector.sol\":298:4422  contract DeepFakeDetector {... */\n  jump(tag_9)\n    /* \"#utility.yul\":14:198   */\ntag_7:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_11\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_11:\n  pop\n    /* \"#utility.yul\":176:192   */\n  mload\n  swap2\n    /* \"#utility.yul\":14:198   */\n  swap1\n  pop\n  jump\t// out\ntag_9:\n    /* \"src/DeepFakeDetector.sol\":298:4422  contract DeepFakeDetector {... */\n  mload(0x80)\n  mload(0xa0)\n  mload(0xc0)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x375233033f6f7a51b2a505507d1552dc6bc5c4e8ff14db1fff78baf8d68bce47\")\n  0x00\n  assignImmutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n  0x00\n  assignImmutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"src/DeepFakeDetector.sol\":298:4422  contract DeepFakeDetector {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xb75d4e24\n      gt\n      tag_11\n      jumpi\n      dup1\n      0xb75d4e24\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xd448a4ec\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xd509b017\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xf1b156b2\n      eq\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_11:\n      dup1\n      0x096464cc\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x20402e1d\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x6ced1ae9\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x8921a614\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"src/DeepFakeDetector.sol\":1945:3441  function assertDataFor(... */\n    tag_3:\n      tag_12\n      tag_13\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_13:\n      tag_15\n      jump\t// in\n    tag_12:\n      mload(0x40)\n        /* \"#utility.yul\":999:1024   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":987:989   */\n      0x20\n        /* \"#utility.yul\":972:990   */\n      add\n        /* \"src/DeepFakeDetector.sol\":1945:3441  function assertDataFor(... */\n    tag_16:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"src/DeepFakeDetector.sol\":362:401  IERC20 public immutable defaultCurrency */\n    tag_4:\n      tag_18\n      immutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n      dup2\n      jump\n    tag_18:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1212:1244   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1194:1245   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1182:1184   */\n      0x20\n        /* \"#utility.yul\":1167:1185   */\n      add\n        /* \"src/DeepFakeDetector.sol\":362:401  IERC20 public immutable defaultCurrency */\n      tag_16\n        /* \"#utility.yul\":1035:1251   */\n      jump\n        /* \"src/DeepFakeDetector.sol\":1703:1939  function getImage(... */\n    tag_5:\n      tag_22\n      tag_23\n      calldatasize\n      0x04\n      tag_24\n      jump\t// in\n    tag_23:\n      tag_25\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      tag_16\n      swap3\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n        /* \"src/DeepFakeDetector.sol\":408:455  OptimisticOracleV3Interface public immutable oo */\n    tag_6:\n      tag_18\n      immutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n      dup2\n      jump\n        /* \"src/DeepFakeDetector.sol\":461:508  uint64 public constant assertionLiveness = 3600 */\n    tag_7:\n      tag_32\n        /* \"src/DeepFakeDetector.sol\":504:508  3600 */\n      0x0e10\n        /* \"src/DeepFakeDetector.sol\":461:508  uint64 public constant assertionLiveness = 3600 */\n      dup2\n      jump\n    tag_32:\n      mload(0x40)\n        /* \"#utility.yul\":2696:2714   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":2684:2715   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":2666:2716   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2654:2656   */\n      0x20\n        /* \"#utility.yul\":2639:2657   */\n      add\n        /* \"src/DeepFakeDetector.sol\":461:508  uint64 public constant assertionLiveness = 3600 */\n      tag_16\n        /* \"#utility.yul\":2522:2722   */\n      jump\n        /* \"src/DeepFakeDetector.sol\":4355:4420  function assertionDisputedCallback(bytes32 assertionId) public {} */\n    tag_8:\n      tag_36\n      tag_37\n      calldatasize\n      0x04\n      tag_24\n      jump\t// in\n    tag_37:\n      pop\n      jump\n    tag_36:\n      stop\n        /* \"src/DeepFakeDetector.sol\":514:556  bytes32 public immutable defaultIdentifier */\n    tag_9:\n      tag_12\n      immutable(\"0x375233033f6f7a51b2a505507d1552dc6bc5c4e8ff14db1fff78baf8d68bce47\")\n      dup2\n      jump\n        /* \"src/DeepFakeDetector.sol\":3491:4158  function assertionResolvedCallback(... */\n    tag_10:\n      tag_36\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n        /* \"src/DeepFakeDetector.sol\":1945:3441  function assertDataFor(... */\n    tag_15:\n        /* \"src/DeepFakeDetector.sol\":2075:2094  bytes32 assertionId */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/DeepFakeDetector.sol\":2117:2139  asserter == address(0) */\n      dup3\n      and\n      iszero\n        /* \"src/DeepFakeDetector.sol\":2117:2163  asserter == address(0) ? msg.sender : asserter */\n      tag_47\n      jumpi\n        /* \"src/DeepFakeDetector.sol\":2155:2163  asserter */\n      dup2\n        /* \"src/DeepFakeDetector.sol\":2117:2163  asserter == address(0) ? msg.sender : asserter */\n      jump(tag_48)\n    tag_47:\n        /* \"src/DeepFakeDetector.sol\":2142:2152  msg.sender */\n      caller\n        /* \"src/DeepFakeDetector.sol\":2117:2163  asserter == address(0) ? msg.sender : asserter */\n    tag_48:\n        /* \"src/DeepFakeDetector.sol\":2188:2231  oo.getMinimumBond(address(defaultCurrency)) */\n      mload(0x40)\n      shl(0xe0, 0x4360af3d)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/DeepFakeDetector.sol\":2214:2229  defaultCurrency */\n      immutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n        /* \"#utility.yul\":1212:1244   */\n      dup2\n      and\n        /* \"src/DeepFakeDetector.sol\":2188:2231  oo.getMinimumBond(address(defaultCurrency)) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":1194:1245   */\n      mstore\n        /* \"src/DeepFakeDetector.sol\":2106:2163  asserter = asserter == address(0) ? msg.sender : asserter */\n      swap2\n      swap4\n      pop\n      0x00\n      swap2\n        /* \"src/DeepFakeDetector.sol\":2188:2190  oo */\n      immutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n        /* \"src/DeepFakeDetector.sol\":2188:2205  oo.getMinimumBond */\n      and\n      swap1\n      0x4360af3d\n      swap1\n        /* \"#utility.yul\":1167:1185   */\n      0x24\n      add\n        /* \"src/DeepFakeDetector.sol\":2188:2231  oo.getMinimumBond(address(defaultCurrency)) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_52\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_52:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_53\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n        /* \"src/DeepFakeDetector.sol\":2173:2231  uint256 bond = oo.getMinimumBond(address(defaultCurrency)) */\n      swap1\n      pop\n        /* \"src/DeepFakeDetector.sol\":2241:2306  defaultCurrency.safeTransferFrom(msg.sender, address(this), bond) */\n      tag_55\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/DeepFakeDetector.sol\":2241:2256  defaultCurrency */\n      immutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n        /* \"src/DeepFakeDetector.sol\":2241:2273  defaultCurrency.safeTransferFrom */\n      and\n        /* \"src/DeepFakeDetector.sol\":2274:2284  msg.sender */\n      caller\n        /* \"src/DeepFakeDetector.sol\":2294:2298  this */\n      address\n        /* \"src/DeepFakeDetector.sol\":2173:2231  uint256 bond = oo.getMinimumBond(address(defaultCurrency)) */\n      dup5\n        /* \"src/DeepFakeDetector.sol\":2241:2273  defaultCurrency.safeTransferFrom */\n      tag_56\n        /* \"src/DeepFakeDetector.sol\":2241:2306  defaultCurrency.safeTransferFrom(msg.sender, address(this), bond) */\n      jump\t// in\n    tag_55:\n        /* \"src/DeepFakeDetector.sol\":2316:2362  defaultCurrency.safeApprove(address(oo), bond) */\n      tag_57\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/DeepFakeDetector.sol\":2316:2331  defaultCurrency */\n      immutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n        /* \"src/DeepFakeDetector.sol\":2316:2343  defaultCurrency.safeApprove */\n      and\n        /* \"src/DeepFakeDetector.sol\":2352:2354  oo */\n      immutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n        /* \"src/DeepFakeDetector.sol\":2357:2361  bond */\n      dup4\n        /* \"src/DeepFakeDetector.sol\":2316:2343  defaultCurrency.safeApprove */\n      tag_58\n        /* \"src/DeepFakeDetector.sol\":2316:2362  defaultCurrency.safeApprove(address(oo), bond) */\n      jump\t// in\n    tag_57:\n        /* \"src/DeepFakeDetector.sol\":2387:2389  oo */\n      immutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/DeepFakeDetector.sol\":2387:2401  oo.assertTruth */\n      and\n      0x6457c979\n        /* \"src/DeepFakeDetector.sol\":2492:2500  imageUrl */\n      dup7\n      dup7\n        /* \"src/DeepFakeDetector.sol\":2554:2584  ClaimData.toUtf8Bytes(imageId) */\n      tag_59\n        /* \"src/DeepFakeDetector.sol\":2576:2583  imageId */\n      dup11\n        /* \"src/DeepFakeDetector.sol\":2554:2575  ClaimData.toUtf8Bytes */\n      tag_60\n        /* \"src/DeepFakeDetector.sol\":2554:2584  ClaimData.toUtf8Bytes(imageId) */\n      jump\t// in\n    tag_59:\n        /* \"src/DeepFakeDetector.sol\":2639:2677  ClaimData.toUtf8BytesAddress(asserter) */\n      tag_61\n        /* \"src/DeepFakeDetector.sol\":2668:2676  asserter */\n      dup9\n        /* \"src/DeepFakeDetector.sol\":2639:2667  ClaimData.toUtf8BytesAddress */\n      tag_62\n        /* \"src/DeepFakeDetector.sol\":2639:2677  ClaimData.toUtf8BytesAddress(asserter) */\n      jump\t// in\n    tag_61:\n        /* \"src/DeepFakeDetector.sol\":2695:2733  ClaimData.toUtf8BytesAddress(asserter) */\n      tag_63\n        /* \"src/DeepFakeDetector.sol\":2724:2732  asserter */\n      dup10\n        /* \"src/DeepFakeDetector.sol\":2695:2723  ClaimData.toUtf8BytesAddress */\n      tag_62\n        /* \"src/DeepFakeDetector.sol\":2695:2733  ClaimData.toUtf8BytesAddress(asserter) */\n      jump\t// in\n    tag_63:\n        /* \"src/DeepFakeDetector.sol\":2786:2828  ClaimData.toUtf8BytesUint(block.timestamp) */\n      tag_64\n        /* \"src/DeepFakeDetector.sol\":2812:2827  block.timestamp */\n      timestamp\n        /* \"src/DeepFakeDetector.sol\":2786:2811  ClaimData.toUtf8BytesUint */\n      tag_65\n        /* \"src/DeepFakeDetector.sol\":2786:2828  ClaimData.toUtf8BytesUint(block.timestamp) */\n      jump\t// in\n    tag_64:\n        /* \"src/DeepFakeDetector.sol\":2901:2944  ClaimData.toUtf8BytesAddress(address(this)) */\n      tag_66\n        /* \"src/DeepFakeDetector.sol\":2938:2942  this */\n      address\n        /* \"src/DeepFakeDetector.sol\":2901:2929  ClaimData.toUtf8BytesAddress */\n      tag_62\n        /* \"src/DeepFakeDetector.sol\":2901:2944  ClaimData.toUtf8BytesAddress(address(this)) */\n      jump\t// in\n    tag_66:\n        /* \"src/DeepFakeDetector.sol\":2415:2997  abi.encodePacked(... */\n      add(0x20, mload(0x40))\n      tag_67\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_68\n      jump\t// in\n    tag_67:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap1\n      dup3\n      swap1\n      mstore\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"src/DeepFakeDetector.sol\":2387:3213  oo.assertTruth(... */\n      0xe0\n      dup5\n      swap1\n      shl\n      and\n      dup3\n      mstore\n      tag_69\n      swap2\n        /* \"src/DeepFakeDetector.sol\":3011:3019  asserter */\n      dup8\n      swap1\n        /* \"src/DeepFakeDetector.sol\":3041:3045  this */\n      address\n      swap1\n        /* \"src/DeepFakeDetector.sol\":3068:3069  0 */\n      0x00\n      swap1\n        /* \"src/DeepFakeDetector.sol\":504:508  3600 */\n      0x0e10\n      swap1\n        /* \"src/DeepFakeDetector.sol\":3115:3130  defaultCurrency */\n      immutable(\"0x425aac06c182adcdfed4d2e1cb5cddb9644e1930dc479a82e602f60a766b30e7\")\n      swap1\n        /* \"src/DeepFakeDetector.sol\":3144:3148  bond */\n      dup11\n      swap1\n        /* \"src/DeepFakeDetector.sol\":3162:3179  defaultIdentifier */\n      immutable(\"0x375233033f6f7a51b2a505507d1552dc6bc5c4e8ff14db1fff78baf8d68bce47\")\n      swap1\n        /* \"src/DeepFakeDetector.sol\":3068:3069  0 */\n      dup6\n      swap1\n        /* \"src/DeepFakeDetector.sol\":2387:3213  oo.assertTruth(... */\n      0x04\n      add\n      tag_70\n      jump\t// in\n    tag_69:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_72\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_72:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_73\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_73:\n        /* \"src/DeepFakeDetector.sol\":2373:3213  assertionId = oo.assertTruth(... */\n      swap2\n      pop\n        /* \"src/DeepFakeDetector.sol\":3255:3363  ImageAssertion(... */\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n        /* \"src/DeepFakeDetector.sol\":3283:3290  imageId */\n      dup8\n        /* \"src/DeepFakeDetector.sol\":3255:3363  ImageAssertion(... */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"src/DeepFakeDetector.sol\":3304:3312  imageUrl */\n      dup7\n      dup7\n        /* \"src/DeepFakeDetector.sol\":3255:3363  ImageAssertion(... */\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      swap3\n      add\n      dup3\n      swap1\n      mstore\n      pop\n      swap4\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n      dup7\n      and\n      0x20\n      dup1\n      dup5\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x40\n      swap3\n      dup4\n      add\n      dup3\n      swap1\n      mstore\n        /* \"src/DeepFakeDetector.sol\":3224:3252  imageAssertions[assertionId] */\n      dup6\n      dup3\n      mstore\n      dup2\n      dup2\n      mstore\n      swap2\n      swap1\n      keccak256\n        /* \"src/DeepFakeDetector.sol\":3224:3363  imageAssertions[assertionId] = ImageAssertion(... */\n      dup3\n      mload\n      dup2\n      sstore\n      swap1\n      dup3\n      add\n      mload\n        /* \"src/DeepFakeDetector.sol\":3255:3363  ImageAssertion(... */\n      0x01\n        /* \"src/DeepFakeDetector.sol\":3224:3363  imageAssertions[assertionId] = ImageAssertion(... */\n      dup3\n      add\n      swap1\n      tag_75\n      swap1\n      dup3\n      tag_76\n      jump\t// in\n    tag_75:\n      pop\n      0x40\n      dup3\n      dup2\n      add\n      mload\n      0x02\n      swap1\n      swap3\n      add\n      dup1\n      sload\n      0x60\n      swap1\n      swap5\n      add\n      mload\n      iszero\n      iszero\n      shl(0xa0, 0x01)\n      mul\n      not(sub(shl(0xa8, 0x01), 0x01))\n      swap1\n      swap5\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap4\n      dup5\n      and\n      or\n      swap4\n      swap1\n      swap4\n      or\n      swap1\n      swap3\n      sstore\n        /* \"src/DeepFakeDetector.sol\":3379:3434  ImageAsserted(imageId, imageUrl, asserter, assertionId) */\n      swap1\n      mload\n        /* \"src/DeepFakeDetector.sol\":3422:3433  assertionId */\n      dup4\n      swap2\n        /* \"src/DeepFakeDetector.sol\":3379:3434  ImageAsserted(imageId, imageUrl, asserter, assertionId) */\n      dup6\n      and\n      swap1\n        /* \"src/DeepFakeDetector.sol\":3393:3400  imageId */\n      dup9\n      swap1\n        /* \"src/DeepFakeDetector.sol\":3379:3434  ImageAsserted(imageId, imageUrl, asserter, assertionId) */\n      0xb3b5c304bc1ba781ea735c86e786e9ae6432b86b469fbc00ec8bb252bf54eda8\n      swap1\n      tag_77\n      swap1\n        /* \"src/DeepFakeDetector.sol\":3402:3410  imageUrl */\n      dup11\n      swap1\n      dup11\n      swap1\n        /* \"src/DeepFakeDetector.sol\":3379:3434  ImageAsserted(imageId, imageUrl, asserter, assertionId) */\n      tag_78\n      jump\t// in\n    tag_77:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"src/DeepFakeDetector.sol\":2096:3441  {... */\n      pop\n        /* \"src/DeepFakeDetector.sol\":1945:3441  function assertDataFor(... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"src/DeepFakeDetector.sol\":1703:1939  function getImage(... */\n    tag_25:\n        /* \"src/DeepFakeDetector.sol\":1777:1781  bool */\n      0x00\n        /* \"src/DeepFakeDetector.sol\":1813:1841  imageAssertions[assertionId] */\n      dup2\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"src/DeepFakeDetector.sol\":1813:1850  imageAssertions[assertionId].resolved */\n      0x02\n      add\n      sload\n        /* \"src/DeepFakeDetector.sol\":1783:1796  string memory */\n      0x60\n      swap1\n      shl(0xa0, 0x01)\n        /* \"src/DeepFakeDetector.sol\":1813:1850  imageAssertions[assertionId].resolved */\n      swap1\n      div\n      0xff\n      and\n        /* \"src/DeepFakeDetector.sol\":1808:1870  if (!imageAssertions[assertionId].resolved) return (false, \"\") */\n      tag_80\n      jumpi\n      pop\n      pop\n        /* \"src/DeepFakeDetector.sol\":1852:1870  return (false, \"\") */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n      swap1\n      swap2\n      mstore\n        /* \"src/DeepFakeDetector.sol\":1860:1865  false */\n      0x00\n        /* \"src/DeepFakeDetector.sol\":1852:1870  return (false, \"\") */\n      dup1\n      dup3\n      mstore\n        /* \"src/DeepFakeDetector.sol\":1860:1865  false */\n      swap3\n        /* \"src/DeepFakeDetector.sol\":1852:1870  return (false, \"\") */\n      swap1\n      swap2\n      pop\n        /* \"src/DeepFakeDetector.sol\":1703:1939  function getImage(... */\n      jump\t// out\n        /* \"src/DeepFakeDetector.sol\":1808:1870  if (!imageAssertions[assertionId].resolved) return (false, \"\") */\n    tag_80:\n        /* \"src/DeepFakeDetector.sol\":1894:1909  imageAssertions */\n      0x00\n        /* \"src/DeepFakeDetector.sol\":1894:1922  imageAssertions[assertionId] */\n      dup4\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"src/DeepFakeDetector.sol\":1888:1892  true */\n      0x01\n        /* \"src/DeepFakeDetector.sol\":1894:1931  imageAssertions[assertionId].imageUrl */\n      swap1\n      dup2\n      add\n        /* \"src/DeepFakeDetector.sol\":1880:1932  return (true, imageAssertions[assertionId].imageUrl) */\n      dup1\n      sload\n        /* \"src/DeepFakeDetector.sol\":1894:1931  imageAssertions[assertionId].imageUrl */\n      dup2\n      swap1\n        /* \"src/DeepFakeDetector.sol\":1880:1932  return (true, imageAssertions[assertionId].imageUrl) */\n      tag_81\n      swap1\n      tag_82\n      jump\t// in\n    tag_81:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_83\n      swap1\n      tag_82\n      jump\t// in\n    tag_83:\n      dup1\n      iszero\n      tag_84\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_85\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_84)\n    tag_85:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_86:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_86\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_84:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap2\n      pop\n      swap2\n      pop\n        /* \"src/DeepFakeDetector.sol\":1703:1939  function getImage(... */\n      swap2\n      pop\n      swap2\n      jump\t// out\n        /* \"src/DeepFakeDetector.sol\":3491:4158  function assertionResolvedCallback(... */\n    tag_45:\n        /* \"src/DeepFakeDetector.sol\":3619:3629  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/DeepFakeDetector.sol\":3641:3643  oo */\n      immutable(\"0xdefe319dc50e05250759b13bd8d7e9db7bb9ceac4f390379b62a1cc566578ec9\")\n        /* \"src/DeepFakeDetector.sol\":3619:3644  msg.sender == address(oo) */\n      and\n      eq\n        /* \"src/DeepFakeDetector.sol\":3611:3645  require(msg.sender == address(oo)) */\n      tag_89\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_89:\n        /* \"src/DeepFakeDetector.sol\":3734:3752  assertedTruthfully */\n      dup1\n        /* \"src/DeepFakeDetector.sol\":3730:4151  if (assertedTruthfully) {... */\n      iszero\n      tag_90\n      jumpi\n        /* \"src/DeepFakeDetector.sol\":3768:3783  imageAssertions */\n      0x00\n        /* \"src/DeepFakeDetector.sol\":3768:3796  imageAssertions[assertionId] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"src/DeepFakeDetector.sol\":3768:3805  imageAssertions[assertionId].resolved */\n      0x02\n      dup2\n      add\n        /* \"src/DeepFakeDetector.sol\":3768:3812  imageAssertions[assertionId].resolved = true */\n      dup1\n      sload\n      not(shl(0xa0, 0xff))\n      and\n      shl(0xa0, 0x01)\n      or\n      swap1\n      sstore\n        /* \"src/DeepFakeDetector.sol\":3826:3893  ImageAssertion memory imageAssertion = imageAssertions[assertionId] */\n      dup2\n      mload\n      0x80\n      dup2\n      add\n      swap1\n      swap3\n      mstore\n      dup1\n      sload\n      dup3\n      mstore\n        /* \"src/DeepFakeDetector.sol\":3808:3812  true */\n      0x01\n        /* \"src/DeepFakeDetector.sol\":3826:3893  ImageAssertion memory imageAssertion = imageAssertions[assertionId] */\n      dup2\n      add\n      dup1\n      sload\n      swap3\n      swap4\n        /* \"src/DeepFakeDetector.sol\":3768:3796  imageAssertions[assertionId] */\n      swap2\n      swap3\n        /* \"src/DeepFakeDetector.sol\":3826:3893  ImageAssertion memory imageAssertion = imageAssertions[assertionId] */\n      swap2\n      dup5\n      add\n      swap2\n      tag_91\n      swap1\n      tag_82\n      jump\t// in\n    tag_91:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_92\n      swap1\n      tag_82\n      jump\t// in\n    tag_92:\n      dup1\n      iszero\n      tag_93\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_94\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_93)\n    tag_94:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_95:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_95\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_93:\n      pop\n      pop\n      pop\n      swap2\n      dup4\n      mstore\n      pop\n      pop\n      0x02\n      swap2\n      swap1\n      swap2\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup3\n      and\n      0x20\n      dup1\n      dup6\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      shl(0xa0, 0x01)\n      swap1\n      swap3\n      div\n      0xff\n      and\n      iszero\n      iszero\n      0x40\n      swap4\n      dup5\n      add\n      mstore\n        /* \"src/DeepFakeDetector.sol\":4033:4056  imageAssertion.asserter */\n      dup4\n      dup4\n      add\n      mload\n        /* \"src/DeepFakeDetector.sol\":3952:3974  imageAssertion.imageId */\n      dup5\n      mload\n        /* \"src/DeepFakeDetector.sol\":3992:4015  imageAssertion.imageUrl */\n      swap3\n      dup6\n      add\n      mload\n        /* \"src/DeepFakeDetector.sol\":3912:4099  ImageAssertionResolved(... */\n      swap4\n      mload\n        /* \"src/DeepFakeDetector.sol\":4033:4056  imageAssertion.asserter */\n      swap5\n      swap6\n      pop\n        /* \"src/DeepFakeDetector.sol\":4074:4085  assertionId */\n      dup8\n      swap5\n        /* \"src/DeepFakeDetector.sol\":3912:4099  ImageAssertionResolved(... */\n      swap2\n      and\n      swap3\n      0x2cd47d03ca5eed86ed11475382af40bc0f2965dd65bc4ab337d45577ea5dfaf9\n      swap2\n      tag_96\n      swap2\n        /* \"src/DeepFakeDetector.sol\":3992:4015  imageAssertion.imageUrl */\n      swap1\n        /* \"src/DeepFakeDetector.sol\":3912:4099  ImageAssertionResolved(... */\n      tag_97\n      jump\t// in\n    tag_96:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"src/DeepFakeDetector.sol\":3754:4110  {... */\n      pop\n        /* \"src/DeepFakeDetector.sol\":3491:4158  function assertionResolvedCallback(... */\n      pop\n      pop\n      jump\t// out\n        /* \"src/DeepFakeDetector.sol\":3730:4151  if (assertedTruthfully) {... */\n    tag_90:\n        /* \"src/DeepFakeDetector.sol\":4123:4138  imageAssertions */\n      0x00\n        /* \"src/DeepFakeDetector.sol\":4123:4151  imageAssertions[assertionId] */\n      dup3\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"src/DeepFakeDetector.sol\":4116:4151  delete imageAssertions[assertionId] */\n      dup2\n      dup2\n      sstore\n        /* \"src/DeepFakeDetector.sol\":4123:4151  imageAssertions[assertionId] */\n      swap1\n        /* \"src/DeepFakeDetector.sol\":4116:4151  delete imageAssertions[assertionId] */\n      tag_99\n      0x01\n      dup4\n      add\n        /* \"src/DeepFakeDetector.sol\":4123:4138  imageAssertions */\n      dup3\n        /* \"src/DeepFakeDetector.sol\":4116:4151  delete imageAssertions[assertionId] */\n      tag_100\n      jump\t// in\n    tag_99:\n      pop\n      0x02\n      add\n      dup1\n      sload\n      not(sub(shl(0xa8, 0x01), 0x01))\n      and\n      swap1\n      sstore\n        /* \"src/DeepFakeDetector.sol\":3491:4158  function assertionResolvedCallback(... */\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1355:1558  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_56:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1482:1550  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":10706:10721   */\n      dup1\n      dup6\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1482:1550  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":10688:10722   */\n      mstore\n        /* \"#utility.yul\":10758:10773   */\n      dup4\n      and\n        /* \"#utility.yul\":10738:10756   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10731:10774   */\n      mstore\n        /* \"#utility.yul\":10790:10808   */\n      0x64\n      dup2\n      add\n        /* \"#utility.yul\":10783:10817   */\n      dup3\n      swap1\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1455:1551  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_102\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1475:1480  token */\n      dup6\n      swap1\n      shl(0xe0, 0x23b872dd)\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1505:1532  token.transferFrom.selector */\n      swap1\n        /* \"#utility.yul\":10623:10641   */\n      0x84\n      add\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1482:1550  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n    tag_103:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1455:1474  _callOptionalReturn */\n      tag_105\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1455:1551  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_102:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1355:1558  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1818:2391  function safeApprove(IERC20 token, address spender, uint256 value) internal {... */\n    tag_58:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2143:2153  value == 0 */\n      dup1\n      iszero\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2142:2204  (value == 0) || (token.allowance(address(this), spender) == 0) */\n      tag_107\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2159:2198  token.allowance(address(this), spender) */\n      mload(0x40)\n      shl(0xe1, 0x6eb1769f)\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2183:2187  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2159:2198  token.allowance(address(this), spender) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11040:11074   */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":11110:11125   */\n      dup4\n      dup2\n      and\n        /* \"#utility.yul\":11090:11108   */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":11083:11126   */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2159:2174  token.allowance */\n      dup5\n      and\n      swap1\n      0xdd62ed3e\n      swap1\n        /* \"#utility.yul\":10975:10993   */\n      0x44\n      add\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2159:2198  token.allowance(address(this), spender) */\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_111\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_111:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_112\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_112:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2159:2203  token.allowance(address(this), spender) == 0 */\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2142:2204  (value == 0) || (token.allowance(address(this), spender) == 0) */\n    tag_107:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2121:2284  require(... */\n      tag_113\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11339:11341   */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2121:2284  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11321:11342   */\n      mstore\n        /* \"#utility.yul\":11378:11380   */\n      0x36\n        /* \"#utility.yul\":11358:11376   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11351:11381   */\n      mstore\n        /* \"#utility.yul\":11417:11451   */\n      0x5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f\n        /* \"#utility.yul\":11397:11415   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11390:11452   */\n      mstore\n      shl(0x50, 0x20746f206e6f6e2d7a65726f20616c6c6f77616e6365)\n        /* \"#utility.yul\":11468:11486   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11461:11513   */\n      mstore\n        /* \"#utility.yul\":11530:11549   */\n      0x84\n      add\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2121:2284  require(... */\n    tag_114:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_113:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2321:2383  abi.encodeWithSelector(token.approve.selector, spender, value) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":11752:11784   */\n      dup4\n      and\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2321:2383  abi.encodeWithSelector(token.approve.selector, spender, value) */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11734:11785   */\n      mstore\n        /* \"#utility.yul\":11801:11819   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":11794:11828   */\n      dup3\n      swap1\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2294:2384  _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)) */\n      tag_116\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2314:2319  token */\n      dup5\n      swap1\n      shl(0xe0, 0x095ea7b3)\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2344:2366  token.approve.selector */\n      swap1\n        /* \"#utility.yul\":11707:11725   */\n      0x64\n      add\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2321:2383  abi.encodeWithSelector(token.approve.selector, spender, value) */\n      tag_103\n        /* \"#utility.yul\":11560:11834   */\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":2294:2384  _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)) */\n    tag_116:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":1818:2391  function safeApprove(IERC20 token, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2586:2768  function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {... */\n    tag_60:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2647:2659  bytes memory */\n      0x60\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2695:2730  toUtf8Bytes32Bottom(bytesIn >> 128) */\n      tag_120\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2726:2729  128 */\n      0x80\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2715:2722  bytesIn */\n      dup4\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2715:2729  bytesIn >> 128 */\n      swap1\n      shr\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2695:2714  toUtf8Bytes32Bottom */\n      tag_121\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2695:2730  toUtf8Bytes32Bottom(bytesIn >> 128) */\n      jump\t// in\n    tag_120:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2732:2760  toUtf8Bytes32Bottom(bytesIn) */\n      tag_122\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2752:2759  bytesIn */\n      dup4\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2732:2751  toUtf8Bytes32Bottom */\n      tag_121\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2732:2760  toUtf8Bytes32Bottom(bytesIn) */\n      jump\t// in\n    tag_122:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2678:2761  abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn)) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":11996:12015   */\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"#utility.yul\":12031:12043   */\n      dup3\n      add\n        /* \"#utility.yul\":12024:12052   */\n      mstore\n        /* \"#utility.yul\":12068:12080   */\n      0x60\n      add\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2678:2761  abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn)) */\n    tag_123:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2671:2761  return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn)) */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2586:2768  function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3145:3363  function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {... */\n    tag_62:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3207:3219  bytes memory */\n      0x60\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3267:3314  toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128) */\n      tag_126\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3287:3313  bytes32(bytes20(x)) >> 128 */\n      0x20\n      dup5\n      swap1\n      shr\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3267:3286  toUtf8Bytes32Bottom */\n      tag_121\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3267:3314  toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128) */\n      jump\t// in\n    tag_126:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3323:3354  toUtf8Bytes32Bottom(bytes20(x)) */\n      tag_127\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3351:3352  x */\n      dup4\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3343:3353  bytes20(x) */\n      0x60\n      shl\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3323:3354  toUtf8Bytes32Bottom(bytes20(x)) */\n      not(0xffffffffffffffffffffffff)\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3323:3342  toUtf8Bytes32Bottom */\n      tag_121\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3323:3354  toUtf8Bytes32Bottom(bytes20(x)) */\n      jump\t// in\n    tag_127:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3250:3356  abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x)))) */\n      add(0x20, mload(0x40))\n      tag_123\n      swap3\n      swap2\n      swap1\n        /* \"#utility.yul\":12246:12265   */\n      swap2\n      dup3\n      mstore\n      not(sub(shl(0xc0, 0x01), 0x01))\n        /* \"#utility.yul\":12295:12336   */\n      and\n        /* \"#utility.yul\":12290:12292   */\n      0x20\n        /* \"#utility.yul\":12281:12293   */\n      dup3\n      add\n        /* \"#utility.yul\":12274:12337   */\n      mstore\n        /* \"#utility.yul\":12362:12364   */\n      0x28\n        /* \"#utility.yul\":12353:12365   */\n      add\n      swap1\n        /* \"#utility.yul\":12091:12371   */\n      jump\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3569:4115  function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {... */\n    tag_65:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3628:3640  bytes memory */\n      0x60\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3656:3657  x */\n      dup2\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3661:3662  0 */\n      0x00\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3656:3662  x == 0 */\n      sub\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3652:3699  if (x == 0) {... */\n      tag_131\n      jumpi\n      pop\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3678:3688  return \"0\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x01\n      dup2\n      mstore\n      shl(0xfc, 0x03)\n      0x20\n      dup3\n      add\n      mstore\n      swap1\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3569:4115  function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {... */\n      jump\t// out\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3652:3699  if (x == 0) {... */\n    tag_131:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3720:3721  x */\n      dup2\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3708:3717  uint256 j */\n      0x00\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3752:3818  while (j != 0) {... */\n    tag_132:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3759:3765  j != 0 */\n      dup2\n      iszero\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3752:3818  while (j != 0) {... */\n      tag_133\n      jumpi\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3781:3786  len++ */\n      dup1\n      tag_134\n      dup2\n      tag_135\n      jump\t// in\n    tag_134:\n      swap2\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3800:3807  j /= 10 */\n      tag_136\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3805:3807  10 */\n      0x0a\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3800:3807  j /= 10 */\n      dup4\n      tag_137\n      jump\t// in\n    tag_136:\n      swap2\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3752:3818  while (j != 0) {... */\n      jump(tag_132)\n    tag_133:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3827:3844  bytes memory bstr */\n      0x00\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3857:3860  len */\n      dup2\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3847:3861  new bytes(len) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_139\n      jumpi\n      tag_139\n      tag_140\n      jump\t// in\n    tag_139:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_141\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_141:\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3827:3861  bytes memory bstr = new bytes(len) */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3883:3886  len */\n      dup2\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3896:4088  while (x != 0) {... */\n    tag_142:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3903:3909  x != 0 */\n      dup6\n      iszero\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3896:4088  while (x != 0) {... */\n      tag_143\n      jumpi\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3929:3934  k - 1 */\n      tag_144\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3933:3934  1 */\n      0x01\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3929:3930  k */\n      dup3\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3929:3934  k - 1 */\n      tag_145\n      jump\t// in\n    tag_144:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3925:3934  k = k - 1 */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3948:3958  uint8 temp */\n      0x00\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3978:3984  x / 10 */\n      tag_146\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3982:3984  10 */\n      0x0a\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3978:3979  x */\n      dup9\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3978:3984  x / 10 */\n      tag_137\n      jump\t// in\n    tag_146:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3977:3990  (x / 10) * 10 */\n      tag_147\n      swap1\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3988:3990  10 */\n      0x0a\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3977:3990  (x / 10) * 10 */\n      tag_148\n      jump\t// in\n    tag_147:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3973:3990  x - (x / 10) * 10 */\n      tag_149\n      swap1\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3973:3974  x */\n      dup9\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3973:3990  x - (x / 10) * 10 */\n      tag_145\n      jump\t// in\n    tag_149:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3962:3991  48 + uint8(x - (x / 10) * 10) */\n      tag_150\n      swap1\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3962:3964  48 */\n      0x30\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3962:3991  48 + uint8(x - (x / 10) * 10) */\n      tag_151\n      jump\t// in\n    tag_150:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3948:3992  uint8 temp = (48 + uint8(x - (x / 10) * 10)) */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4006:4015  bytes1 b1 */\n      0x00\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4025:4029  temp */\n      dup2\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4018:4030  bytes1(temp) */\n      0xf8\n      shl\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4006:4030  bytes1 b1 = bytes1(temp) */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4054:4056  b1 */\n      dup1\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4044:4048  bstr */\n      dup5\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4049:4050  k */\n      dup5\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4044:4051  bstr[k] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_153\n      jumpi\n      tag_153\n      tag_154\n      jump\t// in\n    tag_153:\n      0x20\n      add\n      add\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4044:4056  bstr[k] = b1 */\n      swap1\n      not(sub(shl(0xf8, 0x01), 0x01))\n      and\n      swap1\n      dup2\n      0x00\n      byte\n      swap1\n      mstore8\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4070:4077  x /= 10 */\n      tag_155\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4075:4077  10 */\n      0x0a\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4070:4077  x /= 10 */\n      dup10\n      tag_137\n      jump\t// in\n    tag_155:\n      swap8\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3911:4088  {... */\n      pop\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3896:4088  while (x != 0) {... */\n      jump(tag_142)\n    tag_143:\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":4104:4108  bstr */\n      swap5\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":3569:4115  function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5173:5815  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_105:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5592:5615  bytes memory returndata */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5618:5687  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_157\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5646:5650  data */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5618:5687  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5626:5631  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5618:5645  address(token).functionCall */\n      and\n      tag_158\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5618:5687  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_157:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5592:5687  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5705:5715  returndata */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5705:5722  returndata.length */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5726:5727  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5705:5727  returndata.length == 0 */\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5705:5761  returndata.length == 0 || abi.decode(returndata, (bool)) */\n      dup1\n      tag_160\n      jumpi\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5742:5752  returndata */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5731:5761  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_160\n      swap2\n      swap1\n      tag_161\n      jump\t// in\n    tag_160:\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5697:5808  require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_116\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14045:14047   */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5697:5808  require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14027:14048   */\n      mstore\n        /* \"#utility.yul\":14084:14086   */\n      0x2a\n        /* \"#utility.yul\":14064:14082   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14057:14087   */\n      mstore\n        /* \"#utility.yul\":14123:14157   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":14103:14121   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14096:14158   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":14174:14192   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":14167:14207   */\n      mstore\n        /* \"#utility.yul\":14224:14243   */\n      0x84\n      add\n        /* \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":5697:5808  require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_114\n        /* \"#utility.yul\":13843:14249   */\n      jump\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":897:2203  function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {... */\n    tag_121:\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":965:972  bytes32 */\n      0x00\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1008:1017  uint256 x */\n      dup1\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1028:1035  bytesIn */\n      dup3\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1020:1036  uint256(bytesIn) */\n      0x00\n      shr\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1008:1036  uint256 x = uint256(bytesIn) */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1088:1089  x */\n      dup1\n      sub(shl(0x80, 0x01), 0x01)\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1088:1158  x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff */\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1084:1158  x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1182:1183  x */\n      dup1\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1186:1191  2**64 */\n      0x010000000000000000\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1182:1191  x * 2**64 */\n      mul\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1177:1178  x */\n      dup2\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1177:1192  x | (x * 2**64) */\n      or\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1196:1262  0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff */\n      0xffffffffffffffff0000000000000000ffffffffffffffff\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1176:1262  (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff */\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1172:1262  x = (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1286:1287  x */\n      dup1\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1290:1295  2**32 */\n      0x0100000000\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1286:1295  x * 2**32 */\n      mul\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1281:1282  x */\n      dup2\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1281:1296  x | (x * 2**32) */\n      or\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1300:1366  0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff */\n      0xffffffff00000000ffffffff00000000ffffffff00000000ffffffff\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1280:1366  (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff */\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1276:1366  x = (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1390:1391  x */\n      dup1\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1394:1399  2**16 */\n      0x010000\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1390:1399  x * 2**16 */\n      mul\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1385:1386  x */\n      dup2\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1385:1400  x | (x * 2**16) */\n      or\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1404:1470  0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff */\n      0xffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1384:1470  (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff */\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1380:1470  x = (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1494:1495  x */\n      dup1\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1498:1502  2**8 */\n      0x0100\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1494:1502  x * 2**8 */\n      mul\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1489:1490  x */\n      dup2\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1489:1503  x | (x * 2**8) */\n      or\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1507:1573  0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff */\n      0xff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1488:1573  (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff */\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1484:1573  x = (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1597:1598  x */\n      dup1\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1601:1605  2**4 */\n      0x10\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1597:1605  x * 2**4 */\n      mul\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1592:1593  x */\n      dup2\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1592:1606  x | (x * 2**4) */\n      or\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1610:1676  0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f */\n      0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1591:1676  (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f */\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1587:1676  x = (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f */\n      swap1\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1717:1726  uint256 h */\n      0x00\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1804:1805  8 */\n      0x08\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1730:1731  x */\n      dup3\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1734:1800  0x0808080808080808080808080808080808080808080808080808080808080808 */\n      0x0808080808080808080808080808080808080808080808080808080808080808\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1730:1800  x & 0x0808080808080808080808080808080808080808080808080808080808080808 */\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1729:1805  (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8 */\n      dup2\n      tag_167\n      jumpi\n      tag_167\n      tag_168\n      jump\t// in\n    tag_167:\n      div\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1906:1907  4 */\n      0x04\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1836:1902  0x0404040404040404040404040404040404040404040404040404040404040404 */\n      0x0404040404040404040404040404040404040404040404040404040404040404\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1832:1902  x & 0x0404040404040404040404040404040404040404040404040404040404040404 */\n      dup5\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1831:1907  (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4 */\n      div\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2008:2009  2 */\n      0x02\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1938:2004  0x0202020202020202020202020202020202020202020202020202020202020202 */\n      0x0202020202020202020202020202020202020202020202020202020202020202\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1934:2004  x & 0x0202020202020202020202020202020202020202020202020202020202020202 */\n      dup6\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":1933:2009  (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2 */\n      div\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2037:2042  i | j */\n      or\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2032:2043  h & (i | j) */\n      and\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2047:2051  0x27 */\n      0x27\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2031:2051  (h & (i | j)) * 0x27 */\n      mul\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2027:2051  x + (h & (i | j)) * 0x27 */\n      swap1\n      swap2\n      add\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2054:2120  0x3030303030303030303030303030303030303030303030303030303030303030 */\n      0x3030303030303030303030303030303030303030303030303030303030303030\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":2027:2120  x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030 */\n      add\n      swap4\n      swap3\n      pop\n      pop\n      pop\n        /* \"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":897:2203  function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4108:4331  function functionCall(... */\n    tag_158:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4241:4253  bytes memory */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4272:4324  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_174\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4294:4300  target */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4302:4306  data */\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4308:4309  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4311:4323  errorMessage */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4272:4293  functionCallWithValue */\n      tag_175\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4272:4324  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_174:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4265:4324  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":4108:4331  function functionCall(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5165:5611  function functionCallWithValue(... */\n    tag_175:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5330:5342  bytes memory */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5387:5392  value */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5362:5383  address(this).balance */\n      selfbalance\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5362:5392  address(this).balance >= value */\n      lt\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5354:5435  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_177\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14456:14458   */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5354:5435  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14438:14459   */\n      mstore\n        /* \"#utility.yul\":14495:14497   */\n      0x26\n        /* \"#utility.yul\":14475:14493   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14468:14498   */\n      mstore\n        /* \"#utility.yul\":14534:14568   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":14514:14532   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14507:14569   */\n      mstore\n      shl(0xd2, 0x1c8818d85b1b)\n        /* \"#utility.yul\":14585:14603   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":14578:14614   */\n      mstore\n        /* \"#utility.yul\":14631:14650   */\n      0x84\n      add\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5354:5435  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_114\n        /* \"#utility.yul\":14254:14656   */\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5354:5435  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n    tag_177:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5446:5458  bool success */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5460:5483  bytes memory returndata */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5487:5493  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5487:5498  target.call */\n      and\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5506:5511  value */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5513:5517  data */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5487:5518  target.call{value: value}(data) */\n      mload(0x40)\n      tag_180\n      swap2\n      swap1\n      tag_181\n      jump\t// in\n    tag_180:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_184\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_183)\n    tag_184:\n      0x60\n      swap2\n      pop\n    tag_183:\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5445:5518  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5535:5604  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      tag_185\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5562:5568  target */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5570:5577  success */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5579:5589  returndata */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5591:5603  errorMessage */\n      dup8\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5535:5561  verifyCallResultFromTarget */\n      tag_186\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5535:5604  verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      jump\t// in\n    tag_185:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5528:5604  return verifyCallResultFromTarget(target, success, returndata, errorMessage) */\n      swap8\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":5165:5611  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":7671:8299  function verifyCallResultFromTarget(... */\n    tag_186:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":7851:7863  bytes memory */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":7879:7886  success */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":7875:8293  if (success) {... */\n      iszero\n      tag_188\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":7906:7916  returndata */\n      dup3\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":7906:7923  returndata.length */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":7927:7928  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":7906:7928  returndata.length == 0 */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":7902:8188  if (returndata.length == 0) {... */\n      tag_192\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1702:1721  account.code.length */\n      dup6\n      and\n      extcodesize\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8113:8173  require(isContract(target), \"Address: call to non-contract\") */\n      tag_192\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":15155:15157   */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8113:8173  require(isContract(target), \"Address: call to non-contract\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":15137:15158   */\n      mstore\n        /* \"#utility.yul\":15194:15196   */\n      0x1d\n        /* \"#utility.yul\":15174:15192   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":15167:15197   */\n      mstore\n        /* \"#utility.yul\":15233:15264   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":15213:15231   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15206:15265   */\n      mstore\n        /* \"#utility.yul\":15282:15300   */\n      0x64\n      add\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8113:8173  require(isContract(target), \"Address: call to non-contract\") */\n      tag_114\n        /* \"#utility.yul\":14953:15306   */\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8113:8173  require(isContract(target), \"Address: call to non-contract\") */\n    tag_192:\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8208:8218  returndata */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8201:8218  return returndata */\n      jump(tag_174)\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":7875:8293  if (success) {... */\n    tag_188:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8249:8282  _revert(returndata, errorMessage) */\n      tag_174\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8257:8267  returndata */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8269:8281  errorMessage */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8980:8997  returndata.length */\n      dup2\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8980:9001  returndata.length > 0 */\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8976:9355  if (returndata.length > 0) {... */\n      tag_200\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":9208:9218  returndata */\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":9202:9219  mload(returndata) */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":9264:9279  returndata_size */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":9251:9261  returndata */\n      dup4\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":9247:9249  32 */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":9243:9262  add(32, returndata) */\n      add\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":9236:9280  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":8976:9355  if (returndata.length > 0) {... */\n    tag_200:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":9331:9343  errorMessage */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":9324:9344  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_114\n      swap2\n      swap1\n      tag_97\n      jump\t// in\n    tag_100:\n      pop\n      dup1\n      sload\n      tag_203\n      swap1\n      tag_82\n      jump\t// in\n    tag_203:\n      0x00\n      dup3\n      sstore\n      dup1\n      0x1f\n      lt\n      tag_205\n      jumpi\n      pop\n      pop\n      jump\t// out\n    tag_205:\n      0x1f\n      add\n      0x20\n      swap1\n      div\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n      dup2\n      add\n      swap1\n      tag_37\n      swap2\n      swap1\n    tag_208:\n      dup1\n      dup3\n      gt\n      iszero\n      tag_209\n      jumpi\n      0x00\n      dup2\n      sstore\n      0x01\n      add\n      jump(tag_208)\n    tag_209:\n      pop\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":14:848   */\n    tag_14:\n        /* \"#utility.yul\":103:109   */\n      0x00\n        /* \"#utility.yul\":111:117   */\n      dup1\n        /* \"#utility.yul\":119:125   */\n      0x00\n        /* \"#utility.yul\":127:133   */\n      dup1\n        /* \"#utility.yul\":180:182   */\n      0x60\n        /* \"#utility.yul\":168:177   */\n      dup6\n        /* \"#utility.yul\":159:166   */\n      dup8\n        /* \"#utility.yul\":155:178   */\n      sub\n        /* \"#utility.yul\":151:183   */\n      slt\n        /* \"#utility.yul\":148:200   */\n      iszero\n      tag_221\n      jumpi\n        /* \"#utility.yul\":196:197   */\n      0x00\n        /* \"#utility.yul\":193:194   */\n      dup1\n        /* \"#utility.yul\":186:198   */\n      revert\n        /* \"#utility.yul\":148:200   */\n    tag_221:\n        /* \"#utility.yul\":232:241   */\n      dup5\n        /* \"#utility.yul\":219:242   */\n      calldataload\n        /* \"#utility.yul\":209:242   */\n      swap4\n      pop\n        /* \"#utility.yul\":293:295   */\n      0x20\n        /* \"#utility.yul\":282:291   */\n      dup6\n        /* \"#utility.yul\":278:296   */\n      add\n        /* \"#utility.yul\":265:297   */\n      calldataload\n        /* \"#utility.yul\":316:334   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":357:359   */\n      dup1\n        /* \"#utility.yul\":349:355   */\n      dup3\n        /* \"#utility.yul\":346:360   */\n      gt\n        /* \"#utility.yul\":343:377   */\n      iszero\n      tag_222\n      jumpi\n        /* \"#utility.yul\":373:374   */\n      0x00\n        /* \"#utility.yul\":370:371   */\n      dup1\n        /* \"#utility.yul\":363:375   */\n      revert\n        /* \"#utility.yul\":343:377   */\n    tag_222:\n        /* \"#utility.yul\":411:417   */\n      dup2\n        /* \"#utility.yul\":400:409   */\n      dup8\n        /* \"#utility.yul\":396:418   */\n      add\n        /* \"#utility.yul\":386:418   */\n      swap2\n      pop\n        /* \"#utility.yul\":456:463   */\n      dup8\n        /* \"#utility.yul\":449:453   */\n      0x1f\n        /* \"#utility.yul\":445:447   */\n      dup4\n        /* \"#utility.yul\":441:454   */\n      add\n        /* \"#utility.yul\":437:464   */\n      slt\n        /* \"#utility.yul\":427:482   */\n      tag_223\n      jumpi\n        /* \"#utility.yul\":478:479   */\n      0x00\n        /* \"#utility.yul\":475:476   */\n      dup1\n        /* \"#utility.yul\":468:480   */\n      revert\n        /* \"#utility.yul\":427:482   */\n    tag_223:\n        /* \"#utility.yul\":518:520   */\n      dup2\n        /* \"#utility.yul\":505:521   */\n      calldataload\n        /* \"#utility.yul\":544:546   */\n      dup2\n        /* \"#utility.yul\":536:542   */\n      dup2\n        /* \"#utility.yul\":533:547   */\n      gt\n        /* \"#utility.yul\":530:564   */\n      iszero\n      tag_224\n      jumpi\n        /* \"#utility.yul\":560:561   */\n      0x00\n        /* \"#utility.yul\":557:558   */\n      dup1\n        /* \"#utility.yul\":550:562   */\n      revert\n        /* \"#utility.yul\":530:564   */\n    tag_224:\n        /* \"#utility.yul\":605:612   */\n      dup9\n        /* \"#utility.yul\":600:602   */\n      0x20\n        /* \"#utility.yul\":591:597   */\n      dup3\n        /* \"#utility.yul\":587:589   */\n      dup6\n        /* \"#utility.yul\":583:598   */\n      add\n        /* \"#utility.yul\":579:603   */\n      add\n        /* \"#utility.yul\":576:613   */\n      gt\n        /* \"#utility.yul\":573:630   */\n      iszero\n      tag_225\n      jumpi\n        /* \"#utility.yul\":626:627   */\n      0x00\n        /* \"#utility.yul\":623:624   */\n      dup1\n        /* \"#utility.yul\":616:628   */\n      revert\n        /* \"#utility.yul\":573:630   */\n    tag_225:\n        /* \"#utility.yul\":657:659   */\n      0x20\n        /* \"#utility.yul\":649:660   */\n      swap3\n      swap1\n      swap3\n      add\n      swap5\n      pop\n        /* \"#utility.yul\":679:685   */\n      swap1\n      swap3\n      pop\n      pop\n        /* \"#utility.yul\":735:737   */\n      0x40\n        /* \"#utility.yul\":720:738   */\n      dup6\n      add\n        /* \"#utility.yul\":707:739   */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":768:799   */\n      dup2\n      and\n        /* \"#utility.yul\":758:800   */\n      dup2\n      eq\n        /* \"#utility.yul\":748:818   */\n      tag_226\n      jumpi\n        /* \"#utility.yul\":814:815   */\n      0x00\n        /* \"#utility.yul\":811:812   */\n      dup1\n        /* \"#utility.yul\":804:816   */\n      revert\n        /* \"#utility.yul\":748:818   */\n    tag_226:\n        /* \"#utility.yul\":14:848   */\n      swap4\n      swap7\n      swap3\n      swap6\n      pop\n      swap1\n      swap4\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1256:1436   */\n    tag_24:\n        /* \"#utility.yul\":1315:1321   */\n      0x00\n        /* \"#utility.yul\":1368:1370   */\n      0x20\n        /* \"#utility.yul\":1356:1365   */\n      dup3\n        /* \"#utility.yul\":1347:1354   */\n      dup5\n        /* \"#utility.yul\":1343:1366   */\n      sub\n        /* \"#utility.yul\":1339:1371   */\n      slt\n        /* \"#utility.yul\":1336:1388   */\n      iszero\n      tag_230\n      jumpi\n        /* \"#utility.yul\":1384:1385   */\n      0x00\n        /* \"#utility.yul\":1381:1382   */\n      dup1\n        /* \"#utility.yul\":1374:1386   */\n      revert\n        /* \"#utility.yul\":1336:1388   */\n    tag_230:\n      pop\n        /* \"#utility.yul\":1407:1430   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1256:1436   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1441:1691   */\n    tag_210:\n        /* \"#utility.yul\":1526:1527   */\n      0x00\n        /* \"#utility.yul\":1536:1649   */\n    tag_232:\n        /* \"#utility.yul\":1550:1556   */\n      dup4\n        /* \"#utility.yul\":1547:1548   */\n      dup2\n        /* \"#utility.yul\":1544:1557   */\n      lt\n        /* \"#utility.yul\":1536:1649   */\n      iszero\n      tag_234\n      jumpi\n        /* \"#utility.yul\":1626:1637   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":1620:1638   */\n      mload\n        /* \"#utility.yul\":1607:1618   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":1600:1639   */\n      mstore\n        /* \"#utility.yul\":1572:1574   */\n      0x20\n        /* \"#utility.yul\":1565:1575   */\n      add\n        /* \"#utility.yul\":1536:1649   */\n      jump(tag_232)\n    tag_234:\n      pop\n      pop\n        /* \"#utility.yul\":1683:1684   */\n      0x00\n        /* \"#utility.yul\":1665:1681   */\n      swap2\n      add\n        /* \"#utility.yul\":1658:1685   */\n      mstore\n        /* \"#utility.yul\":1441:1691   */\n      jump\t// out\n        /* \"#utility.yul\":1696:1967   */\n    tag_211:\n        /* \"#utility.yul\":1738:1741   */\n      0x00\n        /* \"#utility.yul\":1776:1781   */\n      dup2\n        /* \"#utility.yul\":1770:1782   */\n      mload\n        /* \"#utility.yul\":1803:1809   */\n      dup1\n        /* \"#utility.yul\":1798:1801   */\n      dup5\n        /* \"#utility.yul\":1791:1810   */\n      mstore\n        /* \"#utility.yul\":1819:1895   */\n      tag_236\n        /* \"#utility.yul\":1888:1894   */\n      dup2\n        /* \"#utility.yul\":1881:1885   */\n      0x20\n        /* \"#utility.yul\":1876:1879   */\n      dup7\n        /* \"#utility.yul\":1872:1886   */\n      add\n        /* \"#utility.yul\":1865:1869   */\n      0x20\n        /* \"#utility.yul\":1858:1863   */\n      dup7\n        /* \"#utility.yul\":1854:1870   */\n      add\n        /* \"#utility.yul\":1819:1895   */\n      tag_210\n      jump\t// in\n    tag_236:\n        /* \"#utility.yul\":1949:1951   */\n      0x1f\n        /* \"#utility.yul\":1928:1943   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1924:1953   */\n      and\n        /* \"#utility.yul\":1915:1954   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":1956:1960   */\n      0x20\n        /* \"#utility.yul\":1911:1961   */\n      add\n      swap3\n        /* \"#utility.yul\":1696:1967   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1972:2273   */\n    tag_27:\n        /* \"#utility.yul\":2157:2163   */\n      dup3\n        /* \"#utility.yul\":2150:2164   */\n      iszero\n        /* \"#utility.yul\":2143:2165   */\n      iszero\n        /* \"#utility.yul\":2132:2141   */\n      dup2\n        /* \"#utility.yul\":2125:2166   */\n      mstore\n        /* \"#utility.yul\":2202:2204   */\n      0x40\n        /* \"#utility.yul\":2197:2199   */\n      0x20\n        /* \"#utility.yul\":2186:2195   */\n      dup3\n        /* \"#utility.yul\":2182:2200   */\n      add\n        /* \"#utility.yul\":2175:2205   */\n      mstore\n        /* \"#utility.yul\":2106:2110   */\n      0x00\n        /* \"#utility.yul\":2222:2267   */\n      tag_174\n        /* \"#utility.yul\":2263:2265   */\n      0x40\n        /* \"#utility.yul\":2252:2261   */\n      dup4\n        /* \"#utility.yul\":2248:2266   */\n      add\n        /* \"#utility.yul\":2240:2246   */\n      dup5\n        /* \"#utility.yul\":2222:2267   */\n      tag_211\n      jump\t// in\n        /* \"#utility.yul\":2727:2845   */\n    tag_212:\n        /* \"#utility.yul\":2813:2818   */\n      dup1\n        /* \"#utility.yul\":2806:2819   */\n      iszero\n        /* \"#utility.yul\":2799:2820   */\n      iszero\n        /* \"#utility.yul\":2792:2797   */\n      dup2\n        /* \"#utility.yul\":2789:2821   */\n      eq\n        /* \"#utility.yul\":2779:2839   */\n      tag_37\n      jumpi\n        /* \"#utility.yul\":2835:2836   */\n      0x00\n        /* \"#utility.yul\":2832:2833   */\n      dup1\n        /* \"#utility.yul\":2825:2837   */\n      revert\n        /* \"#utility.yul\":2850:3159   */\n    tag_44:\n        /* \"#utility.yul\":2915:2921   */\n      0x00\n        /* \"#utility.yul\":2923:2929   */\n      dup1\n        /* \"#utility.yul\":2976:2978   */\n      0x40\n        /* \"#utility.yul\":2964:2973   */\n      dup4\n        /* \"#utility.yul\":2955:2962   */\n      dup6\n        /* \"#utility.yul\":2951:2974   */\n      sub\n        /* \"#utility.yul\":2947:2979   */\n      slt\n        /* \"#utility.yul\":2944:2996   */\n      iszero\n      tag_244\n      jumpi\n        /* \"#utility.yul\":2992:2993   */\n      0x00\n        /* \"#utility.yul\":2989:2990   */\n      dup1\n        /* \"#utility.yul\":2982:2994   */\n      revert\n        /* \"#utility.yul\":2944:2996   */\n    tag_244:\n        /* \"#utility.yul\":3028:3037   */\n      dup3\n        /* \"#utility.yul\":3015:3038   */\n      calldataload\n        /* \"#utility.yul\":3005:3038   */\n      swap2\n      pop\n        /* \"#utility.yul\":3088:3090   */\n      0x20\n        /* \"#utility.yul\":3077:3086   */\n      dup4\n        /* \"#utility.yul\":3073:3091   */\n      add\n        /* \"#utility.yul\":3060:3092   */\n      calldataload\n        /* \"#utility.yul\":3101:3129   */\n      tag_245\n        /* \"#utility.yul\":3123:3128   */\n      dup2\n        /* \"#utility.yul\":3101:3129   */\n      tag_212\n      jump\t// in\n    tag_245:\n        /* \"#utility.yul\":3148:3153   */\n      dup1\n        /* \"#utility.yul\":3138:3153   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2850:3159   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3372:3556   */\n    tag_54:\n        /* \"#utility.yul\":3442:3448   */\n      0x00\n        /* \"#utility.yul\":3495:3497   */\n      0x20\n        /* \"#utility.yul\":3483:3492   */\n      dup3\n        /* \"#utility.yul\":3474:3481   */\n      dup5\n        /* \"#utility.yul\":3470:3493   */\n      sub\n        /* \"#utility.yul\":3466:3498   */\n      slt\n        /* \"#utility.yul\":3463:3515   */\n      iszero\n      tag_248\n      jumpi\n        /* \"#utility.yul\":3511:3512   */\n      0x00\n        /* \"#utility.yul\":3508:3509   */\n      dup1\n        /* \"#utility.yul\":3501:3513   */\n      revert\n        /* \"#utility.yul\":3463:3515   */\n    tag_248:\n      pop\n        /* \"#utility.yul\":3534:3550   */\n      mload\n      swap2\n        /* \"#utility.yul\":3372:3556   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3561:3758   */\n    tag_213:\n        /* \"#utility.yul\":3602:3605   */\n      0x00\n        /* \"#utility.yul\":3640:3645   */\n      dup2\n        /* \"#utility.yul\":3634:3646   */\n      mload\n        /* \"#utility.yul\":3655:3720   */\n      tag_250\n        /* \"#utility.yul\":3713:3719   */\n      dup2\n        /* \"#utility.yul\":3708:3711   */\n      dup6\n        /* \"#utility.yul\":3701:3705   */\n      0x20\n        /* \"#utility.yul\":3694:3699   */\n      dup7\n        /* \"#utility.yul\":3690:3706   */\n      add\n        /* \"#utility.yul\":3655:3720   */\n      tag_210\n      jump\t// in\n    tag_250:\n        /* \"#utility.yul\":3736:3752   */\n      swap3\n      swap1\n      swap3\n      add\n      swap3\n        /* \"#utility.yul\":3561:3758   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3901:5985   */\n    tag_68:\n        /* \"#utility.yul\":4908:4933   */\n      0x496d6167652061737365727465642061742075726c3a20000000000000000000\n        /* \"#utility.yul\":4903:4906   */\n      dup2\n        /* \"#utility.yul\":4896:4934   */\n      mstore\n        /* \"#utility.yul\":4978:4984   */\n      dup7\n        /* \"#utility.yul\":4970:4976   */\n      dup9\n        /* \"#utility.yul\":4965:4967   */\n      0x17\n        /* \"#utility.yul\":4960:4963   */\n      dup4\n        /* \"#utility.yul\":4956:4968   */\n      add\n        /* \"#utility.yul\":4943:4985   */\n      calldatacopy\n        /* \"#utility.yul\":4878:4881   */\n      0x00\n        /* \"#utility.yul\":5013:5019   */\n      dup8\n        /* \"#utility.yul\":5008:5011   */\n      dup3\n        /* \"#utility.yul\":5004:5020   */\n      add\n      shl(0x83, 0x040ccdee440d2dac2ceca9288744060f)\n        /* \"#utility.yul\":5044:5046   */\n      0x17\n        /* \"#utility.yul\":5040:5042   */\n      dup3\n        /* \"#utility.yul\":5036:5047   */\n      add\n        /* \"#utility.yul\":5029:5068   */\n      mstore\n        /* \"#utility.yul\":5097:5103   */\n      dup8\n        /* \"#utility.yul\":5091:5104   */\n      mload\n        /* \"#utility.yul\":5113:5187   */\n      tag_253\n        /* \"#utility.yul\":5180:5186   */\n      dup2\n        /* \"#utility.yul\":5175:5177   */\n      0x27\n        /* \"#utility.yul\":5171:5173   */\n      dup5\n        /* \"#utility.yul\":5167:5178   */\n      add\n        /* \"#utility.yul\":5160:5164   */\n      0x20\n        /* \"#utility.yul\":5152:5158   */\n      dup13\n        /* \"#utility.yul\":5148:5165   */\n      add\n        /* \"#utility.yul\":5113:5187   */\n      tag_210\n      jump\t// in\n    tag_253:\n      shl(0x7b, 0x040c2dcc840c2e6e6cae4e8cae4744060f)\n        /* \"#utility.yul\":5245:5247   */\n      0x27\n        /* \"#utility.yul\":5206:5221   */\n      swap3\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":5237:5248   */\n      swap2\n      dup3\n      add\n        /* \"#utility.yul\":5230:5270   */\n      mstore\n        /* \"#utility.yul\":5295:5308   */\n      dup7\n      mload\n        /* \"#utility.yul\":5317:5393   */\n      tag_254\n        /* \"#utility.yul\":5295:5308   */\n      dup2\n        /* \"#utility.yul\":5379:5381   */\n      0x38\n        /* \"#utility.yul\":5371:5382   */\n      dup5\n      add\n        /* \"#utility.yul\":5364:5368   */\n      0x20\n        /* \"#utility.yul\":5352:5369   */\n      dup12\n      add\n        /* \"#utility.yul\":5317:5393   */\n      tag_210\n      jump\t// in\n    tag_254:\n        /* \"#utility.yul\":5454:5467   */\n      dup7\n      mload\n        /* \"#utility.yul\":5412:5429   */\n      swap2\n      add\n      swap1\n        /* \"#utility.yul\":5476:5552   */\n      tag_255\n        /* \"#utility.yul\":5454:5467   */\n      dup2\n        /* \"#utility.yul\":5538:5540   */\n      0x38\n        /* \"#utility.yul\":5530:5541   */\n      dup5\n      add\n        /* \"#utility.yul\":5523:5527   */\n      0x20\n        /* \"#utility.yul\":5511:5528   */\n      dup11\n      add\n        /* \"#utility.yul\":5476:5552   */\n      tag_210\n      jump\t// in\n    tag_255:\n      shl(0x8d, 0x01030ba103a34b6b2b9ba30b6b81d1)\n        /* \"#utility.yul\":5612:5614   */\n      0x38\n        /* \"#utility.yul\":5571:5588   */\n      swap3\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":5604:5615   */\n      swap2\n      dup3\n      add\n        /* \"#utility.yul\":5597:5635   */\n      mstore\n        /* \"#utility.yul\":5660:5673   */\n      dup5\n      mload\n        /* \"#utility.yul\":5682:5758   */\n      tag_256\n        /* \"#utility.yul\":5660:5673   */\n      dup2\n        /* \"#utility.yul\":5744:5746   */\n      0x47\n        /* \"#utility.yul\":5736:5747   */\n      dup5\n      add\n        /* \"#utility.yul\":5729:5733   */\n      0x20\n        /* \"#utility.yul\":5717:5734   */\n      dup10\n      add\n        /* \"#utility.yul\":5682:5758   */\n      tag_210\n      jump\t// in\n    tag_256:\n        /* \"#utility.yul\":5823:5857   */\n      0x20696e207468652044617461417373657274657220636f6e7472616374206174\n        /* \"#utility.yul\":5818:5820   */\n      0x47\n        /* \"#utility.yul\":5777:5794   */\n      swap3\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":5810:5821   */\n      swap2\n      dup3\n      add\n        /* \"#utility.yul\":5803:5858   */\n      mstore\n      shl(0xeb, 0x04060f)\n        /* \"#utility.yul\":5882:5885   */\n      0x67\n        /* \"#utility.yul\":5874:5886   */\n      dup3\n      add\n        /* \"#utility.yul\":5867:5894   */\n      mstore\n        /* \"#utility.yul\":5910:5979   */\n      tag_257\n        /* \"#utility.yul\":5940:5978   */\n      tag_258\n        /* \"#utility.yul\":5973:5976   */\n      0x6a\n        /* \"#utility.yul\":5965:5977   */\n      dup4\n      add\n        /* \"#utility.yul\":5957:5963   */\n      dup7\n        /* \"#utility.yul\":5940:5978   */\n      tag_213\n      jump\t// in\n    tag_258:\n      shl(0x69, 0x1034b9903737ba1030903232b2b83330b5b297)\n        /* \"#utility.yul\":3828:3862   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3887:3889   */\n      0x13\n        /* \"#utility.yul\":3878:3890   */\n      add\n      swap1\n        /* \"#utility.yul\":3763:3896   */\n      jump\n        /* \"#utility.yul\":5910:5979   */\n    tag_257:\n        /* \"#utility.yul\":5903:5979   */\n      swap11\n        /* \"#utility.yul\":3901:5985   */\n      swap10\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5990:6913   */\n    tag_70:\n        /* \"#utility.yul\":6335:6339   */\n      0x00\n        /* \"#utility.yul\":6364:6367   */\n      0x0120\n        /* \"#utility.yul\":6394:6396   */\n      dup1\n        /* \"#utility.yul\":6383:6392   */\n      dup4\n        /* \"#utility.yul\":6376:6397   */\n      mstore\n        /* \"#utility.yul\":6414:6459   */\n      tag_260\n        /* \"#utility.yul\":6455:6457   */\n      dup2\n        /* \"#utility.yul\":6444:6453   */\n      dup5\n        /* \"#utility.yul\":6440:6458   */\n      add\n        /* \"#utility.yul\":6432:6438   */\n      dup14\n        /* \"#utility.yul\":6414:6459   */\n      tag_211\n      jump\t// in\n    tag_260:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6533:6548   */\n      swap12\n      dup13\n      and\n        /* \"#utility.yul\":6528:6530   */\n      0x20\n        /* \"#utility.yul\":6513:6531   */\n      dup6\n      add\n        /* \"#utility.yul\":6506:6549   */\n      mstore\n        /* \"#utility.yul\":6585:6600   */\n      swap10\n      dup12\n      and\n        /* \"#utility.yul\":6580:6582   */\n      0x40\n        /* \"#utility.yul\":6565:6583   */\n      dup5\n      add\n        /* \"#utility.yul\":6558:6601   */\n      mstore\n      pop\n      pop\n        /* \"#utility.yul\":6637:6652   */\n      swap6\n      dup9\n      and\n        /* \"#utility.yul\":6632:6634   */\n      0x60\n        /* \"#utility.yul\":6617:6635   */\n      dup8\n      add\n        /* \"#utility.yul\":6610:6653   */\n      mstore\n        /* \"#utility.yul\":6702:6720   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":6690:6721   */\n      swap5\n      swap1\n      swap5\n      and\n        /* \"#utility.yul\":6684:6687   */\n      0x80\n        /* \"#utility.yul\":6669:6688   */\n      dup7\n      add\n        /* \"#utility.yul\":6662:6722   */\n      mstore\n        /* \"#utility.yul\":6759:6774   */\n      swap2\n      swap1\n      swap6\n      and\n        /* \"#utility.yul\":6486:6489   */\n      0xa0\n        /* \"#utility.yul\":6738:6757   */\n      dup5\n      add\n        /* \"#utility.yul\":6731:6775   */\n      mstore\n        /* \"#utility.yul\":6806:6809   */\n      0xc0\n        /* \"#utility.yul\":6791:6810   */\n      dup4\n      add\n        /* \"#utility.yul\":6784:6819   */\n      swap5\n      swap1\n      swap5\n      mstore\n        /* \"#utility.yul\":6850:6853   */\n      0xe0\n        /* \"#utility.yul\":6835:6854   */\n      dup3\n      add\n        /* \"#utility.yul\":6828:6863   */\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"#utility.yul\":6894:6897   */\n      0x0100\n        /* \"#utility.yul\":6879:6898   */\n      add\n        /* \"#utility.yul\":6872:6907   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":6406:6459   */\n      swap2\n        /* \"#utility.yul\":5990:6913   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7107:7234   */\n    tag_140:\n        /* \"#utility.yul\":7168:7178   */\n      0x4e487b71\n        /* \"#utility.yul\":7163:7166   */\n      0xe0\n        /* \"#utility.yul\":7159:7179   */\n      shl\n        /* \"#utility.yul\":7156:7157   */\n      0x00\n        /* \"#utility.yul\":7149:7180   */\n      mstore\n        /* \"#utility.yul\":7199:7203   */\n      0x41\n        /* \"#utility.yul\":7196:7197   */\n      0x04\n        /* \"#utility.yul\":7189:7204   */\n      mstore\n        /* \"#utility.yul\":7223:7227   */\n      0x24\n        /* \"#utility.yul\":7220:7221   */\n      0x00\n        /* \"#utility.yul\":7213:7228   */\n      revert\n        /* \"#utility.yul\":7239:7619   */\n    tag_82:\n        /* \"#utility.yul\":7318:7319   */\n      0x01\n        /* \"#utility.yul\":7314:7326   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":7361:7373   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":7382:7443   */\n      tag_265\n      jumpi\n        /* \"#utility.yul\":7436:7440   */\n      0x7f\n        /* \"#utility.yul\":7428:7434   */\n      dup3\n        /* \"#utility.yul\":7424:7441   */\n      and\n        /* \"#utility.yul\":7414:7441   */\n      swap2\n      pop\n        /* \"#utility.yul\":7382:7443   */\n    tag_265:\n        /* \"#utility.yul\":7489:7491   */\n      0x20\n        /* \"#utility.yul\":7481:7487   */\n      dup3\n        /* \"#utility.yul\":7478:7492   */\n      lt\n        /* \"#utility.yul\":7458:7476   */\n      dup2\n        /* \"#utility.yul\":7455:7493   */\n      sub\n        /* \"#utility.yul\":7452:7613   */\n      tag_266\n      jumpi\n        /* \"#utility.yul\":7535:7545   */\n      0x4e487b71\n        /* \"#utility.yul\":7530:7533   */\n      0xe0\n        /* \"#utility.yul\":7526:7546   */\n      shl\n        /* \"#utility.yul\":7523:7524   */\n      0x00\n        /* \"#utility.yul\":7516:7547   */\n      mstore\n        /* \"#utility.yul\":7570:7574   */\n      0x22\n        /* \"#utility.yul\":7567:7568   */\n      0x04\n        /* \"#utility.yul\":7560:7575   */\n      mstore\n        /* \"#utility.yul\":7598:7602   */\n      0x24\n        /* \"#utility.yul\":7595:7596   */\n      0x00\n        /* \"#utility.yul\":7588:7603   */\n      revert\n        /* \"#utility.yul\":7452:7613   */\n    tag_266:\n      pop\n        /* \"#utility.yul\":7239:7619   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7750:8295   */\n    tag_216:\n        /* \"#utility.yul\":7852:7854   */\n      0x1f\n        /* \"#utility.yul\":7847:7850   */\n      dup3\n        /* \"#utility.yul\":7844:7855   */\n      gt\n        /* \"#utility.yul\":7841:8289   */\n      iszero\n      tag_116\n      jumpi\n        /* \"#utility.yul\":7888:7889   */\n      0x00\n        /* \"#utility.yul\":7913:7918   */\n      dup2\n        /* \"#utility.yul\":7909:7911   */\n      dup2\n        /* \"#utility.yul\":7902:7919   */\n      mstore\n        /* \"#utility.yul\":7958:7962   */\n      0x20\n        /* \"#utility.yul\":7954:7956   */\n      dup2\n        /* \"#utility.yul\":7944:7963   */\n      keccak256\n        /* \"#utility.yul\":8028:8030   */\n      0x1f\n        /* \"#utility.yul\":8016:8026   */\n      dup6\n        /* \"#utility.yul\":8012:8031   */\n      add\n        /* \"#utility.yul\":8009:8010   */\n      0x05\n        /* \"#utility.yul\":8005:8032   */\n      shr\n        /* \"#utility.yul\":7999:8003   */\n      dup2\n        /* \"#utility.yul\":7995:8033   */\n      add\n        /* \"#utility.yul\":8064:8068   */\n      0x20\n        /* \"#utility.yul\":8052:8062   */\n      dup7\n        /* \"#utility.yul\":8049:8069   */\n      lt\n        /* \"#utility.yul\":8046:8093   */\n      iszero\n      tag_270\n      jumpi\n      pop\n        /* \"#utility.yul\":8087:8091   */\n      dup1\n        /* \"#utility.yul\":8046:8093   */\n    tag_270:\n        /* \"#utility.yul\":8142:8144   */\n      0x1f\n        /* \"#utility.yul\":8137:8140   */\n      dup6\n        /* \"#utility.yul\":8133:8145   */\n      add\n        /* \"#utility.yul\":8130:8131   */\n      0x05\n        /* \"#utility.yul\":8126:8146   */\n      shr\n        /* \"#utility.yul\":8120:8124   */\n      dup3\n        /* \"#utility.yul\":8116:8147   */\n      add\n        /* \"#utility.yul\":8106:8147   */\n      swap2\n      pop\n        /* \"#utility.yul\":8197:8279   */\n    tag_271:\n        /* \"#utility.yul\":8215:8217   */\n      dup2\n        /* \"#utility.yul\":8208:8213   */\n      dup2\n        /* \"#utility.yul\":8205:8218   */\n      lt\n        /* \"#utility.yul\":8197:8279   */\n      iszero\n      tag_273\n      jumpi\n        /* \"#utility.yul\":8260:8277   */\n      dup3\n      dup2\n      sstore\n        /* \"#utility.yul\":8241:8242   */\n      0x01\n        /* \"#utility.yul\":8230:8243   */\n      add\n        /* \"#utility.yul\":8197:8279   */\n      jump(tag_271)\n    tag_273:\n        /* \"#utility.yul\":8201:8204   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":7750:8295   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":8471:9823   */\n    tag_76:\n        /* \"#utility.yul\":8597:8600   */\n      dup2\n        /* \"#utility.yul\":8591:8601   */\n      mload\n        /* \"#utility.yul\":8624:8642   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":8616:8622   */\n      dup2\n        /* \"#utility.yul\":8613:8643   */\n      gt\n        /* \"#utility.yul\":8610:8666   */\n      iszero\n      tag_277\n      jumpi\n        /* \"#utility.yul\":8646:8664   */\n      tag_277\n      tag_140\n      jump\t// in\n    tag_277:\n        /* \"#utility.yul\":8675:8772   */\n      tag_278\n        /* \"#utility.yul\":8765:8771   */\n      dup2\n        /* \"#utility.yul\":8725:8763   */\n      tag_279\n        /* \"#utility.yul\":8757:8761   */\n      dup5\n        /* \"#utility.yul\":8751:8762   */\n      sload\n        /* \"#utility.yul\":8725:8763   */\n      tag_82\n      jump\t// in\n    tag_279:\n        /* \"#utility.yul\":8719:8723   */\n      dup5\n        /* \"#utility.yul\":8675:8772   */\n      tag_216\n      jump\t// in\n    tag_278:\n        /* \"#utility.yul\":8827:8831   */\n      0x20\n      dup1\n        /* \"#utility.yul\":8891:8893   */\n      0x1f\n        /* \"#utility.yul\":8880:8894   */\n      dup4\n      gt\n        /* \"#utility.yul\":8908:8909   */\n      0x01\n        /* \"#utility.yul\":8903:9566   */\n      dup2\n      eq\n      tag_281\n      jumpi\n        /* \"#utility.yul\":9610:9611   */\n      0x00\n        /* \"#utility.yul\":9627:9633   */\n      dup5\n        /* \"#utility.yul\":9624:9713   */\n      iszero\n      tag_282\n      jumpi\n      pop\n        /* \"#utility.yul\":9679:9698   */\n      dup6\n      dup4\n      add\n        /* \"#utility.yul\":9673:9699   */\n      mload\n        /* \"#utility.yul\":9624:9713   */\n    tag_282:\n      not(0x00)\n        /* \"#utility.yul\":8428:8429   */\n      0x03\n        /* \"#utility.yul\":8424:8435   */\n      dup7\n      swap1\n      shl\n        /* \"#utility.yul\":8420:8444   */\n      shr\n        /* \"#utility.yul\":8416:8445   */\n      not\n        /* \"#utility.yul\":8406:8446   */\n      and\n        /* \"#utility.yul\":8452:8453   */\n      0x01\n        /* \"#utility.yul\":8448:8459   */\n      dup6\n      swap1\n      shl\n        /* \"#utility.yul\":8403:8460   */\n      or\n        /* \"#utility.yul\":9726:9807   */\n      dup6\n      sstore\n        /* \"#utility.yul\":8873:9817   */\n      jump(tag_273)\n        /* \"#utility.yul\":8903:9566   */\n    tag_281:\n        /* \"#utility.yul\":7697:7698   */\n      0x00\n        /* \"#utility.yul\":7690:7704   */\n      dup6\n      dup2\n      mstore\n        /* \"#utility.yul\":7734:7738   */\n      0x20\n        /* \"#utility.yul\":7721:7739   */\n      dup2\n      keccak256\n      not(0x1f)\n        /* \"#utility.yul\":8939:8959   */\n      dup7\n      and\n      swap2\n        /* \"#utility.yul\":9057:9293   */\n    tag_285:\n        /* \"#utility.yul\":9071:9078   */\n      dup3\n        /* \"#utility.yul\":9068:9069   */\n      dup2\n        /* \"#utility.yul\":9065:9079   */\n      lt\n        /* \"#utility.yul\":9057:9293   */\n      iszero\n      tag_287\n      jumpi\n        /* \"#utility.yul\":9160:9179   */\n      dup9\n      dup7\n      add\n        /* \"#utility.yul\":9154:9180   */\n      mload\n        /* \"#utility.yul\":9139:9181   */\n      dup3\n      sstore\n        /* \"#utility.yul\":9252:9279   */\n      swap5\n      dup5\n      add\n      swap5\n        /* \"#utility.yul\":9220:9221   */\n      0x01\n        /* \"#utility.yul\":9208:9222   */\n      swap1\n      swap2\n      add\n      swap1\n        /* \"#utility.yul\":9087:9106   */\n      dup5\n      add\n        /* \"#utility.yul\":9057:9293   */\n      jump(tag_285)\n    tag_287:\n        /* \"#utility.yul\":9061:9064   */\n      pop\n        /* \"#utility.yul\":9321:9327   */\n      dup6\n        /* \"#utility.yul\":9312:9319   */\n      dup3\n        /* \"#utility.yul\":9309:9328   */\n      lt\n        /* \"#utility.yul\":9306:9507   */\n      iszero\n      tag_288\n      jumpi\n        /* \"#utility.yul\":9382:9401   */\n      dup8\n      dup6\n      add\n        /* \"#utility.yul\":9376:9402   */\n      mload\n      not(0x00)\n        /* \"#utility.yul\":9465:9466   */\n      0x03\n        /* \"#utility.yul\":9461:9475   */\n      dup9\n      swap1\n      shl\n        /* \"#utility.yul\":9477:9480   */\n      0xf8\n        /* \"#utility.yul\":9457:9481   */\n      and\n        /* \"#utility.yul\":9453:9490   */\n      shr\n        /* \"#utility.yul\":9449:9491   */\n      not\n        /* \"#utility.yul\":9434:9492   */\n      and\n        /* \"#utility.yul\":9419:9493   */\n      dup2\n      sstore\n        /* \"#utility.yul\":9306:9507   */\n    tag_288:\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":9553:9554   */\n      0x01\n        /* \"#utility.yul\":9537:9551   */\n      swap1\n      dup2\n      shl\n        /* \"#utility.yul\":9533:9555   */\n      add\n        /* \"#utility.yul\":9520:9556   */\n      swap1\n      sstore\n      pop\n        /* \"#utility.yul\":8471:9823   */\n      jump\t// out\n        /* \"#utility.yul\":9828:10218   */\n    tag_78:\n        /* \"#utility.yul\":9987:9989   */\n      0x20\n        /* \"#utility.yul\":9976:9985   */\n      dup2\n        /* \"#utility.yul\":9969:9990   */\n      mstore\n        /* \"#utility.yul\":10026:10032   */\n      dup2\n        /* \"#utility.yul\":10021:10023   */\n      0x20\n        /* \"#utility.yul\":10010:10019   */\n      dup3\n        /* \"#utility.yul\":10006:10024   */\n      add\n        /* \"#utility.yul\":9999:10033   */\n      mstore\n        /* \"#utility.yul\":10083:10089   */\n      dup2\n        /* \"#utility.yul\":10075:10081   */\n      dup4\n        /* \"#utility.yul\":10070:10072   */\n      0x40\n        /* \"#utility.yul\":10059:10068   */\n      dup4\n        /* \"#utility.yul\":10055:10073   */\n      add\n        /* \"#utility.yul\":10042:10090   */\n      calldatacopy\n        /* \"#utility.yul\":10139:10140   */\n      0x00\n        /* \"#utility.yul\":10110:10132   */\n      dup2\n      dup4\n      add\n        /* \"#utility.yul\":10134:10136   */\n      0x40\n        /* \"#utility.yul\":10106:10137   */\n      swap1\n      dup2\n      add\n        /* \"#utility.yul\":10099:10141   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":10202:10204   */\n      0x1f\n        /* \"#utility.yul\":10181:10196   */\n      swap1\n      swap3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":10177:10206   */\n      and\n        /* \"#utility.yul\":10162:10207   */\n      add\n        /* \"#utility.yul\":10158:10212   */\n      add\n      swap2\n        /* \"#utility.yul\":9828:10218   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":10223:10443   */\n    tag_97:\n        /* \"#utility.yul\":10372:10374   */\n      0x20\n        /* \"#utility.yul\":10361:10370   */\n      dup2\n        /* \"#utility.yul\":10354:10375   */\n      mstore\n        /* \"#utility.yul\":10335:10339   */\n      0x00\n        /* \"#utility.yul\":10392:10437   */\n      tag_291\n        /* \"#utility.yul\":10433:10435   */\n      0x20\n        /* \"#utility.yul\":10422:10431   */\n      dup4\n        /* \"#utility.yul\":10418:10436   */\n      add\n        /* \"#utility.yul\":10410:10416   */\n      dup5\n        /* \"#utility.yul\":10392:10437   */\n      tag_211\n      jump\t// in\n    tag_291:\n        /* \"#utility.yul\":10384:10437   */\n      swap4\n        /* \"#utility.yul\":10223:10443   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12376:12503   */\n    tag_218:\n        /* \"#utility.yul\":12437:12447   */\n      0x4e487b71\n        /* \"#utility.yul\":12432:12435   */\n      0xe0\n        /* \"#utility.yul\":12428:12448   */\n      shl\n        /* \"#utility.yul\":12425:12426   */\n      0x00\n        /* \"#utility.yul\":12418:12449   */\n      mstore\n        /* \"#utility.yul\":12468:12472   */\n      0x11\n        /* \"#utility.yul\":12465:12466   */\n      0x04\n        /* \"#utility.yul\":12458:12473   */\n      mstore\n        /* \"#utility.yul\":12492:12496   */\n      0x24\n        /* \"#utility.yul\":12489:12490   */\n      0x00\n        /* \"#utility.yul\":12482:12497   */\n      revert\n        /* \"#utility.yul\":12508:12643   */\n    tag_135:\n        /* \"#utility.yul\":12547:12550   */\n      0x00\n        /* \"#utility.yul\":12568:12585   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":12565:12608   */\n      tag_301\n      jumpi\n        /* \"#utility.yul\":12588:12606   */\n      tag_301\n      tag_218\n      jump\t// in\n    tag_301:\n      pop\n        /* \"#utility.yul\":12635:12636   */\n      0x01\n        /* \"#utility.yul\":12624:12637   */\n      add\n      swap1\n        /* \"#utility.yul\":12508:12643   */\n      jump\t// out\n        /* \"#utility.yul\":12648:12775   */\n    tag_168:\n        /* \"#utility.yul\":12709:12719   */\n      0x4e487b71\n        /* \"#utility.yul\":12704:12707   */\n      0xe0\n        /* \"#utility.yul\":12700:12720   */\n      shl\n        /* \"#utility.yul\":12697:12698   */\n      0x00\n        /* \"#utility.yul\":12690:12721   */\n      mstore\n        /* \"#utility.yul\":12740:12744   */\n      0x12\n        /* \"#utility.yul\":12737:12738   */\n      0x04\n        /* \"#utility.yul\":12730:12745   */\n      mstore\n        /* \"#utility.yul\":12764:12768   */\n      0x24\n        /* \"#utility.yul\":12761:12762   */\n      0x00\n        /* \"#utility.yul\":12754:12769   */\n      revert\n        /* \"#utility.yul\":12780:12997   */\n    tag_137:\n        /* \"#utility.yul\":12820:12821   */\n      0x00\n        /* \"#utility.yul\":12846:12847   */\n      dup3\n        /* \"#utility.yul\":12836:12968   */\n      tag_304\n      jumpi\n        /* \"#utility.yul\":12890:12900   */\n      0x4e487b71\n        /* \"#utility.yul\":12885:12888   */\n      0xe0\n        /* \"#utility.yul\":12881:12901   */\n      shl\n        /* \"#utility.yul\":12878:12879   */\n      0x00\n        /* \"#utility.yul\":12871:12902   */\n      mstore\n        /* \"#utility.yul\":12925:12929   */\n      0x12\n        /* \"#utility.yul\":12922:12923   */\n      0x04\n        /* \"#utility.yul\":12915:12930   */\n      mstore\n        /* \"#utility.yul\":12953:12957   */\n      0x24\n        /* \"#utility.yul\":12950:12951   */\n      0x00\n        /* \"#utility.yul\":12943:12958   */\n      revert\n        /* \"#utility.yul\":12836:12968   */\n    tag_304:\n      pop\n        /* \"#utility.yul\":12982:12991   */\n      div\n      swap1\n        /* \"#utility.yul\":12780:12997   */\n      jump\t// out\n        /* \"#utility.yul\":13002:13130   */\n    tag_145:\n        /* \"#utility.yul\":13069:13078   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":13090:13101   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":13087:13124   */\n      iszero\n      tag_307\n      jumpi\n        /* \"#utility.yul\":13104:13122   */\n      tag_307\n      tag_218\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":13002:13130   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13135:13303   */\n    tag_148:\n        /* \"#utility.yul\":13175:13182   */\n      0x00\n        /* \"#utility.yul\":13241:13242   */\n      dup2\n        /* \"#utility.yul\":13237:13238   */\n      0x00\n        /* \"#utility.yul\":13233:13239   */\n      not\n        /* \"#utility.yul\":13229:13243   */\n      div\n        /* \"#utility.yul\":13226:13227   */\n      dup4\n        /* \"#utility.yul\":13223:13244   */\n      gt\n        /* \"#utility.yul\":13218:13219   */\n      dup3\n        /* \"#utility.yul\":13211:13220   */\n      iszero\n        /* \"#utility.yul\":13204:13221   */\n      iszero\n        /* \"#utility.yul\":13200:13245   */\n      and\n        /* \"#utility.yul\":13197:13268   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":13248:13266   */\n      tag_310\n      tag_218\n      jump\t// in\n    tag_310:\n      pop\n        /* \"#utility.yul\":13288:13297   */\n      mul\n      swap1\n        /* \"#utility.yul\":13135:13303   */\n      jump\t// out\n        /* \"#utility.yul\":13308:13456   */\n    tag_151:\n        /* \"#utility.yul\":13396:13400   */\n      0xff\n        /* \"#utility.yul\":13375:13387   */\n      dup2\n      dup2\n      and\n        /* \"#utility.yul\":13389:13401   */\n      dup4\n      dup3\n      and\n        /* \"#utility.yul\":13371:13402   */\n      add\n      swap1\n        /* \"#utility.yul\":13414:13427   */\n      dup2\n      gt\n        /* \"#utility.yul\":13411:13450   */\n      iszero\n      tag_307\n      jumpi\n        /* \"#utility.yul\":13430:13448   */\n      tag_307\n      tag_218\n      jump\t// in\n        /* \"#utility.yul\":13461:13588   */\n    tag_154:\n        /* \"#utility.yul\":13522:13532   */\n      0x4e487b71\n        /* \"#utility.yul\":13517:13520   */\n      0xe0\n        /* \"#utility.yul\":13513:13533   */\n      shl\n        /* \"#utility.yul\":13510:13511   */\n      0x00\n        /* \"#utility.yul\":13503:13534   */\n      mstore\n        /* \"#utility.yul\":13553:13557   */\n      0x32\n        /* \"#utility.yul\":13550:13551   */\n      0x04\n        /* \"#utility.yul\":13543:13558   */\n      mstore\n        /* \"#utility.yul\":13577:13581   */\n      0x24\n        /* \"#utility.yul\":13574:13575   */\n      0x00\n        /* \"#utility.yul\":13567:13582   */\n      revert\n        /* \"#utility.yul\":13593:13838   */\n    tag_161:\n        /* \"#utility.yul\":13660:13666   */\n      0x00\n        /* \"#utility.yul\":13713:13715   */\n      0x20\n        /* \"#utility.yul\":13701:13710   */\n      dup3\n        /* \"#utility.yul\":13692:13699   */\n      dup5\n        /* \"#utility.yul\":13688:13711   */\n      sub\n        /* \"#utility.yul\":13684:13716   */\n      slt\n        /* \"#utility.yul\":13681:13733   */\n      iszero\n      tag_316\n      jumpi\n        /* \"#utility.yul\":13729:13730   */\n      0x00\n        /* \"#utility.yul\":13726:13727   */\n      dup1\n        /* \"#utility.yul\":13719:13731   */\n      revert\n        /* \"#utility.yul\":13681:13733   */\n    tag_316:\n        /* \"#utility.yul\":13761:13770   */\n      dup2\n        /* \"#utility.yul\":13755:13771   */\n      mload\n        /* \"#utility.yul\":13780:13808   */\n      tag_291\n        /* \"#utility.yul\":13802:13807   */\n      dup2\n        /* \"#utility.yul\":13780:13808   */\n      tag_212\n      jump\t// in\n        /* \"#utility.yul\":14661:14948   */\n    tag_181:\n        /* \"#utility.yul\":14790:14793   */\n      0x00\n        /* \"#utility.yul\":14828:14834   */\n      dup3\n        /* \"#utility.yul\":14822:14835   */\n      mload\n        /* \"#utility.yul\":14844:14910   */\n      tag_321\n        /* \"#utility.yul\":14903:14909   */\n      dup2\n        /* \"#utility.yul\":14898:14901   */\n      dup5\n        /* \"#utility.yul\":14891:14895   */\n      0x20\n        /* \"#utility.yul\":14883:14889   */\n      dup8\n        /* \"#utility.yul\":14879:14896   */\n      add\n        /* \"#utility.yul\":14844:14910   */\n      tag_210\n      jump\t// in\n    tag_321:\n        /* \"#utility.yul\":14926:14942   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":14661:14948   */\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122022759d2ec01478f58482cfd77d95067e6904f299377122900a416de4b2e7c38464736f6c63430008100033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1497": {
									"entryPoint": null,
									"id": 1497,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_bytes32_fromMemory": {
									"entryPoint": 170,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:200:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:103:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:8"
															},
															"nodeType": "YulIf",
															"src": "105:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "166:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "182:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "176:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "176:16:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:8",
														"type": ""
													}
												],
												"src": "14:184:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60e060405234801561001057600080fd5b507307865c6e87b9f70255377e024ace6630c1eaa37f608052739923d42ef695b5dd9911d05ac944d4caca3c4eab60a08190526040805163d509b01760e01b8152905163d509b017916004808201926020929091908290030181865afa15801561007e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a291906100aa565b60c0526100c3565b6000602082840312156100bc57600080fd5b5051919050565b60805160a05160c0516115a26101306000396000818161017401526103c801526000818161011801528181610207015281816102d8015281816102ff015261062e01526000818160b8015281816101d901528181610281015281816102b601526103a401526115a26000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b75d4e241161005b578063b75d4e241461013a578063d448a4ec1461015c578063d509b0171461016f578063f1b156b21461019657600080fd5b8063096464cc1461008d57806320402e1d146100b35780636ced1ae9146100f25780638921a61414610113575b600080fd5b6100a061009b366004610f77565b6101a9565b6040519081526020015b60405180910390f35b6100da7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100aa565b610105610100366004611012565b61053f565b6040516100aa92919061107b565b6100da7f000000000000000000000000000000000000000000000000000000000000000081565b610143610e1081565b60405167ffffffffffffffff90911681526020016100aa565b61016d61016a366004611012565b50565b005b6100a07f000000000000000000000000000000000000000000000000000000000000000081565b61016d6101a43660046110a4565b610623565b60006001600160a01b038216156101c057816101c2565b335b604051634360af3d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529193506000917f00000000000000000000000000000000000000000000000000000000000000001690634360af3d90602401602060405180830381865afa15801561024e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027291906110d4565b90506102a96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846107d7565b6102fd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610848565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636457c97986866103378a610967565b610340886109a8565b610349896109a8565b610352426109ff565b61035b306109a8565b6040516020016103719796959493929190611109565b60408051601f19818403018152908290526001600160e01b031960e084901b1682526103f29187903090600090610e10907f0000000000000000000000000000000000000000000000000000000000000000908a907f0000000000000000000000000000000000000000000000000000000000000000908590600401611250565b6020604051808303816000875af1158015610411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043591906110d4565b9150604051806080016040528087815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0386166020808401919091526040928301829052858252818152919020825181559082015160018201906104bb908261135c565b50604082810151600290920180546060909401511515600160a01b026001600160a81b03199094166001600160a01b0393841617939093179092559051839185169088907fb3b5c304bc1ba781ea735c86e786e9ae6432b86b469fbc00ec8bb252bf54eda89061052e908a908a9061141c565b60405180910390a450949350505050565b600081815260208190526040812060020154606090600160a01b900460ff1661057a5750506040805160208101909152600080825292909150565b600083815260208190526040902060019081018054819061059a906112d4565b80601f01602080910402602001604051908101604052809291908181526020018280546105c6906112d4565b80156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b5050505050905091509150915091565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461065857600080fd5b80156107a25760008281526020818152604080832060028101805460ff60a01b1916600160a01b1790558151608081019092528054825260018101805492939192918401916106a6906112d4565b80601f01602080910402602001604051908101604052809291908181526020018280546106d2906112d4565b801561071f5780601f106106f45761010080835404028352916020019161071f565b820191906000526020600020905b81548152906001019060200180831161070257829003601f168201915b5050509183525050600291909101546001600160a01b03808216602080850191909152600160a01b90920460ff16151560409384015283830151845192850151935194955087949116927f2cd47d03ca5eed86ed11475382af40bc0f2965dd65bc4ab337d45577ea5dfaf991610795919061144b565b60405180910390a4505050565b6000828152602081905260408120818155906107c16001830182610f29565b5060020180546001600160a81b03191690555050565b6040516001600160a01b03808516602483015283166044820152606481018290526108429085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610b2b565b50505050565b8015806108c25750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c091906110d4565b155b6109325760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b6040516001600160a01b03831660248201526044810182905261096290849063095ea7b360e01b9060640161080b565b505050565b6060610976608083901c610c00565b61097f83610c00565b6040805160208101939093528201526060015b6040516020818303038152906040529050919050565b60606109c06001600160801b03602084901c16610c00565b6109db8360601b6bffffffffffffffffffffffff1916610c00565b6040516020016109929291909182526001600160c01b031916602082015260280190565b606081600003610a265750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610a505780610a3a8161147b565b9150610a499050600a836114aa565b9150610a2a565b60008167ffffffffffffffff811115610a6b57610a6b6112be565b6040519080825280601f01601f191660200182016040528015610a95576020820181803683370190505b509050815b8515610b2257610aab6001826114cc565b90506000610aba600a886114aa565b610ac590600a6114e5565b610acf90886114cc565b610ada906030611504565b905060008160f81b905080848481518110610af757610af761151d565b60200101906001600160f81b031916908160001a905350610b19600a896114aa565b97505050610a9a565b50949350505050565b6000610b80826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d999092919063ffffffff16565b9050805160001480610ba1575080806020019051810190610ba19190611533565b6109625760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610929565b6000808260001c9050806001600160801b03169050806801000000000000000002811777ffffffffffffffff0000000000000000ffffffffffffffff169050806401000000000281177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16905080620100000281177dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff169050806101000281177eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff1690508060100281177f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f16905060006008827f08080808080808080808080808080808080808080808080808080808080808081681610d1b57610d1b611494565b0460047f040404040404040404040404040404040404040404040404040404040404040484160460027f020202020202020202020202020202020202020202020202020202020202020285160417166027029091017f3030303030303030303030303030303030303030303030303030303030303030019392505050565b6060610da88484600085610db0565b949350505050565b606082471015610e115760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610929565b600080866001600160a01b03168587604051610e2d9190611550565b60006040518083038185875af1925050503d8060008114610e6a576040519150601f19603f3d011682016040523d82523d6000602084013e610e6f565b606091505b5091509150610e8087838387610e8b565b979650505050505050565b60608315610efa578251600003610ef3576001600160a01b0385163b610ef35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610929565b5081610da8565b610da88383815115610f0f5781518083602001fd5b8060405162461bcd60e51b8152600401610929919061144b565b508054610f35906112d4565b6000825580601f10610f45575050565b601f01602090049060005260206000209081019061016a91905b80821115610f735760008155600101610f5f565b5090565b60008060008060608587031215610f8d57600080fd5b84359350602085013567ffffffffffffffff80821115610fac57600080fd5b818701915087601f830112610fc057600080fd5b813581811115610fcf57600080fd5b886020828501011115610fe157600080fd5b60209290920194509092505060408501356001600160a01b038116811461100757600080fd5b939692955090935050565b60006020828403121561102457600080fd5b5035919050565b60005b8381101561104657818101518382015260200161102e565b50506000910152565b6000815180845261106781602086016020860161102b565b601f01601f19169290920160200192915050565b8215158152604060208201526000610da8604083018461104f565b801515811461016a57600080fd5b600080604083850312156110b757600080fd5b8235915060208301356110c981611096565b809150509250929050565b6000602082840312156110e657600080fd5b5051919050565b600081516110ff81856020860161102b565b9290920192915050565b7f496d6167652061737365727465642061742075726c3a2000000000000000000081528688601783013760008782016f040ccdee440d2dac2ceca9288744060f60831b60178201528751611164816027840160208c0161102b565b70040c2dcc840c2e6e6cae4e8cae4744060f607b1b602792909101918201528651611196816038840160208b0161102b565b86519101906111ac816038840160208a0161102b565b6e01030ba103a34b6b2b9ba30b6b81d1608d1b6038929091019182015284516111dc81604784016020890161102b565b7f20696e207468652044617461417373657274657220636f6e7472616374206174604792909101918201526204060f60eb1b6067820152611242611223606a8301866110ed565b721034b9903737ba1030903232b2b83330b5b29760691b815260130190565b9a9950505050505050505050565b60006101208083526112648184018d61104f565b6001600160a01b039b8c166020850152998b1660408401525050958816606087015267ffffffffffffffff9490941660808601529190951660a084015260c083019490945260e08201939093526101000191909152919050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806112e857607f821691505b60208210810361130857634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561096257600081815260208120601f850160051c810160208610156113355750805b601f850160051c820191505b8181101561135457828155600101611341565b505050505050565b815167ffffffffffffffff811115611376576113766112be565b61138a8161138484546112d4565b8461130e565b602080601f8311600181146113bf57600084156113a75750858301515b600019600386901b1c1916600185901b178555611354565b600085815260208120601f198616915b828110156113ee578886015182559484019460019091019084016113cf565b508582101561140c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208152600061145e602083018461104f565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161148d5761148d611465565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826114c757634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156114df576114df611465565b92915050565b60008160001904831182151516156114ff576114ff611465565b500290565b60ff81811683821601908111156114df576114df611465565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561154557600080fd5b815161145e81611096565b6000825161156281846020870161102b565b919091019291505056fea264697066735822122022759d2ec01478f58482cfd77d95067e6904f299377122900a416de4b2e7c38464736f6c63430008100033",
							"opcodes": "PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0x7865C6E87B9F70255377E024ACE6630C1EAA37F PUSH1 0x80 MSTORE PUSH20 0x9923D42EF695B5DD9911D05AC944D4CACA3C4EAB PUSH1 0xA0 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0xD509B017 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH4 0xD509B017 SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0xAA JUMP JUMPDEST PUSH1 0xC0 MSTORE PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x15A2 PUSH2 0x130 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x174 ADD MSTORE PUSH2 0x3C8 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x118 ADD MSTORE DUP2 DUP2 PUSH2 0x207 ADD MSTORE DUP2 DUP2 PUSH2 0x2D8 ADD MSTORE DUP2 DUP2 PUSH2 0x2FF ADD MSTORE PUSH2 0x62E ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH1 0xB8 ADD MSTORE DUP2 DUP2 PUSH2 0x1D9 ADD MSTORE DUP2 DUP2 PUSH2 0x281 ADD MSTORE DUP2 DUP2 PUSH2 0x2B6 ADD MSTORE PUSH2 0x3A4 ADD MSTORE PUSH2 0x15A2 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB75D4E24 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xB75D4E24 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0xD448A4EC EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xD509B017 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0xF1B156B2 EQ PUSH2 0x196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x96464CC EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x20402E1D EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x6CED1AE9 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x8921A614 EQ PUSH2 0x113 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0xF77 JUMP JUMPDEST PUSH2 0x1A9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAA JUMP JUMPDEST PUSH2 0x105 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x1012 JUMP JUMPDEST PUSH2 0x53F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP3 SWAP2 SWAP1 PUSH2 0x107B JUMP JUMPDEST PUSH2 0xDA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x143 PUSH2 0xE10 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAA JUMP JUMPDEST PUSH2 0x16D PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x1012 JUMP JUMPDEST POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x1A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A4 JUMP JUMPDEST PUSH2 0x623 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x1C0 JUMPI DUP2 PUSH2 0x1C2 JUMP JUMPDEST CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4360AF3D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP4 POP PUSH1 0x0 SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0x4360AF3D SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x272 SWAP2 SWAP1 PUSH2 0x10D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER ADDRESS DUP5 PUSH2 0x7D7 JUMP JUMPDEST PUSH2 0x2FD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH32 0x0 DUP4 PUSH2 0x848 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6457C979 DUP7 DUP7 PUSH2 0x337 DUP11 PUSH2 0x967 JUMP JUMPDEST PUSH2 0x340 DUP9 PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x349 DUP10 PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x352 TIMESTAMP PUSH2 0x9FF JUMP JUMPDEST PUSH2 0x35B ADDRESS PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x371 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1109 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP3 MSTORE PUSH2 0x3F2 SWAP2 DUP8 SWAP1 ADDRESS SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xE10 SWAP1 PUSH32 0x0 SWAP1 DUP11 SWAP1 PUSH32 0x0 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1250 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x411 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x435 SWAP2 SWAP1 PUSH2 0x10D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP3 DUP4 ADD DUP3 SWAP1 MSTORE DUP6 DUP3 MSTORE DUP2 DUP2 MSTORE SWAP2 SWAP1 KECCAK256 DUP3 MLOAD DUP2 SSTORE SWAP1 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SWAP1 PUSH2 0x4BB SWAP1 DUP3 PUSH2 0x135C JUMP JUMPDEST POP PUSH1 0x40 DUP3 DUP2 ADD MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP5 ADD MLOAD ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND OR SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD DUP4 SWAP2 DUP6 AND SWAP1 DUP9 SWAP1 PUSH32 0xB3B5C304BC1BA781EA735C86E786E9AE6432B86B469FBC00EC8BB252BF54EDA8 SWAP1 PUSH2 0x52E SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH2 0x141C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x57A JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP1 SLOAD DUP2 SWAP1 PUSH2 0x59A SWAP1 PUSH2 0x12D4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5C6 SWAP1 PUSH2 0x12D4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x613 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5E8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x613 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5F6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE DUP2 MLOAD PUSH1 0x80 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 MSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH2 0x6A6 SWAP1 PUSH2 0x12D4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6D2 SWAP1 PUSH2 0x12D4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x71F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6F4 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x71F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x702 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x2 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x40 SWAP4 DUP5 ADD MSTORE DUP4 DUP4 ADD MLOAD DUP5 MLOAD SWAP3 DUP6 ADD MLOAD SWAP4 MLOAD SWAP5 SWAP6 POP DUP8 SWAP5 SWAP2 AND SWAP3 PUSH32 0x2CD47D03CA5EED86ED11475382AF40BC0F2965DD65BC4AB337D45577EA5DFAF9 SWAP2 PUSH2 0x795 SWAP2 SWAP1 PUSH2 0x144B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE SWAP1 PUSH2 0x7C1 PUSH1 0x1 DUP4 ADD DUP3 PUSH2 0xF29 JUMP JUMPDEST POP PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x842 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xB2B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x8C2 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x89C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8C0 SWAP2 SWAP1 PUSH2 0x10D4 JUMP JUMPDEST ISZERO JUMPDEST PUSH2 0x932 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x20746F206E6F6E2D7A65726F20616C6C6F77616E6365 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x962 SWAP1 DUP5 SWAP1 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x80B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x976 PUSH1 0x80 DUP4 SWAP1 SHR PUSH2 0xC00 JUMP JUMPDEST PUSH2 0x97F DUP4 PUSH2 0xC00 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP3 ADD MSTORE PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9C0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x20 DUP5 SWAP1 SHR AND PUSH2 0xC00 JUMP JUMPDEST PUSH2 0x9DB DUP4 PUSH1 0x60 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH2 0xC00 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x992 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x28 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0xA26 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xA50 JUMPI DUP1 PUSH2 0xA3A DUP2 PUSH2 0x147B JUMP JUMPDEST SWAP2 POP PUSH2 0xA49 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x14AA JUMP JUMPDEST SWAP2 POP PUSH2 0xA2A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA6B JUMPI PUSH2 0xA6B PUSH2 0x12BE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA95 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 JUMPDEST DUP6 ISZERO PUSH2 0xB22 JUMPI PUSH2 0xAAB PUSH1 0x1 DUP3 PUSH2 0x14CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xABA PUSH1 0xA DUP9 PUSH2 0x14AA JUMP JUMPDEST PUSH2 0xAC5 SWAP1 PUSH1 0xA PUSH2 0x14E5 JUMP JUMPDEST PUSH2 0xACF SWAP1 DUP9 PUSH2 0x14CC JUMP JUMPDEST PUSH2 0xADA SWAP1 PUSH1 0x30 PUSH2 0x1504 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xF8 SHL SWAP1 POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAF7 JUMPI PUSH2 0xAF7 PUSH2 0x151D JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xB19 PUSH1 0xA DUP10 PUSH2 0x14AA JUMP JUMPDEST SWAP8 POP POP POP PUSH2 0xA9A JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB80 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD99 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0xBA1 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xBA1 SWAP2 SWAP1 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x962 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x929 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x0 SHR SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 POP DUP1 PUSH9 0x10000000000000000 MUL DUP2 OR PUSH24 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH5 0x100000000 MUL DUP2 OR PUSH28 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF AND SWAP1 POP DUP1 PUSH3 0x10000 MUL DUP2 OR PUSH30 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF AND SWAP1 POP DUP1 PUSH2 0x100 MUL DUP2 OR PUSH31 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF AND SWAP1 POP DUP1 PUSH1 0x10 MUL DUP2 OR PUSH32 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F AND SWAP1 POP PUSH1 0x0 PUSH1 0x8 DUP3 PUSH32 0x808080808080808080808080808080808080808080808080808080808080808 AND DUP2 PUSH2 0xD1B JUMPI PUSH2 0xD1B PUSH2 0x1494 JUMP JUMPDEST DIV PUSH1 0x4 PUSH32 0x404040404040404040404040404040404040404040404040404040404040404 DUP5 AND DIV PUSH1 0x2 PUSH32 0x202020202020202020202020202020202020202020202020202020202020202 DUP6 AND DIV OR AND PUSH1 0x27 MUL SWAP1 SWAP2 ADD PUSH32 0x3030303030303030303030303030303030303030303030303030303030303030 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xDA8 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xDB0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xE11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x929 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xE2D SWAP2 SWAP1 PUSH2 0x1550 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE6A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xE80 DUP8 DUP4 DUP4 DUP8 PUSH2 0xE8B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xEFA JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0xEF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xEF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x929 JUMP JUMPDEST POP DUP2 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xDA8 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0xF0F JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x929 SWAP2 SWAP1 PUSH2 0x144B JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0xF35 SWAP1 PUSH2 0x12D4 JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0xF45 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16A SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xF73 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xF5F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xFAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xFCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xFE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP5 POP SWAP1 SWAP3 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1007 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1024 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1046 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x102E JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1067 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x102B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xDA8 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x104F JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x16A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x10C9 DUP2 PUSH2 0x1096 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x10FF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x102B JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496D6167652061737365727465642061742075726C3A20000000000000000000 DUP2 MSTORE DUP7 DUP9 PUSH1 0x17 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP8 DUP3 ADD PUSH16 0x40CCDEE440D2DAC2CECA9288744060F PUSH1 0x83 SHL PUSH1 0x17 DUP3 ADD MSTORE DUP8 MLOAD PUSH2 0x1164 DUP2 PUSH1 0x27 DUP5 ADD PUSH1 0x20 DUP13 ADD PUSH2 0x102B JUMP JUMPDEST PUSH17 0x40C2DCC840C2E6E6CAE4E8CAE4744060F PUSH1 0x7B SHL PUSH1 0x27 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP7 MLOAD PUSH2 0x1196 DUP2 PUSH1 0x38 DUP5 ADD PUSH1 0x20 DUP12 ADD PUSH2 0x102B JUMP JUMPDEST DUP7 MLOAD SWAP2 ADD SWAP1 PUSH2 0x11AC DUP2 PUSH1 0x38 DUP5 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x102B JUMP JUMPDEST PUSH15 0x1030BA103A34B6B2B9BA30B6B81D1 PUSH1 0x8D SHL PUSH1 0x38 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP5 MLOAD PUSH2 0x11DC DUP2 PUSH1 0x47 DUP5 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x102B JUMP JUMPDEST PUSH32 0x20696E207468652044617461417373657274657220636F6E7472616374206174 PUSH1 0x47 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH3 0x4060F PUSH1 0xEB SHL PUSH1 0x67 DUP3 ADD MSTORE PUSH2 0x1242 PUSH2 0x1223 PUSH1 0x6A DUP4 ADD DUP7 PUSH2 0x10ED JUMP JUMPDEST PUSH19 0x1034B9903737BA1030903232B2B83330B5B297 PUSH1 0x69 SHL DUP2 MSTORE PUSH1 0x13 ADD SWAP1 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP1 DUP4 MSTORE PUSH2 0x1264 DUP2 DUP5 ADD DUP14 PUSH2 0x104F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP12 DUP13 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP10 DUP12 AND PUSH1 0x40 DUP5 ADD MSTORE POP POP SWAP6 DUP9 AND PUSH1 0x60 DUP8 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x80 DUP7 ADD MSTORE SWAP2 SWAP1 SWAP6 AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xE0 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x100 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x12E8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1308 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x962 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x1335 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1354 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1341 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1376 JUMPI PUSH2 0x1376 PUSH2 0x12BE JUMP JUMPDEST PUSH2 0x138A DUP2 PUSH2 0x1384 DUP5 SLOAD PUSH2 0x12D4 JUMP JUMPDEST DUP5 PUSH2 0x130E JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x13BF JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x13A7 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x1354 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x13EE JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x13CF JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x140C JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x145E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x104F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x148D JUMPI PUSH2 0x148D PUSH2 0x1465 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14C7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x14DF JUMPI PUSH2 0x14DF PUSH2 0x1465 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x14FF JUMPI PUSH2 0x14FF PUSH2 0x1465 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0xFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0x14DF JUMPI PUSH2 0x14DF PUSH2 0x1465 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1545 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x145E DUP2 PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1562 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x102B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 PUSH22 0x9D2EC01478F58482CFD77D95067E6904F29937712290 EXP COINBASE PUSH14 0xE4B2E7C38464736F6C6343000810 STOP CALLER ",
							"sourceMap": "298:4124:7:-:0;;;1287:295;;;;;;;;;-1:-1:-1;1336:42:7;1311:68;;1453:42;1407:98;;;;1553:22;;;-1:-1:-1;;;1553:22:7;;;;:20;;:22;;;;;;;;;;;;;;;1453:42;1553:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1533:42;;298:4124;;14:184:8;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;-1:-1:-1;176:16:8;;14:184;-1:-1:-1;14:184:8:o;:::-;298:4124:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_callOptionalReturn_440": {
									"entryPoint": 2859,
									"id": 440,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_revert_818": {
									"entryPoint": null,
									"id": 818,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@assertDataFor_1656": {
									"entryPoint": 425,
									"id": 1656,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@assertionDisputedCallback_1712": {
									"entryPoint": null,
									"id": 1712,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@assertionLiveness_1439": {
									"entryPoint": null,
									"id": 1439,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@assertionResolvedCallback_1706": {
									"entryPoint": 1571,
									"id": 1706,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@defaultCurrency_1433": {
									"entryPoint": null,
									"id": 1433,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@defaultIdentifier_1441": {
									"entryPoint": null,
									"id": 1441,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@functionCallWithValue_643": {
									"entryPoint": 3504,
									"id": 643,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@functionCall_579": {
									"entryPoint": 3481,
									"id": 579,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@getImage_1524": {
									"entryPoint": 1343,
									"id": 1524,
									"parameterSlots": 1,
									"returnSlots": 2
								},
								"@isContract_507": {
									"entryPoint": null,
									"id": 507,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@oo_1436": {
									"entryPoint": null,
									"id": 1436,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeApprove_217": {
									"entryPoint": 2120,
									"id": 217,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_173": {
									"entryPoint": 2007,
									"id": 173,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@toUtf8Bytes32Bottom_962": {
									"entryPoint": 3072,
									"id": 962,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toUtf8BytesAddress_1016": {
									"entryPoint": 2472,
									"id": 1016,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toUtf8BytesUint_1109": {
									"entryPoint": 2559,
									"id": 1109,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toUtf8Bytes_983": {
									"entryPoint": 2407,
									"id": 983,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@verifyCallResultFromTarget_774": {
									"entryPoint": 3723,
									"id": 774,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 5427,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32": {
									"entryPoint": 4114,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32_fromMemory": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes32t_bool": {
									"entryPoint": 4260,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes32t_string_calldata_ptrt_address": {
									"entryPoint": 3959,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 4308,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_bytes": {
									"entryPoint": 4333,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 4175,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_stringliteral_19c8": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes32_t_bytes8__to_t_bytes32_t_bytes8__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 5456,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_b366c87696ed46c73efedbc9431665681599b5bf15784ed35a7688a33aacb678_t_string_calldata_ptr_t_stringliteral_bcf974f2119ba7d64309250380153894ac059dbe81f016cdcd5daec0a7737032_t_bytes_memory_ptr_t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf_t_bytes_memory_ptr_t_bytes_memory_ptr_t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49_t_bytes_memory_ptr_t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8_t_bytes_memory_ptr_t_stringliteral_19c8836c1ea35754620445faac202b424a0e6488620665649459ae40f269ae1b__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 4361,
									"id": null,
									"parameterSlots": 8,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool_t_string_memory_ptr__to_t_bool_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4219,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_contract$_IERC20_$77_t_uint256_t_bytes32_t_bytes32__to_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_address_t_uint256_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": 4688,
									"id": null,
									"parameterSlots": 10,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_IERC20_$77__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_OptimisticOracleV3Interface_$1421__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5148,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5195,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint8": {
									"entryPoint": 5380,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 5290,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 5349,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 5324,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 4878,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 4956,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 4139,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 4820,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 5243,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 5221,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 5268,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 5405,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 4798,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_bool": {
									"entryPoint": 4246,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:15308:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "138:710:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "184:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "193:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "196:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "186:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "186:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "186:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "159:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "168:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "155:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "155:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "180:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "151:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "151:32:8"
															},
															"nodeType": "YulIf",
															"src": "148:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "209:33:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "232:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "219:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "219:23:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "209:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "251:46:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "282:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "293:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "278:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "278:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "265:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "265:32:8"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "255:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "306:28:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "316:18:8",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "310:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "361:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "370:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "373:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "363:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "363:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "363:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "349:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "357:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "346:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "346:14:8"
															},
															"nodeType": "YulIf",
															"src": "343:34:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "386:32:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "400:9:8"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "411:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "396:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "396:22:8"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "390:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "466:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "475:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "478:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "468:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "468:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "468:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "445:2:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "449:4:8",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "441:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "441:13:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "456:7:8"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "437:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "437:27:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "430:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "430:35:8"
															},
															"nodeType": "YulIf",
															"src": "427:55:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "491:30:8",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "518:2:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "505:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "505:16:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "495:6:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "548:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "557:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "560:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "550:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "550:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "550:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "536:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "544:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "533:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "533:14:8"
															},
															"nodeType": "YulIf",
															"src": "530:34:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "614:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "623:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "626:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "616:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "616:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "616:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "587:2:8"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "591:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "583:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "583:15:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "600:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "579:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "579:24:8"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "605:7:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "576:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "576:37:8"
															},
															"nodeType": "YulIf",
															"src": "573:57:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "639:21:8",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "653:2:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "657:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "649:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "649:11:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "639:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "669:16:8",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "679:6:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "669:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "694:45:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "724:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "735:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "720:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "720:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "707:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "707:32:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "698:5:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "802:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "811:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "814:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "804:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "804:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "761:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "772:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "787:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "792:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "783:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "783:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "796:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "779:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "779:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "768:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "768:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "758:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "758:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "751:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "751:50:8"
															},
															"nodeType": "YulIf",
															"src": "748:70:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "827:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "837:5:8"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "827:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_string_calldata_ptrt_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "80:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "91:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "103:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "111:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "119:6:8",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "127:6:8",
														"type": ""
													}
												],
												"src": "14:834:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "954:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "964:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "976:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "987:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "972:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "972:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "964:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1006:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1017:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "999:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "999:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "999:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "923:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "934:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "945:4:8",
														"type": ""
													}
												],
												"src": "853:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1149:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1159:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1171:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1182:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1167:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1167:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1159:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1201:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1216:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1232:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1237:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1228:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1228:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1241:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1224:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1224:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1212:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1212:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1194:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1194:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1194:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20_$77__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1118:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1129:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1140:4:8",
														"type": ""
													}
												],
												"src": "1035:216:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1326:110:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1372:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1381:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1384:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1374:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1374:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1374:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1347:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1356:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1343:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1343:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1368:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1339:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1339:32:8"
															},
															"nodeType": "YulIf",
															"src": "1336:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1397:33:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1420:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1407:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1407:23:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1397:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1292:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1303:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1315:6:8",
														"type": ""
													}
												],
												"src": "1256:180:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1507:184:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1517:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1526:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1521:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1586:63:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "1611:3:8"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "1616:1:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1607:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1607:11:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "1630:3:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1635:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1626:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1626:11:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1620:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1620:18:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1600:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1600:39:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1600:39:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1547:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1550:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1544:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1558:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1560:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1569:1:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1572:2:8",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1565:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1565:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1560:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1540:3:8",
																"statements": []
															},
															"src": "1536:113:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "1669:3:8"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1674:6:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1665:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1665:16:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1683:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1658:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1658:27:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1658:27:8"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "1485:3:8",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "1490:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1495:6:8",
														"type": ""
													}
												],
												"src": "1441:250:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1746:221:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1756:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1776:5:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1770:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1770:12:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1760:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1798:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1803:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1791:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1791:19:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1791:19:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1858:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1865:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1854:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1854:16:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1876:3:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1881:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1872:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1872:14:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1888:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "1819:34:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1819:76:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1819:76:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1904:57:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1919:3:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1932:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1940:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1928:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1928:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1949:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1945:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1945:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1924:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1924:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1915:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1915:39:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1956:4:8",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1911:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1911:50:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1904:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1723:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1730:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1738:3:8",
														"type": ""
													}
												],
												"src": "1696:271:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2115:158:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2132:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "2157:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2150:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2150:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2143:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2143:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2125:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2125:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2125:41:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2186:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2197:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2182:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2182:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2202:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2175:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2175:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2175:30:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2214:53:8",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2240:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2252:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2263:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2248:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2248:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "2222:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2222:45:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2214:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_bool_t_string_memory_ptr__to_t_bool_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2076:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2087:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2095:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2106:4:8",
														"type": ""
													}
												],
												"src": "1972:301:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2415:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2425:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2437:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2448:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2433:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2433:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2425:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2467:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2482:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2498:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2503:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2494:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2494:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2507:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2490:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2490:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2478:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2478:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2460:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2460:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2460:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_OptimisticOracleV3Interface_$1421__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2384:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2395:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2406:4:8",
														"type": ""
													}
												],
												"src": "2278:239:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2621:101:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2631:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2643:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2654:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2639:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2639:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2631:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2673:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2688:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2696:18:8",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2684:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2684:31:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2666:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2666:50:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2666:50:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2590:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2601:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2612:4:8",
														"type": ""
													}
												],
												"src": "2522:200:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2769:76:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2823:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2832:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2835:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2825:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2825:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2825:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2792:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "2813:5:8"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "2806:6:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2806:13:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2799:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2799:21:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2789:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2789:32:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2782:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2782:40:8"
															},
															"nodeType": "YulIf",
															"src": "2779:60:8"
														}
													]
												},
												"name": "validator_revert_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2758:5:8",
														"type": ""
													}
												],
												"src": "2727:118:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2934:225:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2980:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2989:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2992:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2982:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2982:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2982:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2955:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2964:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2951:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2951:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2976:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2947:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2947:32:8"
															},
															"nodeType": "YulIf",
															"src": "2944:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3005:33:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3028:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3015:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3015:23:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3005:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3047:45:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3077:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3088:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3073:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3073:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3060:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3060:32:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3051:5:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3123:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bool",
																	"nodeType": "YulIdentifier",
																	"src": "3101:21:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3101:28:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3101:28:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3138:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3148:5:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3138:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2892:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2903:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2915:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2923:6:8",
														"type": ""
													}
												],
												"src": "2850:309:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3265:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3275:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3287:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3298:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3283:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3283:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3275:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3317:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3332:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3348:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3353:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3344:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3344:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3357:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3340:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3340:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3328:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3328:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3310:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3310:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3310:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3234:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3245:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3256:4:8",
														"type": ""
													}
												],
												"src": "3164:203:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3453:103:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3499:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3508:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3511:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3501:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3501:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3501:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3474:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3483:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3470:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3470:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3495:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3466:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3466:32:8"
															},
															"nodeType": "YulIf",
															"src": "3463:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3524:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3540:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3534:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3534:16:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3524:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3419:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3430:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3442:6:8",
														"type": ""
													}
												],
												"src": "3372:184:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3610:148:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3620:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3640:5:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3634:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3634:12:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3624:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3694:5:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3701:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3690:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3690:16:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3708:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3713:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "3655:34:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3655:65:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3655:65:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3729:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3740:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3745:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3736:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3736:16:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3729:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_bytes",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3587:5:8",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3594:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3602:3:8",
														"type": ""
													}
												],
												"src": "3561:197:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3818:78:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3835:3:8"
																	},
																	{
																		"hexValue": "206973206e6f742061206465657066616b652e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3840:21:8",
																		"type": "",
																		"value": " is not a deepfake."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3828:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3828:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3828:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3871:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3882:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3887:2:8",
																		"type": "",
																		"value": "19"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3878:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3878:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3871:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_stringliteral_19c8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3802:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3810:3:8",
														"type": ""
													}
												],
												"src": "3763:133:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4886:1099:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4903:3:8"
																	},
																	{
																		"hexValue": "496d6167652061737365727465642061742075726c3a20",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4908:25:8",
																		"type": "",
																		"value": "Image asserted at url: "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4896:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4896:38:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4896:38:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "4960:3:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4965:2:8",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4956:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4956:12:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4970:6:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4978:6:8"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "4943:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4943:42:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4943:42:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4994:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5008:3:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5013:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5004:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5004:16:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4998:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5040:2:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5044:2:8",
																				"type": "",
																				"value": "23"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5036:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5036:11:8"
																	},
																	{
																		"hexValue": "20666f7220696d61676549443a203078",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5049:18:8",
																		"type": "",
																		"value": " for imageID: 0x"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5029:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5029:39:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5029:39:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5077:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5097:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5091:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5091:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5081:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "5152:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5160:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5148:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5148:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "5171:2:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5175:2:8",
																				"type": "",
																				"value": "39"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5167:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5167:11:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5180:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "5113:34:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5113:74:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5113:74:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5196:25:8",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5210:2:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "5214:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5206:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5206:15:8"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "5200:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "5241:2:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5245:2:8",
																				"type": "",
																				"value": "39"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5237:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5237:11:8"
																	},
																	{
																		"hexValue": "20616e642061737365727465723a203078",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5250:19:8",
																		"type": "",
																		"value": " and asserter: 0x"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5230:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5230:40:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5230:40:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5279:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "5301:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5295:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5295:13:8"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "5283:8:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value3",
																				"nodeType": "YulIdentifier",
																				"src": "5356:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5364:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5352:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5352:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "5375:2:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5379:2:8",
																				"type": "",
																				"value": "56"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5371:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5371:11:8"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "5384:8:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "5317:34:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5317:76:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5317:76:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5402:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "5416:2:8"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "5420:8:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5412:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5412:17:8"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "5406:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5438:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "5460:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5454:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5454:13:8"
															},
															"variables": [
																{
																	"name": "length_2",
																	"nodeType": "YulTypedName",
																	"src": "5442:8:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nodeType": "YulIdentifier",
																				"src": "5515:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5523:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5511:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5511:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "5534:2:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5538:2:8",
																				"type": "",
																				"value": "56"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5530:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5530:11:8"
																	},
																	{
																		"name": "length_2",
																		"nodeType": "YulIdentifier",
																		"src": "5543:8:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "5476:34:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5476:76:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5476:76:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5561:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "5575:2:8"
																	},
																	{
																		"name": "length_2",
																		"nodeType": "YulIdentifier",
																		"src": "5579:8:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5571:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5571:17:8"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "5565:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "5608:2:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5612:2:8",
																				"type": "",
																				"value": "56"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5604:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5604:11:8"
																	},
																	{
																		"hexValue": "2061742074696d657374616d703a20",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5617:17:8",
																		"type": "",
																		"value": " at timestamp: "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5597:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5597:38:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5597:38:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5644:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "5666:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5660:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5660:13:8"
															},
															"variables": [
																{
																	"name": "length_3",
																	"nodeType": "YulTypedName",
																	"src": "5648:8:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value5",
																				"nodeType": "YulIdentifier",
																				"src": "5721:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5729:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5717:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5717:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "5740:2:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5744:2:8",
																				"type": "",
																				"value": "71"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5736:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5736:11:8"
																	},
																	{
																		"name": "length_3",
																		"nodeType": "YulIdentifier",
																		"src": "5749:8:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "5682:34:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5682:76:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5682:76:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5767:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "5781:2:8"
																	},
																	{
																		"name": "length_3",
																		"nodeType": "YulIdentifier",
																		"src": "5785:8:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5777:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5777:17:8"
															},
															"variables": [
																{
																	"name": "_5",
																	"nodeType": "YulTypedName",
																	"src": "5771:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "5814:2:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5818:2:8",
																				"type": "",
																				"value": "71"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5810:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5810:11:8"
																	},
																	{
																		"hexValue": "20696e207468652044617461417373657274657220636f6e7472616374206174",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5823:34:8",
																		"type": "",
																		"value": " in the DataAsserter contract at"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5803:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5803:55:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5803:55:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "5878:2:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5882:3:8",
																				"type": "",
																				"value": "103"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5874:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5874:12:8"
																	},
																	{
																		"hexValue": "203078",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5888:5:8",
																		"type": "",
																		"value": " 0x"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5867:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5867:27:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5867:27:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5903:76:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value6",
																				"nodeType": "YulIdentifier",
																				"src": "5957:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "_5",
																						"nodeType": "YulIdentifier",
																						"src": "5969:2:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "5973:3:8",
																						"type": "",
																						"value": "106"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5965:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5965:12:8"
																			}
																		],
																		"functionName": {
																			"name": "abi_encode_bytes",
																			"nodeType": "YulIdentifier",
																			"src": "5940:16:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5940:38:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_stringliteral_19c8",
																	"nodeType": "YulIdentifier",
																	"src": "5910:29:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5910:69:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "5903:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_b366c87696ed46c73efedbc9431665681599b5bf15784ed35a7688a33aacb678_t_string_calldata_ptr_t_stringliteral_bcf974f2119ba7d64309250380153894ac059dbe81f016cdcd5daec0a7737032_t_bytes_memory_ptr_t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf_t_bytes_memory_ptr_t_bytes_memory_ptr_t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49_t_bytes_memory_ptr_t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8_t_bytes_memory_ptr_t_stringliteral_19c8836c1ea35754620445faac202b424a0e6488620665649459ae40f269ae1b__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4814:3:8",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "4819:6:8",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "4827:6:8",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "4835:6:8",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4843:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4851:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4859:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4867:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "4878:3:8",
														"type": ""
													}
												],
												"src": "3901:2084:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6344:569:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6354:13:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "6364:3:8",
																"type": "",
																"value": "288"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "6358:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6383:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "6394:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6376:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6376:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6376:21:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6406:53:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6432:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6444:9:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6455:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6440:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6440:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "6414:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6414:45:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6406:4:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6468:29:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6486:3:8",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6491:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6482:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6482:11:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6495:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "6478:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6478:19:8"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "6472:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6517:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6528:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6513:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6513:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "6537:6:8"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "6545:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6533:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6533:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6506:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6506:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6506:43:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6569:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6580:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6565:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6565:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "6589:6:8"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "6597:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6585:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6585:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6558:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6558:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6558:43:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6621:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6632:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6617:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6617:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value3",
																				"nodeType": "YulIdentifier",
																				"src": "6641:6:8"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "6649:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6637:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6637:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6610:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6610:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6610:43:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6673:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6684:3:8",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6669:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6669:19:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nodeType": "YulIdentifier",
																				"src": "6694:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6702:18:8",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6690:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6690:31:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6662:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6662:60:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6662:60:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6742:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6753:3:8",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6738:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6738:19:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value5",
																				"nodeType": "YulIdentifier",
																				"src": "6763:6:8"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "6771:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6759:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6759:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6731:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6731:44:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6731:44:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6795:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6806:3:8",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6791:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6791:19:8"
																	},
																	{
																		"name": "value6",
																		"nodeType": "YulIdentifier",
																		"src": "6812:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6784:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6784:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6784:35:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6839:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6850:3:8",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6835:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6835:19:8"
																	},
																	{
																		"name": "value7",
																		"nodeType": "YulIdentifier",
																		"src": "6856:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6828:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6828:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6828:35:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6883:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6894:3:8",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6879:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6879:19:8"
																	},
																	{
																		"name": "value8",
																		"nodeType": "YulIdentifier",
																		"src": "6900:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6872:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6872:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6872:35:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_contract$_IERC20_$77_t_uint256_t_bytes32_t_bytes32__to_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_address_t_uint256_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6249:9:8",
														"type": ""
													},
													{
														"name": "value8",
														"nodeType": "YulTypedName",
														"src": "6260:6:8",
														"type": ""
													},
													{
														"name": "value7",
														"nodeType": "YulTypedName",
														"src": "6268:6:8",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "6276:6:8",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "6284:6:8",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "6292:6:8",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "6300:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "6308:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6316:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6324:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6335:4:8",
														"type": ""
													}
												],
												"src": "5990:923:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6999:103:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7045:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7054:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7057:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7047:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7047:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7047:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7020:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7029:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7016:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7016:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7041:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7012:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7012:32:8"
															},
															"nodeType": "YulIf",
															"src": "7009:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7070:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7086:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7080:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7080:16:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "7070:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes32_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6965:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6976:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6988:6:8",
														"type": ""
													}
												],
												"src": "6918:184:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7139:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7156:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7163:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7168:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7159:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7159:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7149:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7149:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7149:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7196:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7199:4:8",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7189:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7189:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7189:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7220:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7223:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7213:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7213:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7213:15:8"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "7107:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7294:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7304:22:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7318:1:8",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "7321:4:8"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7314:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7314:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "7304:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7335:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "7365:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7371:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "7361:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7361:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "7339:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7412:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7414:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "7428:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7436:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "7424:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7424:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "7414:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "7392:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "7385:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7385:26:8"
															},
															"nodeType": "YulIf",
															"src": "7382:61:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7502:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7523:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "7530:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "7535:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "7526:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7526:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7516:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7516:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7516:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7567:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7570:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7560:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7560:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7560:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7595:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7598:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7588:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7588:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7588:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "7458:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "7481:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7489:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "7478:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7478:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "7455:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7455:38:8"
															},
															"nodeType": "YulIf",
															"src": "7452:161:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "7274:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "7283:6:8",
														"type": ""
													}
												],
												"src": "7239:380:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7680:65:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7697:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "7700:3:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7690:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7690:14:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7690:14:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7713:26:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7731:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7734:4:8",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "7721:9:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7721:18:8"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "7713:4:8"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "7663:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "7671:4:8",
														"type": ""
													}
												],
												"src": "7624:121:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7831:464:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7864:425:8",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "7878:11:8",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7888:1:8",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nodeType": "YulTypedName",
																				"src": "7882:2:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "7909:2:8"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "7913:5:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "7902:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7902:17:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7902:17:8"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "7932:31:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "7954:2:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7958:4:8",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nodeType": "YulIdentifier",
																				"src": "7944:9:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7944:19:8"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nodeType": "YulTypedName",
																				"src": "7936:4:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "7976:57:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "7999:4:8"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8009:1:8",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nodeType": "YulIdentifier",
																									"src": "8016:10:8"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "8028:2:8",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "8012:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8012:19:8"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "8005:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8005:27:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7995:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7995:38:8"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "7980:11:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "8070:23:8",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "8072:19:8",
																					"value": {
																						"name": "data",
																						"nodeType": "YulIdentifier",
																						"src": "8087:4:8"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "8072:11:8"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "8052:10:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8064:4:8",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "8049:2:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8049:20:8"
																		},
																		"nodeType": "YulIf",
																		"src": "8046:47:8"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8106:41:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "8120:4:8"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8130:1:8",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "8137:3:8"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "8142:2:8",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "8133:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8133:12:8"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "8126:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8126:20:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "8116:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8116:31:8"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nodeType": "YulTypedName",
																				"src": "8110:2:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8160:24:8",
																		"value": {
																			"name": "deleteStart",
																			"nodeType": "YulIdentifier",
																			"src": "8173:11:8"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nodeType": "YulTypedName",
																				"src": "8164:5:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "8258:21:8",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "8267:5:8"
																							},
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "8274:2:8"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nodeType": "YulIdentifier",
																							"src": "8260:6:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8260:17:8"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8260:17:8"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "8208:5:8"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "8215:2:8"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "8205:2:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8205:13:8"
																		},
																		"nodeType": "YulForLoop",
																		"post": {
																			"nodeType": "YulBlock",
																			"src": "8219:26:8",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "8221:22:8",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "8234:5:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "8241:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "8230:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8230:13:8"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nodeType": "YulIdentifier",
																							"src": "8221:5:8"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nodeType": "YulBlock",
																			"src": "8201:3:8",
																			"statements": []
																		},
																		"src": "8197:82:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "7847:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7852:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7844:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7844:11:8"
															},
															"nodeType": "YulIf",
															"src": "7841:448:8"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "7803:5:8",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "7810:3:8",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "7815:10:8",
														"type": ""
													}
												],
												"src": "7750:545:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8385:81:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8395:65:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "8410:4:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8428:1:8",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nodeType": "YulIdentifier",
																										"src": "8431:3:8"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "8424:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8424:11:8"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8441:1:8",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nodeType": "YulIdentifier",
																									"src": "8437:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8437:6:8"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nodeType": "YulIdentifier",
																							"src": "8420:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8420:24:8"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "8416:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8416:29:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8406:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8406:40:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8452:1:8",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "8455:3:8"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8448:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8448:11:8"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8403:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8403:57:8"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "8395:4:8"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "8362:4:8",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "8368:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "8376:4:8",
														"type": ""
													}
												],
												"src": "8300:166:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8567:1256:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8577:24:8",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "8597:3:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "8591:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8591:10:8"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "8581:6:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8644:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "8646:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8646:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8646:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "8616:6:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8624:18:8",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8613:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8613:30:8"
															},
															"nodeType": "YulIf",
															"src": "8610:56:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "8719:4:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "8757:4:8"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "8751:5:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8751:11:8"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nodeType": "YulIdentifier",
																			"src": "8725:25:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8725:38:8"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "8765:6:8"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "8675:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8675:97:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8675:97:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8781:18:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8798:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "8785:9:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "8808:23:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "8827:4:8",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "srcOffset_1",
																	"nodeType": "YulTypedName",
																	"src": "8812:11:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "8840:24:8",
															"value": {
																"name": "srcOffset_1",
																"nodeType": "YulIdentifier",
																"src": "8853:11:8"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "8840:9:8"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "8910:656:8",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "8924:35:8",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "8943:6:8"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "8955:2:8",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "8951:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "8951:7:8"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "8939:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8939:20:8"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "8928:7:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "8972:49:8",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "9016:4:8"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "8986:29:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8986:35:8"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "8976:6:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "9034:10:8",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9043:1:8",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "9038:1:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "9121:172:8",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "9146:6:8"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "9164:3:8"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "9169:9:8"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "9160:3:8"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "9160:19:8"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "9154:5:8"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "9154:26:8"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "9139:6:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "9139:42:8"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "9139:42:8"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "9198:24:8",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "9212:6:8"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "9220:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "9208:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "9208:14:8"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "9198:6:8"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "9239:40:8",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "9256:9:8"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "9267:11:8"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "9252:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "9252:27:8"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "9239:9:8"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "9068:1:8"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "9071:7:8"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "9065:2:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9065:14:8"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "9080:28:8",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "9082:24:8",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "9091:1:8"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "9094:11:8"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "9087:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "9087:19:8"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "9082:1:8"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "9061:3:8",
																					"statements": []
																				},
																				"src": "9057:236:8"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "9341:166:8",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "9359:43:8",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "9386:3:8"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "9391:9:8"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "9382:3:8"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "9382:19:8"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "9376:5:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "9376:26:8"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "9363:9:8",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "9426:6:8"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "9438:9:8"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nodeType": "YulLiteral",
																																				"src": "9465:1:8",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nodeType": "YulIdentifier",
																																				"src": "9468:6:8"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nodeType": "YulIdentifier",
																																			"src": "9461:3:8"
																																		},
																																		"nodeType": "YulFunctionCall",
																																		"src": "9461:14:8"
																																	},
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "9477:3:8",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nodeType": "YulIdentifier",
																																	"src": "9457:3:8"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "9457:24:8"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "9487:1:8",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nodeType": "YulIdentifier",
																																	"src": "9483:3:8"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "9483:6:8"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nodeType": "YulIdentifier",
																															"src": "9453:3:8"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "9453:37:8"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nodeType": "YulIdentifier",
																													"src": "9449:3:8"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "9449:42:8"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nodeType": "YulIdentifier",
																											"src": "9434:3:8"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "9434:58:8"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "9419:6:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "9419:74:8"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "9419:74:8"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "9312:7:8"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "9321:6:8"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "9309:2:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9309:19:8"
																				},
																				"nodeType": "YulIf",
																				"src": "9306:201:8"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "9527:4:8"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "9541:1:8",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "9544:6:8"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "9537:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "9537:14:8"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "9553:1:8",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "9533:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "9533:22:8"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "9520:6:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9520:36:8"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "9520:36:8"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "8903:663:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8908:1:8",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "9583:234:8",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "9597:14:8",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9610:1:8",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "9601:5:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "9646:67:8",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "9664:35:8",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "9683:3:8"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "9688:9:8"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "9679:3:8"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "9679:19:8"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "9673:5:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "9673:26:8"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "9664:5:8"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "9627:6:8"
																				},
																				"nodeType": "YulIf",
																				"src": "9624:89:8"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "9733:4:8"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "9792:5:8"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "9799:6:8"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "9739:52:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "9739:67:8"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "9726:6:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9726:81:8"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "9726:81:8"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "9575:242:8",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "8883:6:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8891:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8880:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8880:14:8"
															},
															"nodeType": "YulSwitch",
															"src": "8873:944:8"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "8552:4:8",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "8558:3:8",
														"type": ""
													}
												],
												"src": "8471:1352:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9959:259:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9976:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9987:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9969:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9969:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9969:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10010:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10021:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10006:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10006:18:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10026:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9999:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9999:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9999:34:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10059:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10070:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10055:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10055:18:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10075:6:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10083:6:8"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "10042:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10042:48:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10042:48:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10114:9:8"
																					},
																					{
																						"name": "value1",
																						"nodeType": "YulIdentifier",
																						"src": "10125:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10110:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10110:22:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10134:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10106:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10106:31:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10139:1:8",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10099:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10099:42:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10099:42:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10150:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10166:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value1",
																								"nodeType": "YulIdentifier",
																								"src": "10185:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10193:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "10181:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10181:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10202:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "10198:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10198:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "10177:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10177:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10162:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10162:45:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10209:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10158:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10158:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10150:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9920:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "9931:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9939:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9950:4:8",
														"type": ""
													}
												],
												"src": "9828:390:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10344:99:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10361:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10372:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10354:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10354:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10354:21:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10384:53:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10410:6:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10422:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10433:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10418:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10418:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "10392:17:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10392:45:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10384:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10313:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10324:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10335:4:8",
														"type": ""
													}
												],
												"src": "10223:220:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10605:218:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10615:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10627:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10638:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10623:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10623:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10615:4:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10650:29:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10668:3:8",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10673:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "10664:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10664:11:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10677:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "10660:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10660:19:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "10654:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10695:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "10710:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10718:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10706:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10706:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10688:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10688:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10688:34:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10742:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10753:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10738:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10738:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "10762:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "10770:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "10758:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10758:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10731:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10731:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10731:43:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10794:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10805:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10790:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10790:18:8"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "10810:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10783:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10783:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10783:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10558:9:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10569:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10577:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10585:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10596:4:8",
														"type": ""
													}
												],
												"src": "10448:375:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10957:175:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10967:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10979:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10990:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10975:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10975:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10967:4:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11002:29:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11020:3:8",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11025:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11016:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11016:11:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11029:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "11012:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11012:19:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "11006:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11047:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "11062:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "11070:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "11058:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11058:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11040:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11040:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11040:34:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11094:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11105:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11090:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11090:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "11114:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "11122:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "11110:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11110:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11083:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11083:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11083:43:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10918:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10929:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10937:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10948:4:8",
														"type": ""
													}
												],
												"src": "10828:304:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11311:244:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11328:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11339:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11321:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11321:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11321:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11362:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11373:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11358:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11358:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11378:2:8",
																		"type": "",
																		"value": "54"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11351:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11351:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11351:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11401:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11412:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11397:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11397:18:8"
																	},
																	{
																		"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11417:34:8",
																		"type": "",
																		"value": "SafeERC20: approve from non-zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11390:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11390:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11390:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11472:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11483:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11468:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11468:18:8"
																	},
																	{
																		"hexValue": "20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11488:24:8",
																		"type": "",
																		"value": " to non-zero allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11461:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11461:52:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11461:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11522:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11534:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11545:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11530:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11530:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11522:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11288:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11302:4:8",
														"type": ""
													}
												],
												"src": "11137:418:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11689:145:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11699:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11711:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11722:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11707:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11707:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11699:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11741:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "11756:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "11772:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "11777:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "11768:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "11768:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "11781:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "11764:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11764:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "11752:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11752:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11734:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11734:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11734:51:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11805:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11816:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11801:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11801:18:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "11821:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11794:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11794:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11794:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11650:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11661:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11669:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11680:4:8",
														"type": ""
													}
												],
												"src": "11560:274:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11986:100:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12003:3:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12008:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11996:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11996:19:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11996:19:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "12035:3:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12040:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12031:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12031:12:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "12045:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12024:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12024:28:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12024:28:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12061:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12072:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12077:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12068:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12068:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "12061:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11954:3:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11959:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11967:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11978:3:8",
														"type": ""
													}
												],
												"src": "11839:247:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12236:135:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12253:3:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12258:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12246:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12246:19:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12246:19:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "12285:3:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12290:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12281:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12281:12:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "12299:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12311:3:8",
																						"type": "",
																						"value": "192"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "12316:18:8",
																						"type": "",
																						"value": "0xffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "12307:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "12307:28:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "12295:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12295:41:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12274:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12274:63:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12274:63:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12346:19:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "12357:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12362:2:8",
																		"type": "",
																		"value": "40"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12353:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12353:12:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "12346:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes32_t_bytes8__to_t_bytes32_t_bytes8__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "12204:3:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12209:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12217:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "12228:3:8",
														"type": ""
													}
												],
												"src": "12091:280:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12408:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12425:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12432:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12437:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "12428:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12428:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12418:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12418:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12418:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12465:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12468:4:8",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12458:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12458:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12458:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12489:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12492:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "12482:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12482:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12482:15:8"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "12376:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12555:88:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12586:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12588:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12588:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12588:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12571:5:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12582:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "12578:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12578:6:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "12568:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12568:17:8"
															},
															"nodeType": "YulIf",
															"src": "12565:43:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12617:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12628:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12635:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12624:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12624:13:8"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "12617:3:8"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12537:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "12547:3:8",
														"type": ""
													}
												],
												"src": "12508:135:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12680:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12697:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12704:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12709:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "12700:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12700:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12690:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12690:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12690:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12737:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12740:4:8",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12730:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12730:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12730:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12761:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12764:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "12754:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12754:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12754:15:8"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "12648:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12826:171:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12857:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12878:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "12885:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "12890:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "12881:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12881:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "12871:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12871:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12871:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12922:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12925:4:8",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "12915:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12915:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12915:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12950:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12953:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "12943:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12943:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12943:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12846:1:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "12839:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12839:9:8"
															},
															"nodeType": "YulIf",
															"src": "12836:132:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12977:14:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12986:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12989:1:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "12982:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "12982:9:8"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "12977:1:8"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "12811:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "12814:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "12820:1:8",
														"type": ""
													}
												],
												"src": "12780:217:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13051:79:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13061:17:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13073:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13076:1:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "13069:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13069:9:8"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "13061:4:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13102:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "13104:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13104:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13104:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "13093:4:8"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13099:1:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "13090:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13090:11:8"
															},
															"nodeType": "YulIf",
															"src": "13087:37:8"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "13033:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "13036:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "13042:4:8",
														"type": ""
													}
												],
												"src": "13002:128:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13187:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13246:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "13248:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13248:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13248:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "13218:1:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "13211:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13211:9:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "13204:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13204:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "13226:1:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13237:1:8",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "13233:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13233:6:8"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "13241:1:8"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "13229:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13229:14:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "13223:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13223:21:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "13200:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13200:45:8"
															},
															"nodeType": "YulIf",
															"src": "13197:71:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13277:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13292:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13295:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "13288:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13288:9:8"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "13277:7:8"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "13166:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "13169:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "13175:7:8",
														"type": ""
													}
												],
												"src": "13135:168:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13354:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13364:38:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "13379:1:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13382:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13375:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13375:12:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "13393:1:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13396:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13389:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13389:12:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13371:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13371:31:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "13364:3:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13428:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "13430:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13430:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13430:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "13417:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13422:4:8",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "13414:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13414:13:8"
															},
															"nodeType": "YulIf",
															"src": "13411:39:8"
														}
													]
												},
												"name": "checked_add_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "13337:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "13340:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "13346:3:8",
														"type": ""
													}
												],
												"src": "13308:148:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13493:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13510:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13517:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13522:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "13513:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13513:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13503:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13503:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13503:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13550:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13553:4:8",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13543:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13543:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13543:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13574:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13577:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "13567:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13567:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13567:15:8"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "13461:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13671:167:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13717:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13726:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "13729:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "13719:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13719:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13719:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "13692:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13701:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "13688:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13688:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13713:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "13684:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13684:32:8"
															},
															"nodeType": "YulIf",
															"src": "13681:52:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "13742:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13761:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "13755:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13755:16:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "13746:5:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "13802:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bool",
																	"nodeType": "YulIdentifier",
																	"src": "13780:21:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "13780:28:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13780:28:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13817:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "13827:5:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "13817:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13637:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "13648:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13660:6:8",
														"type": ""
													}
												],
												"src": "13593:245:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14017:232:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14034:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14045:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14027:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14027:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14027:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14068:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14079:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14064:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14064:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14084:2:8",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14057:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14057:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14057:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14107:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14118:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14103:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14103:18:8"
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14123:34:8",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14096:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14096:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14096:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14178:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14189:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14174:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14174:18:8"
																	},
																	{
																		"hexValue": "6f742073756363656564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14194:12:8",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14167:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14167:40:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14167:40:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14216:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14228:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14239:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14224:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14224:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14216:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13994:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14008:4:8",
														"type": ""
													}
												],
												"src": "13843:406:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14428:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14445:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14456:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14438:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14438:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14438:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14479:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14490:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14475:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14475:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14495:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14468:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14468:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14468:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14518:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14529:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14514:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14514:18:8"
																	},
																	{
																		"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14534:34:8",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14507:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14507:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14507:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14589:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14600:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14585:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14585:18:8"
																	},
																	{
																		"hexValue": "722063616c6c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14605:8:8",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14578:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14578:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14578:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14623:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14635:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14646:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14631:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14631:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14623:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14405:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14419:4:8",
														"type": ""
													}
												],
												"src": "14254:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14798:150:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "14808:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "14828:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "14822:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14822:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "14812:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "14883:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14891:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14879:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14879:17:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14898:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14903:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "14844:34:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14844:66:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14844:66:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14919:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "14930:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "14935:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14926:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "14926:16:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "14919:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "14774:3:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14779:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "14790:3:8",
														"type": ""
													}
												],
												"src": "14661:287:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15127:179:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15144:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15155:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15137:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15137:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15137:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15178:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15189:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15174:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15174:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15194:2:8",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15167:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15167:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15167:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15217:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15228:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15213:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15213:18:8"
																	},
																	{
																		"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15233:31:8",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15206:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15206:59:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15206:59:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15274:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15286:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15297:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15282:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "15282:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15274:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15104:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15118:4:8",
														"type": ""
													}
												],
												"src": "14953:353:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_bytes32t_string_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n        let value := calldataload(add(headStart, 64))\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value3 := value\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$77__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bool_t_string_memory_ptr__to_t_bool_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_string(value1, add(headStart, 64))\n    }\n    function abi_encode_tuple_t_contract$_OptimisticOracleV3Interface_$1421__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_bool(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_stringliteral_19c8(pos) -> end\n    {\n        mstore(pos, \" is not a deepfake.\")\n        end := add(pos, 19)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_b366c87696ed46c73efedbc9431665681599b5bf15784ed35a7688a33aacb678_t_string_calldata_ptr_t_stringliteral_bcf974f2119ba7d64309250380153894ac059dbe81f016cdcd5daec0a7737032_t_bytes_memory_ptr_t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf_t_bytes_memory_ptr_t_bytes_memory_ptr_t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49_t_bytes_memory_ptr_t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8_t_bytes_memory_ptr_t_stringliteral_19c8836c1ea35754620445faac202b424a0e6488620665649459ae40f269ae1b__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr_t_bytes_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value6, value5, value4, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, \"Image asserted at url: \")\n        calldatacopy(add(pos, 23), value0, value1)\n        let _1 := add(pos, value1)\n        mstore(add(_1, 23), \" for imageID: 0x\")\n        let length := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 0x20), add(_1, 39), length)\n        let _2 := add(_1, length)\n        mstore(add(_2, 39), \" and asserter: 0x\")\n        let length_1 := mload(value3)\n        copy_memory_to_memory_with_cleanup(add(value3, 0x20), add(_2, 56), length_1)\n        let _3 := add(_2, length_1)\n        let length_2 := mload(value4)\n        copy_memory_to_memory_with_cleanup(add(value4, 0x20), add(_3, 56), length_2)\n        let _4 := add(_3, length_2)\n        mstore(add(_4, 56), \" at timestamp: \")\n        let length_3 := mload(value5)\n        copy_memory_to_memory_with_cleanup(add(value5, 0x20), add(_4, 71), length_3)\n        let _5 := add(_4, length_3)\n        mstore(add(_5, 71), \" in the DataAsserter contract at\")\n        mstore(add(_5, 103), \" 0x\")\n        end := abi_encode_stringliteral_19c8(abi_encode_bytes(value6, add(_5, 106)))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_contract$_IERC20_$77_t_uint256_t_bytes32_t_bytes32__to_t_bytes_memory_ptr_t_address_t_address_t_address_t_uint64_t_address_t_uint256_t_bytes32_t_bytes32__fromStack_reversed(headStart, value8, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 288\n        mstore(headStart, _1)\n        tail := abi_encode_string(value0, add(headStart, _1))\n        let _2 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _2))\n        mstore(add(headStart, 64), and(value2, _2))\n        mstore(add(headStart, 96), and(value3, _2))\n        mstore(add(headStart, 128), and(value4, 0xffffffffffffffff))\n        mstore(add(headStart, 160), and(value5, _2))\n        mstore(add(headStart, 192), value6)\n        mstore(add(headStart, 224), value7)\n        mstore(add(headStart, 256), value8)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"SafeERC20: approve from non-zero\")\n        mstore(add(headStart, 96), \" to non-zero allowance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), value1)\n        end := add(pos, 64)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_bytes8__to_t_bytes32_t_bytes8__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(value1, shl(192, 0xffffffffffffffff)))\n        end := add(pos, 40)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_add_t_uint8(x, y) -> sum\n    {\n        sum := add(and(x, 0xff), and(y, 0xff))\n        if gt(sum, 0xff) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1433": [
									{
										"length": 32,
										"start": 184
									},
									{
										"length": 32,
										"start": 473
									},
									{
										"length": 32,
										"start": 641
									},
									{
										"length": 32,
										"start": 694
									},
									{
										"length": 32,
										"start": 932
									}
								],
								"1436": [
									{
										"length": 32,
										"start": 280
									},
									{
										"length": 32,
										"start": 519
									},
									{
										"length": 32,
										"start": 728
									},
									{
										"length": 32,
										"start": 767
									},
									{
										"length": 32,
										"start": 1582
									}
								],
								"1441": [
									{
										"length": 32,
										"start": 372
									},
									{
										"length": 32,
										"start": 968
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100885760003560e01c8063b75d4e241161005b578063b75d4e241461013a578063d448a4ec1461015c578063d509b0171461016f578063f1b156b21461019657600080fd5b8063096464cc1461008d57806320402e1d146100b35780636ced1ae9146100f25780638921a61414610113575b600080fd5b6100a061009b366004610f77565b6101a9565b6040519081526020015b60405180910390f35b6100da7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100aa565b610105610100366004611012565b61053f565b6040516100aa92919061107b565b6100da7f000000000000000000000000000000000000000000000000000000000000000081565b610143610e1081565b60405167ffffffffffffffff90911681526020016100aa565b61016d61016a366004611012565b50565b005b6100a07f000000000000000000000000000000000000000000000000000000000000000081565b61016d6101a43660046110a4565b610623565b60006001600160a01b038216156101c057816101c2565b335b604051634360af3d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529193506000917f00000000000000000000000000000000000000000000000000000000000000001690634360af3d90602401602060405180830381865afa15801561024e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027291906110d4565b90506102a96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846107d7565b6102fd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000083610848565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636457c97986866103378a610967565b610340886109a8565b610349896109a8565b610352426109ff565b61035b306109a8565b6040516020016103719796959493929190611109565b60408051601f19818403018152908290526001600160e01b031960e084901b1682526103f29187903090600090610e10907f0000000000000000000000000000000000000000000000000000000000000000908a907f0000000000000000000000000000000000000000000000000000000000000000908590600401611250565b6020604051808303816000875af1158015610411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043591906110d4565b9150604051806080016040528087815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b0386166020808401919091526040928301829052858252818152919020825181559082015160018201906104bb908261135c565b50604082810151600290920180546060909401511515600160a01b026001600160a81b03199094166001600160a01b0393841617939093179092559051839185169088907fb3b5c304bc1ba781ea735c86e786e9ae6432b86b469fbc00ec8bb252bf54eda89061052e908a908a9061141c565b60405180910390a450949350505050565b600081815260208190526040812060020154606090600160a01b900460ff1661057a5750506040805160208101909152600080825292909150565b600083815260208190526040902060019081018054819061059a906112d4565b80601f01602080910402602001604051908101604052809291908181526020018280546105c6906112d4565b80156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b5050505050905091509150915091565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461065857600080fd5b80156107a25760008281526020818152604080832060028101805460ff60a01b1916600160a01b1790558151608081019092528054825260018101805492939192918401916106a6906112d4565b80601f01602080910402602001604051908101604052809291908181526020018280546106d2906112d4565b801561071f5780601f106106f45761010080835404028352916020019161071f565b820191906000526020600020905b81548152906001019060200180831161070257829003601f168201915b5050509183525050600291909101546001600160a01b03808216602080850191909152600160a01b90920460ff16151560409384015283830151845192850151935194955087949116927f2cd47d03ca5eed86ed11475382af40bc0f2965dd65bc4ab337d45577ea5dfaf991610795919061144b565b60405180910390a4505050565b6000828152602081905260408120818155906107c16001830182610f29565b5060020180546001600160a81b03191690555050565b6040516001600160a01b03808516602483015283166044820152606481018290526108429085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610b2b565b50505050565b8015806108c25750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c091906110d4565b155b6109325760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084015b60405180910390fd5b6040516001600160a01b03831660248201526044810182905261096290849063095ea7b360e01b9060640161080b565b505050565b6060610976608083901c610c00565b61097f83610c00565b6040805160208101939093528201526060015b6040516020818303038152906040529050919050565b60606109c06001600160801b03602084901c16610c00565b6109db8360601b6bffffffffffffffffffffffff1916610c00565b6040516020016109929291909182526001600160c01b031916602082015260280190565b606081600003610a265750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610a505780610a3a8161147b565b9150610a499050600a836114aa565b9150610a2a565b60008167ffffffffffffffff811115610a6b57610a6b6112be565b6040519080825280601f01601f191660200182016040528015610a95576020820181803683370190505b509050815b8515610b2257610aab6001826114cc565b90506000610aba600a886114aa565b610ac590600a6114e5565b610acf90886114cc565b610ada906030611504565b905060008160f81b905080848481518110610af757610af761151d565b60200101906001600160f81b031916908160001a905350610b19600a896114aa565b97505050610a9a565b50949350505050565b6000610b80826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d999092919063ffffffff16565b9050805160001480610ba1575080806020019051810190610ba19190611533565b6109625760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610929565b6000808260001c9050806001600160801b03169050806801000000000000000002811777ffffffffffffffff0000000000000000ffffffffffffffff169050806401000000000281177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff16905080620100000281177dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff169050806101000281177eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff1690508060100281177f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f16905060006008827f08080808080808080808080808080808080808080808080808080808080808081681610d1b57610d1b611494565b0460047f040404040404040404040404040404040404040404040404040404040404040484160460027f020202020202020202020202020202020202020202020202020202020202020285160417166027029091017f3030303030303030303030303030303030303030303030303030303030303030019392505050565b6060610da88484600085610db0565b949350505050565b606082471015610e115760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610929565b600080866001600160a01b03168587604051610e2d9190611550565b60006040518083038185875af1925050503d8060008114610e6a576040519150601f19603f3d011682016040523d82523d6000602084013e610e6f565b606091505b5091509150610e8087838387610e8b565b979650505050505050565b60608315610efa578251600003610ef3576001600160a01b0385163b610ef35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610929565b5081610da8565b610da88383815115610f0f5781518083602001fd5b8060405162461bcd60e51b8152600401610929919061144b565b508054610f35906112d4565b6000825580601f10610f45575050565b601f01602090049060005260206000209081019061016a91905b80821115610f735760008155600101610f5f565b5090565b60008060008060608587031215610f8d57600080fd5b84359350602085013567ffffffffffffffff80821115610fac57600080fd5b818701915087601f830112610fc057600080fd5b813581811115610fcf57600080fd5b886020828501011115610fe157600080fd5b60209290920194509092505060408501356001600160a01b038116811461100757600080fd5b939692955090935050565b60006020828403121561102457600080fd5b5035919050565b60005b8381101561104657818101518382015260200161102e565b50506000910152565b6000815180845261106781602086016020860161102b565b601f01601f19169290920160200192915050565b8215158152604060208201526000610da8604083018461104f565b801515811461016a57600080fd5b600080604083850312156110b757600080fd5b8235915060208301356110c981611096565b809150509250929050565b6000602082840312156110e657600080fd5b5051919050565b600081516110ff81856020860161102b565b9290920192915050565b7f496d6167652061737365727465642061742075726c3a2000000000000000000081528688601783013760008782016f040ccdee440d2dac2ceca9288744060f60831b60178201528751611164816027840160208c0161102b565b70040c2dcc840c2e6e6cae4e8cae4744060f607b1b602792909101918201528651611196816038840160208b0161102b565b86519101906111ac816038840160208a0161102b565b6e01030ba103a34b6b2b9ba30b6b81d1608d1b6038929091019182015284516111dc81604784016020890161102b565b7f20696e207468652044617461417373657274657220636f6e7472616374206174604792909101918201526204060f60eb1b6067820152611242611223606a8301866110ed565b721034b9903737ba1030903232b2b83330b5b29760691b815260130190565b9a9950505050505050505050565b60006101208083526112648184018d61104f565b6001600160a01b039b8c166020850152998b1660408401525050958816606087015267ffffffffffffffff9490941660808601529190951660a084015260c083019490945260e08201939093526101000191909152919050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806112e857607f821691505b60208210810361130857634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561096257600081815260208120601f850160051c810160208610156113355750805b601f850160051c820191505b8181101561135457828155600101611341565b505050505050565b815167ffffffffffffffff811115611376576113766112be565b61138a8161138484546112d4565b8461130e565b602080601f8311600181146113bf57600084156113a75750858301515b600019600386901b1c1916600185901b178555611354565b600085815260208120601f198616915b828110156113ee578886015182559484019460019091019084016113cf565b508582101561140c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208152600061145e602083018461104f565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161148d5761148d611465565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826114c757634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156114df576114df611465565b92915050565b60008160001904831182151516156114ff576114ff611465565b500290565b60ff81811683821601908111156114df576114df611465565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561154557600080fd5b815161145e81611096565b6000825161156281846020870161102b565b919091019291505056fea264697066735822122022759d2ec01478f58482cfd77d95067e6904f299377122900a416de4b2e7c38464736f6c63430008100033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB75D4E24 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xB75D4E24 EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0xD448A4EC EQ PUSH2 0x15C JUMPI DUP1 PUSH4 0xD509B017 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0xF1B156B2 EQ PUSH2 0x196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x96464CC EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x20402E1D EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x6CED1AE9 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x8921A614 EQ PUSH2 0x113 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0xF77 JUMP JUMPDEST PUSH2 0x1A9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAA JUMP JUMPDEST PUSH2 0x105 PUSH2 0x100 CALLDATASIZE PUSH1 0x4 PUSH2 0x1012 JUMP JUMPDEST PUSH2 0x53F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP3 SWAP2 SWAP1 PUSH2 0x107B JUMP JUMPDEST PUSH2 0xDA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x143 PUSH2 0xE10 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAA JUMP JUMPDEST PUSH2 0x16D PUSH2 0x16A CALLDATASIZE PUSH1 0x4 PUSH2 0x1012 JUMP JUMPDEST POP JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x16D PUSH2 0x1A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x10A4 JUMP JUMPDEST PUSH2 0x623 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO PUSH2 0x1C0 JUMPI DUP2 PUSH2 0x1C2 JUMP JUMPDEST CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4360AF3D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP2 SWAP4 POP PUSH1 0x0 SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0x4360AF3D SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x24E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x272 SWAP2 SWAP1 PUSH2 0x10D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x2A9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND CALLER ADDRESS DUP5 PUSH2 0x7D7 JUMP JUMPDEST PUSH2 0x2FD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH32 0x0 DUP4 PUSH2 0x848 JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x6457C979 DUP7 DUP7 PUSH2 0x337 DUP11 PUSH2 0x967 JUMP JUMPDEST PUSH2 0x340 DUP9 PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x349 DUP10 PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x352 TIMESTAMP PUSH2 0x9FF JUMP JUMPDEST PUSH2 0x35B ADDRESS PUSH2 0x9A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x371 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1109 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP3 MSTORE PUSH2 0x3F2 SWAP2 DUP8 SWAP1 ADDRESS SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xE10 SWAP1 PUSH32 0x0 SWAP1 DUP11 SWAP1 PUSH32 0x0 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1250 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x411 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x435 SWAP2 SWAP1 PUSH2 0x10D4 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP3 DUP4 ADD DUP3 SWAP1 MSTORE DUP6 DUP3 MSTORE DUP2 DUP2 MSTORE SWAP2 SWAP1 KECCAK256 DUP3 MLOAD DUP2 SSTORE SWAP1 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SWAP1 PUSH2 0x4BB SWAP1 DUP3 PUSH2 0x135C JUMP JUMPDEST POP PUSH1 0x40 DUP3 DUP2 ADD MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 0x60 SWAP1 SWAP5 ADD MLOAD ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND OR SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SWAP1 MLOAD DUP4 SWAP2 DUP6 AND SWAP1 DUP9 SWAP1 PUSH32 0xB3B5C304BC1BA781EA735C86E786E9AE6432B86B469FBC00EC8BB252BF54EDA8 SWAP1 PUSH2 0x52E SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH2 0x141C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 ADD SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x57A JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 ADD DUP1 SLOAD DUP2 SWAP1 PUSH2 0x59A SWAP1 PUSH2 0x12D4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5C6 SWAP1 PUSH2 0x12D4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x613 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5E8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x613 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5F6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x658 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO PUSH2 0x7A2 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE DUP2 MLOAD PUSH1 0x80 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 MSTORE PUSH1 0x1 DUP2 ADD DUP1 SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH2 0x6A6 SWAP1 PUSH2 0x12D4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6D2 SWAP1 PUSH2 0x12D4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x71F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6F4 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x71F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x702 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x2 SWAP2 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP3 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x40 SWAP4 DUP5 ADD MSTORE DUP4 DUP4 ADD MLOAD DUP5 MLOAD SWAP3 DUP6 ADD MLOAD SWAP4 MLOAD SWAP5 SWAP6 POP DUP8 SWAP5 SWAP2 AND SWAP3 PUSH32 0x2CD47D03CA5EED86ED11475382AF40BC0F2965DD65BC4AB337D45577EA5DFAF9 SWAP2 PUSH2 0x795 SWAP2 SWAP1 PUSH2 0x144B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE SWAP1 PUSH2 0x7C1 PUSH1 0x1 DUP4 ADD DUP3 PUSH2 0xF29 JUMP JUMPDEST POP PUSH1 0x2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x842 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xB2B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x8C2 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x89C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8C0 SWAP2 SWAP1 PUSH2 0x10D4 JUMP JUMPDEST ISZERO JUMPDEST PUSH2 0x932 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x20746F206E6F6E2D7A65726F20616C6C6F77616E6365 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x962 SWAP1 DUP5 SWAP1 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD PUSH2 0x80B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x976 PUSH1 0x80 DUP4 SWAP1 SHR PUSH2 0xC00 JUMP JUMPDEST PUSH2 0x97F DUP4 PUSH2 0xC00 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP3 ADD MSTORE PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9C0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB PUSH1 0x20 DUP5 SWAP1 SHR AND PUSH2 0xC00 JUMP JUMPDEST PUSH2 0x9DB DUP4 PUSH1 0x60 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH2 0xC00 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x992 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x28 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 SUB PUSH2 0xA26 JUMPI POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0xA50 JUMPI DUP1 PUSH2 0xA3A DUP2 PUSH2 0x147B JUMP JUMPDEST SWAP2 POP PUSH2 0xA49 SWAP1 POP PUSH1 0xA DUP4 PUSH2 0x14AA JUMP JUMPDEST SWAP2 POP PUSH2 0xA2A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA6B JUMPI PUSH2 0xA6B PUSH2 0x12BE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA95 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 JUMPDEST DUP6 ISZERO PUSH2 0xB22 JUMPI PUSH2 0xAAB PUSH1 0x1 DUP3 PUSH2 0x14CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xABA PUSH1 0xA DUP9 PUSH2 0x14AA JUMP JUMPDEST PUSH2 0xAC5 SWAP1 PUSH1 0xA PUSH2 0x14E5 JUMP JUMPDEST PUSH2 0xACF SWAP1 DUP9 PUSH2 0x14CC JUMP JUMPDEST PUSH2 0xADA SWAP1 PUSH1 0x30 PUSH2 0x1504 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0xF8 SHL SWAP1 POP DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xAF7 JUMPI PUSH2 0xAF7 PUSH2 0x151D JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0xB19 PUSH1 0xA DUP10 PUSH2 0x14AA JUMP JUMPDEST SWAP8 POP POP POP PUSH2 0xA9A JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB80 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xD99 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0xBA1 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xBA1 SWAP2 SWAP1 PUSH2 0x1533 JUMP JUMPDEST PUSH2 0x962 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x929 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x0 SHR SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 POP DUP1 PUSH9 0x10000000000000000 MUL DUP2 OR PUSH24 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH5 0x100000000 MUL DUP2 OR PUSH28 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF AND SWAP1 POP DUP1 PUSH3 0x10000 MUL DUP2 OR PUSH30 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF AND SWAP1 POP DUP1 PUSH2 0x100 MUL DUP2 OR PUSH31 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF AND SWAP1 POP DUP1 PUSH1 0x10 MUL DUP2 OR PUSH32 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F AND SWAP1 POP PUSH1 0x0 PUSH1 0x8 DUP3 PUSH32 0x808080808080808080808080808080808080808080808080808080808080808 AND DUP2 PUSH2 0xD1B JUMPI PUSH2 0xD1B PUSH2 0x1494 JUMP JUMPDEST DIV PUSH1 0x4 PUSH32 0x404040404040404040404040404040404040404040404040404040404040404 DUP5 AND DIV PUSH1 0x2 PUSH32 0x202020202020202020202020202020202020202020202020202020202020202 DUP6 AND DIV OR AND PUSH1 0x27 MUL SWAP1 SWAP2 ADD PUSH32 0x3030303030303030303030303030303030303030303030303030303030303030 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xDA8 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xDB0 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xE11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x929 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xE2D SWAP2 SWAP1 PUSH2 0x1550 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE6A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xE80 DUP8 DUP4 DUP4 DUP8 PUSH2 0xE8B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xEFA JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0xEF3 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0xEF3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x929 JUMP JUMPDEST POP DUP2 PUSH2 0xDA8 JUMP JUMPDEST PUSH2 0xDA8 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0xF0F JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x929 SWAP2 SWAP1 PUSH2 0x144B JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0xF35 SWAP1 PUSH2 0x12D4 JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0xF45 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16A SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xF73 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xF5F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xFAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xFCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xFE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP5 POP SWAP1 SWAP3 POP POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1007 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1024 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1046 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x102E JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1067 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x102B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xDA8 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x104F JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x16A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x10C9 DUP2 PUSH2 0x1096 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH2 0x10FF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x102B JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x496D6167652061737365727465642061742075726C3A20000000000000000000 DUP2 MSTORE DUP7 DUP9 PUSH1 0x17 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP8 DUP3 ADD PUSH16 0x40CCDEE440D2DAC2CECA9288744060F PUSH1 0x83 SHL PUSH1 0x17 DUP3 ADD MSTORE DUP8 MLOAD PUSH2 0x1164 DUP2 PUSH1 0x27 DUP5 ADD PUSH1 0x20 DUP13 ADD PUSH2 0x102B JUMP JUMPDEST PUSH17 0x40C2DCC840C2E6E6CAE4E8CAE4744060F PUSH1 0x7B SHL PUSH1 0x27 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP7 MLOAD PUSH2 0x1196 DUP2 PUSH1 0x38 DUP5 ADD PUSH1 0x20 DUP12 ADD PUSH2 0x102B JUMP JUMPDEST DUP7 MLOAD SWAP2 ADD SWAP1 PUSH2 0x11AC DUP2 PUSH1 0x38 DUP5 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x102B JUMP JUMPDEST PUSH15 0x1030BA103A34B6B2B9BA30B6B81D1 PUSH1 0x8D SHL PUSH1 0x38 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE DUP5 MLOAD PUSH2 0x11DC DUP2 PUSH1 0x47 DUP5 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x102B JUMP JUMPDEST PUSH32 0x20696E207468652044617461417373657274657220636F6E7472616374206174 PUSH1 0x47 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH3 0x4060F PUSH1 0xEB SHL PUSH1 0x67 DUP3 ADD MSTORE PUSH2 0x1242 PUSH2 0x1223 PUSH1 0x6A DUP4 ADD DUP7 PUSH2 0x10ED JUMP JUMPDEST PUSH19 0x1034B9903737BA1030903232B2B83330B5B297 PUSH1 0x69 SHL DUP2 MSTORE PUSH1 0x13 ADD SWAP1 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x120 DUP1 DUP4 MSTORE PUSH2 0x1264 DUP2 DUP5 ADD DUP14 PUSH2 0x104F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP12 DUP13 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP10 DUP12 AND PUSH1 0x40 DUP5 ADD MSTORE POP POP SWAP6 DUP9 AND PUSH1 0x60 DUP8 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND PUSH1 0x80 DUP7 ADD MSTORE SWAP2 SWAP1 SWAP6 AND PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xC0 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xE0 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x100 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x12E8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1308 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x962 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x1335 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1354 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1341 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1376 JUMPI PUSH2 0x1376 PUSH2 0x12BE JUMP JUMPDEST PUSH2 0x138A DUP2 PUSH2 0x1384 DUP5 SLOAD PUSH2 0x12D4 JUMP JUMPDEST DUP5 PUSH2 0x130E JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x13BF JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x13A7 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x1354 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x13EE JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x13CF JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x140C JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x145E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x104F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x148D JUMPI PUSH2 0x148D PUSH2 0x1465 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14C7 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x14DF JUMPI PUSH2 0x14DF PUSH2 0x1465 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x14FF JUMPI PUSH2 0x14FF PUSH2 0x1465 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0xFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0x14DF JUMPI PUSH2 0x14DF PUSH2 0x1465 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1545 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x145E DUP2 PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1562 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x102B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 PUSH22 0x9D2EC01478F58482CFD77D95067E6904F29937712290 EXP COINBASE PUSH14 0xE4B2E7C38464736F6C6343000810 STOP CALLER ",
							"sourceMap": "298:4124:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1945:1496;;;;;;:::i;:::-;;:::i;:::-;;;999:25:8;;;987:2;972:18;1945:1496:7;;;;;;;;362:39;;;;;;;;-1:-1:-1;;;;;1212:32:8;;;1194:51;;1182:2;1167:18;362:39:7;1035:216:8;1703:236:7;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;408:47::-;;;;;461;;504:4;461:47;;;;;2696:18:8;2684:31;;;2666:50;;2654:2;2639:18;461:47:7;2522:200:8;4355:65:7;;;;;;:::i;:::-;;;;;514:42;;;;;3491:667;;;;;;:::i;:::-;;:::i;1945:1496::-;2075:19;-1:-1:-1;;;;;2117:22:7;;;:46;;2155:8;2117:46;;;2142:10;2117:46;2188:43;;-1:-1:-1;;;2188:43:7;;-1:-1:-1;;;;;2214:15:7;1212:32:8;;2188:43:7;;;1194:51:8;2106:57:7;;-1:-1:-1;;;2188:2:7;:17;;;;1167:18:8;;2188:43:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2173:58;-1:-1:-1;2241:65:7;-1:-1:-1;;;;;2241:15:7;:32;2274:10;2294:4;2173:58;2241:32;:65::i;:::-;2316:46;-1:-1:-1;;;;;2316:15:7;:27;2352:2;2357:4;2316:27;:46::i;:::-;2387:2;-1:-1:-1;;;;;2387:14:7;;2492:8;;2554:30;2576:7;2554:21;:30::i;:::-;2639:38;2668:8;2639:28;:38::i;:::-;2695;2724:8;2695:28;:38::i;:::-;2786:42;2812:15;2786:25;:42::i;:::-;2901:43;2938:4;2901:28;:43::i;:::-;2415:582;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2415:582:7;;;;;;;;;;-1:-1:-1;;;;;;2387:826:7;;;;;;;;;3011:8;;3041:4;;3068:1;;504:4;;3115:15;;3144:4;;3162:17;;3068:1;;2387:826;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2373:840;;3255:108;;;;;;;;3283:7;3255:108;;;;3304:8;;3255:108;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3255:108:7;;;-1:-1:-1;;;;;;;;3255:108:7;;;;;;;;;;;;;;;;;3224:28;;;;;;;;;:139;;;;;;;;3255:108;3224:139;;;;;;;:::i;:::-;-1:-1:-1;3224:139:7;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3224:139:7;-1:-1:-1;;;;;;3224:139:7;;;-1:-1:-1;;;;;3224:139:7;;;;;;;;;;;3379:55;;3422:11;;3379:55;;;3393:7;;3379:55;;;;3402:8;;;;3379:55;:::i;:::-;;;;;;;;2096:1345;1945:1496;;;;;;:::o;1703:236::-;1777:4;1813:28;;;;;;;;;;:37;;;1783:13;;-1:-1:-1;;;1813:37:7;;;;1808:62;;-1:-1:-1;;1852:18:7;;;;;;;;;1860:5;1852:18;;;1860:5;1852:18;;-1:-1:-1;1703:236:7:o;1808:62::-;1894:15;:28;;;;;;;;;;1888:4;1894:37;;;1880:52;;1894:37;;1880:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1703:236;;;:::o;3491:667::-;3619:10;-1:-1:-1;;;;;3641:2:7;3619:25;;3611:34;;;;;;3734:18;3730:421;;;3768:15;:28;;;;;;;;;;;:37;;;:44;;-1:-1:-1;;;;3768:44:7;-1:-1:-1;;;3768:44:7;;;3826:67;;;;;;;;;;;;3808:4;3826:67;;;;;;3768:28;;3826:67;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3826:67:7;;;-1:-1:-1;;3826:67:7;;;;;;-1:-1:-1;;;;;3826:67:7;;;;;;;;;;;-1:-1:-1;;;3826:67:7;;;;;;;;;;;;4033:23;;;;3952:22;;3992:23;;;;3912:187;;4033:23;;-1:-1:-1;4074:11:7;;3912:187;;;;;;;3992:23;3912:187;:::i;:::-;;;;;;;;3754:356;3491:667;;:::o;3730:421::-;4123:15;:28;;;;;;;;;;4116:35;;;4123:28;4116:35;;;;4123:15;4116:35;:::i;:::-;-1:-1:-1;4116:35:7;;;;-1:-1:-1;;;;;;4116:35:7;;;3491:667;;:::o;1355:203:2:-;1482:68;;-1:-1:-1;;;;;10706:15:8;;;1482:68:2;;;10688:34:8;10758:15;;10738:18;;;10731:43;10790:18;;;10783:34;;;1455:96:2;;1475:5;;-1:-1:-1;;;1505:27:2;10623:18:8;;1482:68:2;;;;-1:-1:-1;;1482:68:2;;;;;;;;;;;;;;-1:-1:-1;;;;;1482:68:2;-1:-1:-1;;;;;;1482:68:2;;;;;;;;;;1455:19;:96::i;:::-;1355:203;;;;:::o;1818:573::-;2143:10;;;2142:62;;-1:-1:-1;2159:39:2;;-1:-1:-1;;;2159:39:2;;2183:4;2159:39;;;11040:34:8;-1:-1:-1;;;;;11110:15:8;;;11090:18;;;11083:43;2159:15:2;;;;;10975:18:8;;2159:39:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;2142:62;2121:163;;;;-1:-1:-1;;;2121:163:2;;11339:2:8;2121:163:2;;;11321:21:8;11378:2;11358:18;;;11351:30;11417:34;11397:18;;;11390:62;-1:-1:-1;;;11468:18:8;;;11461:52;11530:19;;2121:163:2;;;;;;;;;2321:62;;-1:-1:-1;;;;;11752:32:8;;2321:62:2;;;11734:51:8;11801:18;;;11794:34;;;2294:90:2;;2314:5;;-1:-1:-1;;;2344:22:2;11707:18:8;;2321:62:2;11560:274:8;2294:90:2;1818:573;;;:::o;2586:182:4:-;2647:12;2695:35;2726:3;2715:7;:14;;2695:19;:35::i;:::-;2732:28;2752:7;2732:19;:28::i;:::-;2678:83;;;;;;11996:19:8;;;;12031:12;;12024:28;12068:12;;2678:83:4;;;;;;;;;;;;;2671:90;;2586:182;;;:::o;3145:218::-;3207:12;3267:47;-1:-1:-1;;;;;3287:26:4;;;;;3267:19;:47::i;:::-;3323:31;3351:1;3343:10;;3323:31;;;:19;:31::i;:::-;3250:106;;;;;;;;12246:19:8;;;-1:-1:-1;;;;;;12295:41:8;12290:2;12281:12;;12274:63;12362:2;12353:12;;12091:280;3569:546:4;3628:12;3656:1;3661;3656:6;3652:47;;-1:-1:-1;;3678:10:4;;;;;;;;;;;;-1:-1:-1;;;3678:10:4;;;;;3569:546::o;3652:47::-;3720:1;3708:9;3752:66;3759:6;;3752:66;;3781:5;;;;:::i;:::-;;-1:-1:-1;3800:7:4;;-1:-1:-1;3805:2:4;3800:7;;:::i;:::-;;;3752:66;;;3827:17;3857:3;3847:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3847:14:4;-1:-1:-1;3827:34:4;-1:-1:-1;3883:3:4;3896:192;3903:6;;3896:192;;3929:5;3933:1;3929;:5;:::i;:::-;3925:9;-1:-1:-1;3948:10:4;3978:6;3982:2;3978:1;:6;:::i;:::-;3977:13;;3988:2;3977:13;:::i;:::-;3973:17;;:1;:17;:::i;:::-;3962:29;;:2;:29;:::i;:::-;3948:44;;4006:9;4025:4;4018:12;;4006:24;;4054:2;4044:4;4049:1;4044:7;;;;;;;;:::i;:::-;;;;:12;-1:-1:-1;;;;;4044:12:4;;;;;;;;-1:-1:-1;4070:7:4;4075:2;4070:7;;:::i;:::-;;;3911:177;;3896:192;;;-1:-1:-1;4104:4:4;3569:546;-1:-1:-1;;;;3569:546:4:o;5173:642:2:-;5592:23;5618:69;5646:4;5618:69;;;;;;;;;;;;;;;;;5626:5;-1:-1:-1;;;;;5618:27:2;;;:69;;;;;:::i;:::-;5592:95;;5705:10;:17;5726:1;5705:22;:56;;;;5742:10;5731:30;;;;;;;;;;;;:::i;:::-;5697:111;;;;-1:-1:-1;;;5697:111:2;;14045:2:8;5697:111:2;;;14027:21:8;14084:2;14064:18;;;14057:30;14123:34;14103:18;;;14096:62;-1:-1:-1;;;14174:18:8;;;14167:40;14224:19;;5697:111:2;13843:406:8;897:1306:4;965:7;1008:9;1028:7;1020:16;;1008:28;;1088:1;-1:-1:-1;;;;;1088:70:4;1084:74;;1182:1;1186:5;1182:9;1177:1;:15;1196:66;1176:86;1172:90;;1286:1;1290:5;1286:9;1281:1;:15;1300:66;1280:86;1276:90;;1390:1;1394:5;1390:9;1385:1;:15;1404:66;1384:86;1380:90;;1494:1;1498:4;1494:8;1489:1;:14;1507:66;1488:85;1484:89;;1597:1;1601:4;1597:8;1592:1;:14;1610:66;1591:85;1587:89;;1717:9;1804:1;1730;1734:66;1730:70;1729:76;;;;;:::i;:::-;;1906:1;1836:66;1832:70;;1831:76;2008:1;1938:66;1934:70;;1933:76;2037:5;2032:11;2047:4;2031:20;2027:24;;;2054:66;2027:93;;;-1:-1:-1;;;897:1306:4:o;4108:223:3:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:3:o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;-1:-1:-1;;;5354:81:3;;14456:2:8;5354:81:3;;;14438:21:8;14495:2;14475:18;;;14468:30;14534:34;14514:18;;;14507:62;-1:-1:-1;;;14585:18:8;;;14578:36;14631:19;;5354:81:3;14254:402:8;5354:81:3;5446:12;5460:23;5487:6;-1:-1:-1;;;;;5487:11:3;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:3:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;-1:-1:-1;;;;;1702:19:3;;;8113:60;;;;-1:-1:-1;;;8113:60:3;;15155:2:8;8113:60:3;;;15137:21:8;15194:2;15174:18;;;15167:30;15233:31;15213:18;;;15206:59;15282:18;;8113:60:3;14953:353:8;8113:60:3;-1:-1:-1;8208:10:3;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;-1:-1:-1;;;9324:20:3;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:834:8:-;103:6;111;119;127;180:2;168:9;159:7;155:23;151:32;148:52;;;196:1;193;186:12;148:52;232:9;219:23;209:33;;293:2;282:9;278:18;265:32;316:18;357:2;349:6;346:14;343:34;;;373:1;370;363:12;343:34;411:6;400:9;396:22;386:32;;456:7;449:4;445:2;441:13;437:27;427:55;;478:1;475;468:12;427:55;518:2;505:16;544:2;536:6;533:14;530:34;;;560:1;557;550:12;530:34;605:7;600:2;591:6;587:2;583:15;579:24;576:37;573:57;;;626:1;623;616:12;573:57;657:2;649:11;;;;;-1:-1:-1;679:6:8;;-1:-1:-1;;735:2:8;720:18;;707:32;-1:-1:-1;;;;;768:31:8;;758:42;;748:70;;814:1;811;804:12;748:70;14:834;;;;-1:-1:-1;14:834:8;;-1:-1:-1;;14:834:8:o;1256:180::-;1315:6;1368:2;1356:9;1347:7;1343:23;1339:32;1336:52;;;1384:1;1381;1374:12;1336:52;-1:-1:-1;1407:23:8;;1256:180;-1:-1:-1;1256:180:8:o;1441:250::-;1526:1;1536:113;1550:6;1547:1;1544:13;1536:113;;;1626:11;;;1620:18;1607:11;;;1600:39;1572:2;1565:10;1536:113;;;-1:-1:-1;;1683:1:8;1665:16;;1658:27;1441:250::o;1696:271::-;1738:3;1776:5;1770:12;1803:6;1798:3;1791:19;1819:76;1888:6;1881:4;1876:3;1872:14;1865:4;1858:5;1854:16;1819:76;:::i;:::-;1949:2;1928:15;-1:-1:-1;;1924:29:8;1915:39;;;;1956:4;1911:50;;1696:271;-1:-1:-1;;1696:271:8:o;1972:301::-;2157:6;2150:14;2143:22;2132:9;2125:41;2202:2;2197;2186:9;2182:18;2175:30;2106:4;2222:45;2263:2;2252:9;2248:18;2240:6;2222:45;:::i;2727:118::-;2813:5;2806:13;2799:21;2792:5;2789:32;2779:60;;2835:1;2832;2825:12;2850:309;2915:6;2923;2976:2;2964:9;2955:7;2951:23;2947:32;2944:52;;;2992:1;2989;2982:12;2944:52;3028:9;3015:23;3005:33;;3088:2;3077:9;3073:18;3060:32;3101:28;3123:5;3101:28;:::i;:::-;3148:5;3138:15;;;2850:309;;;;;:::o;3372:184::-;3442:6;3495:2;3483:9;3474:7;3470:23;3466:32;3463:52;;;3511:1;3508;3501:12;3463:52;-1:-1:-1;3534:16:8;;3372:184;-1:-1:-1;3372:184:8:o;3561:197::-;3602:3;3640:5;3634:12;3655:65;3713:6;3708:3;3701:4;3694:5;3690:16;3655:65;:::i;:::-;3736:16;;;;;3561:197;-1:-1:-1;;3561:197:8:o;3901:2084::-;4908:25;4903:3;4896:38;4978:6;4970;4965:2;4960:3;4956:12;4943:42;4878:3;5013:6;5008:3;5004:16;-1:-1:-1;;;5044:2:8;5040;5036:11;5029:39;5097:6;5091:13;5113:74;5180:6;5175:2;5171;5167:11;5160:4;5152:6;5148:17;5113:74;:::i;:::-;-1:-1:-1;;;5245:2:8;5206:15;;;;5237:11;;;5230:40;5295:13;;5317:76;5295:13;5379:2;5371:11;;5364:4;5352:17;;5317:76;:::i;:::-;5454:13;;5412:17;;;5476:76;5454:13;5538:2;5530:11;;5523:4;5511:17;;5476:76;:::i;:::-;-1:-1:-1;;;5612:2:8;5571:17;;;;5604:11;;;5597:38;5660:13;;5682:76;5660:13;5744:2;5736:11;;5729:4;5717:17;;5682:76;:::i;:::-;5823:34;5818:2;5777:17;;;;5810:11;;;5803:55;-1:-1:-1;;;5882:3:8;5874:12;;5867:27;5910:69;5940:38;5973:3;5965:12;;5957:6;5940:38;:::i;:::-;-1:-1:-1;;;3828:34:8;;3887:2;3878:12;;3763:133;5910:69;5903:76;3901:2084;-1:-1:-1;;;;;;;;;;3901:2084:8:o;5990:923::-;6335:4;6364:3;6394:2;6383:9;6376:21;6414:45;6455:2;6444:9;6440:18;6432:6;6414:45;:::i;:::-;-1:-1:-1;;;;;6533:15:8;;;6528:2;6513:18;;6506:43;6585:15;;;6580:2;6565:18;;6558:43;-1:-1:-1;;6637:15:8;;;6632:2;6617:18;;6610:43;6702:18;6690:31;;;;6684:3;6669:19;;6662:60;6759:15;;;;6486:3;6738:19;;6731:44;6806:3;6791:19;;6784:35;;;;6850:3;6835:19;;6828:35;;;;6894:3;6879:19;6872:35;;;;6406:53;5990:923;-1:-1:-1;5990:923:8:o;7107:127::-;7168:10;7163:3;7159:20;7156:1;7149:31;7199:4;7196:1;7189:15;7223:4;7220:1;7213:15;7239:380;7318:1;7314:12;;;;7361;;;7382:61;;7436:4;7428:6;7424:17;7414:27;;7382:61;7489:2;7481:6;7478:14;7458:18;7455:38;7452:161;;7535:10;7530:3;7526:20;7523:1;7516:31;7570:4;7567:1;7560:15;7598:4;7595:1;7588:15;7452:161;;7239:380;;;:::o;7750:545::-;7852:2;7847:3;7844:11;7841:448;;;7888:1;7913:5;7909:2;7902:17;7958:4;7954:2;7944:19;8028:2;8016:10;8012:19;8009:1;8005:27;7999:4;7995:38;8064:4;8052:10;8049:20;8046:47;;;-1:-1:-1;8087:4:8;8046:47;8142:2;8137:3;8133:12;8130:1;8126:20;8120:4;8116:31;8106:41;;8197:82;8215:2;8208:5;8205:13;8197:82;;;8260:17;;;8241:1;8230:13;8197:82;;;8201:3;;;7750:545;;;:::o;8471:1352::-;8597:3;8591:10;8624:18;8616:6;8613:30;8610:56;;;8646:18;;:::i;:::-;8675:97;8765:6;8725:38;8757:4;8751:11;8725:38;:::i;:::-;8719:4;8675:97;:::i;:::-;8827:4;;8891:2;8880:14;;8908:1;8903:663;;;;9610:1;9627:6;9624:89;;;-1:-1:-1;9679:19:8;;;9673:26;9624:89;-1:-1:-1;;8428:1:8;8424:11;;;8420:24;8416:29;8406:40;8452:1;8448:11;;;8403:57;9726:81;;8873:944;;8903:663;7697:1;7690:14;;;7734:4;7721:18;;-1:-1:-1;;8939:20:8;;;9057:236;9071:7;9068:1;9065:14;9057:236;;;9160:19;;;9154:26;9139:42;;9252:27;;;;9220:1;9208:14;;;;9087:19;;9057:236;;;9061:3;9321:6;9312:7;9309:19;9306:201;;;9382:19;;;9376:26;-1:-1:-1;;9465:1:8;9461:14;;;9477:3;9457:24;9453:37;9449:42;9434:58;9419:74;;9306:201;-1:-1:-1;;;;;9553:1:8;9537:14;;;9533:22;9520:36;;-1:-1:-1;8471:1352:8:o;9828:390::-;9987:2;9976:9;9969:21;10026:6;10021:2;10010:9;10006:18;9999:34;10083:6;10075;10070:2;10059:9;10055:18;10042:48;10139:1;10110:22;;;10134:2;10106:31;;;10099:42;;;;10202:2;10181:15;;;-1:-1:-1;;10177:29:8;10162:45;10158:54;;9828:390;-1:-1:-1;9828:390:8:o;10223:220::-;10372:2;10361:9;10354:21;10335:4;10392:45;10433:2;10422:9;10418:18;10410:6;10392:45;:::i;:::-;10384:53;10223:220;-1:-1:-1;;;10223:220:8:o;12376:127::-;12437:10;12432:3;12428:20;12425:1;12418:31;12468:4;12465:1;12458:15;12492:4;12489:1;12482:15;12508:135;12547:3;12568:17;;;12565:43;;12588:18;;:::i;:::-;-1:-1:-1;12635:1:8;12624:13;;12508:135::o;12648:127::-;12709:10;12704:3;12700:20;12697:1;12690:31;12740:4;12737:1;12730:15;12764:4;12761:1;12754:15;12780:217;12820:1;12846;12836:132;;12890:10;12885:3;12881:20;12878:1;12871:31;12925:4;12922:1;12915:15;12953:4;12950:1;12943:15;12836:132;-1:-1:-1;12982:9:8;;12780:217::o;13002:128::-;13069:9;;;13090:11;;;13087:37;;;13104:18;;:::i;:::-;13002:128;;;;:::o;13135:168::-;13175:7;13241:1;13237;13233:6;13229:14;13226:1;13223:21;13218:1;13211:9;13204:17;13200:45;13197:71;;;13248:18;;:::i;:::-;-1:-1:-1;13288:9:8;;13135:168::o;13308:148::-;13396:4;13375:12;;;13389;;;13371:31;;13414:13;;13411:39;;;13430:18;;:::i;13461:127::-;13522:10;13517:3;13513:20;13510:1;13503:31;13553:4;13550:1;13543:15;13577:4;13574:1;13567:15;13593:245;13660:6;13713:2;13701:9;13692:7;13688:23;13684:32;13681:52;;;13729:1;13726;13719:12;13681:52;13761:9;13755:16;13780:28;13802:5;13780:28;:::i;14661:287::-;14790:3;14828:6;14822:13;14844:66;14903:6;14898:3;14891:4;14883:6;14879:17;14844:66;:::i;:::-;14926:16;;;;;14661:287;-1:-1:-1;;14661:287:8:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1107600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"assertDataFor(bytes32,string,address)": "infinite",
								"assertionDisputedCallback(bytes32)": "233",
								"assertionLiveness()": "204",
								"assertionResolvedCallback(bytes32,bool)": "infinite",
								"defaultCurrency()": "infinite",
								"defaultIdentifier()": "infinite",
								"getImage(bytes32)": "infinite",
								"oo()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH",
									"source": 7,
									"value": "E0"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1287,
									"end": 1582,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 1287,
									"end": 1582,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1287,
									"end": 1582,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 1287,
									"end": 1582,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1287,
									"end": 1582,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 1287,
									"end": 1582,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1287,
									"end": 1582,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1287,
									"end": 1582,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 1287,
									"end": 1582,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1287,
									"end": 1582,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1336,
									"end": 1378,
									"name": "PUSH",
									"source": 7,
									"value": "7865C6E87B9F70255377E024ACE6630C1EAA37F"
								},
								{
									"begin": 1311,
									"end": 1379,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 1311,
									"end": 1379,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1453,
									"end": 1495,
									"name": "PUSH",
									"source": 7,
									"value": "9923D42EF695B5DD9911D05AC944D4CACA3C4EAB"
								},
								{
									"begin": 1407,
									"end": 1505,
									"name": "PUSH",
									"source": 7,
									"value": "A0"
								},
								{
									"begin": 1407,
									"end": 1505,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1407,
									"end": 1505,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1407,
									"end": 1505,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "D509B017"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1573,
									"name": "PUSH",
									"source": 7,
									"value": "D509B017"
								},
								{
									"begin": 1553,
									"end": 1573,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1453,
									"end": 1495,
									"name": "DUP7",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "GAS",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "STATICCALL",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "5"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "RETURNDATASIZE",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "RETURNDATACOPY",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "RETURNDATASIZE",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "tag",
									"source": 7,
									"value": "5"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "RETURNDATASIZE",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH",
									"source": 7,
									"value": "1F"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "NOT",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH",
									"source": 7,
									"value": "1F"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "7"
								},
								{
									"begin": 1553,
									"end": 1575,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "tag",
									"source": 7,
									"value": "6"
								},
								{
									"begin": 1553,
									"end": 1575,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1533,
									"end": 1575,
									"name": "PUSH",
									"source": 7,
									"value": "C0"
								},
								{
									"begin": 1533,
									"end": 1575,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "9"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 14,
									"end": 198,
									"name": "tag",
									"source": 8,
									"value": "7"
								},
								{
									"begin": 14,
									"end": 198,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "11"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 8,
									"value": "11"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 176,
									"end": 192,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 176,
									"end": 192,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 14,
									"end": 198,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 198,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 14,
									"end": 198,
									"name": "tag",
									"source": 8,
									"value": "9"
								},
								{
									"begin": 14,
									"end": 198,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH",
									"source": 7,
									"value": "A0"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH",
									"source": 7,
									"value": "C0"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "ASSIGNIMMUTABLE",
									"source": 7,
									"value": "1441"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "ASSIGNIMMUTABLE",
									"source": 7,
									"value": "1436"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "ASSIGNIMMUTABLE",
									"source": 7,
									"value": "1433"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 298,
									"end": 4422,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122022759d2ec01478f58482cfd77d95067e6904f299377122900a416de4b2e7c38464736f6c63430008100033",
									".code": [
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "B75D4E24"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "B75D4E24"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "D448A4EC"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "D509B017"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "F1B156B2"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "tag",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "96464CC"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "20402E1D"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "6CED1AE9"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "8921A614"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 298,
											"end": 4422,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1945,
											"end": 3441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "tag",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 1945,
											"end": 3441,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 999,
											"end": 1024,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 999,
											"end": 1024,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 999,
											"end": 1024,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 987,
											"end": 989,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 972,
											"end": 990,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "tag",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 362,
											"end": 401,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 362,
											"end": 401,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 362,
											"end": 401,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 362,
											"end": 401,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1433"
										},
										{
											"begin": 362,
											"end": 401,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 362,
											"end": 401,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 362,
											"end": 401,
											"name": "tag",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 362,
											"end": 401,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 362,
											"end": 401,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 362,
											"end": 401,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1212,
											"end": 1244,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1212,
											"end": 1244,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1212,
											"end": 1244,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1194,
											"end": 1245,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1194,
											"end": 1245,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1182,
											"end": 1184,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1167,
											"end": 1185,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 362,
											"end": 401,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 1035,
											"end": 1251,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1703,
											"end": 1939,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "tag",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 1703,
											"end": 1939,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 1703,
											"end": 1939,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 408,
											"end": 455,
											"name": "tag",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 408,
											"end": 455,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 408,
											"end": 455,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 408,
											"end": 455,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1436"
										},
										{
											"begin": 408,
											"end": 455,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 408,
											"end": 455,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 461,
											"end": 508,
											"name": "tag",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 461,
											"end": 508,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 461,
											"end": 508,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 504,
											"end": 508,
											"name": "PUSH",
											"source": 7,
											"value": "E10"
										},
										{
											"begin": 461,
											"end": 508,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 461,
											"end": 508,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 461,
											"end": 508,
											"name": "tag",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 461,
											"end": 508,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 461,
											"end": 508,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 461,
											"end": 508,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2696,
											"end": 2714,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2684,
											"end": 2715,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2684,
											"end": 2715,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2684,
											"end": 2715,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2666,
											"end": 2716,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2666,
											"end": 2716,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2654,
											"end": 2656,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2639,
											"end": 2657,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 461,
											"end": 508,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 2522,
											"end": 2722,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4355,
											"end": 4420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "tag",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "tag",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4355,
											"end": 4420,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 514,
											"end": 556,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 514,
											"end": 556,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 514,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 514,
											"end": 556,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1441"
										},
										{
											"begin": 514,
											"end": 556,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 514,
											"end": 556,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3491,
											"end": 4158,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "tag",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 3491,
											"end": 4158,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2075,
											"end": 2094,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2117,
											"end": 2139,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2117,
											"end": 2139,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2117,
											"end": 2139,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2117,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 2117,
											"end": 2163,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2155,
											"end": 2163,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2117,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 2117,
											"end": 2163,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2117,
											"end": 2163,
											"name": "tag",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 2117,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2142,
											"end": 2152,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 2117,
											"end": 2163,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 2117,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4360AF3D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2214,
											"end": 2229,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1433"
										},
										{
											"begin": 1212,
											"end": 1244,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1212,
											"end": 1244,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1194,
											"end": 1245,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2106,
											"end": 2163,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2106,
											"end": 2163,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": 2188,
											"end": 2190,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1436"
										},
										{
											"begin": 2188,
											"end": 2205,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2205,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2205,
											"name": "PUSH",
											"source": 7,
											"value": "4360AF3D"
										},
										{
											"begin": 2188,
											"end": 2205,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1167,
											"end": 1185,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1167,
											"end": 1185,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "STATICCALL",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "tag",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 2188,
											"end": 2231,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "tag",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2188,
											"end": 2231,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2173,
											"end": 2231,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2241,
											"end": 2306,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2241,
											"end": 2256,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1433"
										},
										{
											"begin": 2241,
											"end": 2273,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2274,
											"end": 2284,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 2294,
											"end": 2298,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 2173,
											"end": 2231,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2241,
											"end": 2273,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 2241,
											"end": 2306,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2241,
											"end": 2306,
											"name": "tag",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 2241,
											"end": 2306,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2316,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "57"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2316,
											"end": 2331,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1433"
										},
										{
											"begin": 2316,
											"end": 2343,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2352,
											"end": 2354,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1436"
										},
										{
											"begin": 2357,
											"end": 2361,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2316,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 2316,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2316,
											"end": 2362,
											"name": "tag",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 2316,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 2389,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1436"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2387,
											"end": 2401,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 2401,
											"name": "PUSH",
											"source": 7,
											"value": "6457C979"
										},
										{
											"begin": 2492,
											"end": 2500,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2492,
											"end": 2500,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2554,
											"end": 2584,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 2576,
											"end": 2583,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 2554,
											"end": 2575,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2554,
											"end": 2584,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2554,
											"end": 2584,
											"name": "tag",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 2554,
											"end": 2584,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2639,
											"end": 2677,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 2668,
											"end": 2676,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 2639,
											"end": 2667,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 2639,
											"end": 2677,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2639,
											"end": 2677,
											"name": "tag",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 2639,
											"end": 2677,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2695,
											"end": 2733,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 2724,
											"end": 2732,
											"name": "DUP10",
											"source": 7
										},
										{
											"begin": 2695,
											"end": 2723,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 2695,
											"end": 2733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2695,
											"end": 2733,
											"name": "tag",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 2695,
											"end": 2733,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2786,
											"end": 2828,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2812,
											"end": 2827,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 2786,
											"end": 2811,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 2786,
											"end": 2828,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2786,
											"end": 2828,
											"name": "tag",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2786,
											"end": 2828,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2901,
											"end": 2944,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 2938,
											"end": 2942,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 2901,
											"end": 2929,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 2901,
											"end": 2944,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2901,
											"end": 2944,
											"name": "tag",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 2901,
											"end": 2944,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "SWAP8",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 2415,
											"end": 2997,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "tag",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2415,
											"end": 2997,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3011,
											"end": 3019,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 3011,
											"end": 3019,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3041,
											"end": 3045,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 3041,
											"end": 3045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3068,
											"end": 3069,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3068,
											"end": 3069,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 504,
											"end": 508,
											"name": "PUSH",
											"source": 7,
											"value": "E10"
										},
										{
											"begin": 504,
											"end": 508,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3115,
											"end": 3130,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1433"
										},
										{
											"begin": 3115,
											"end": 3130,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3144,
											"end": 3148,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 3144,
											"end": 3148,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3162,
											"end": 3179,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1441"
										},
										{
											"begin": 3162,
											"end": 3179,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3068,
											"end": 3069,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3068,
											"end": 3069,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 2387,
											"end": 3213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "tag",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "tag",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 2387,
											"end": 3213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "tag",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 2387,
											"end": 3213,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2373,
											"end": 3213,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2373,
											"end": 3213,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3283,
											"end": 3290,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3304,
											"end": 3312,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3304,
											"end": 3312,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "CALLDATACOPY",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3252,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3252,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3252,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3252,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3252,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3252,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3252,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3252,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3252,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3255,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "76"
										},
										{
											"begin": 3224,
											"end": 3363,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "tag",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "AND",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3224,
											"end": 3363,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3422,
											"end": 3433,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3422,
											"end": 3433,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3393,
											"end": 3400,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 3393,
											"end": 3400,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "PUSH",
											"source": 7,
											"value": "B3B5C304BC1BA781EA735C86E786E9AE6432B86B469FBC00EC8BB252BF54EDA8"
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3402,
											"end": 3410,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 3402,
											"end": 3410,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3402,
											"end": 3410,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 3402,
											"end": 3410,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 3379,
											"end": 3434,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "tag",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3379,
											"end": 3434,
											"name": "LOG4",
											"source": 7
										},
										{
											"begin": 2096,
											"end": 3441,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 3441,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1777,
											"end": 1781,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1813,
											"end": 1841,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1813,
											"end": 1841,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1813,
											"end": 1841,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1813,
											"end": 1841,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1813,
											"end": 1841,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1813,
											"end": 1841,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1813,
											"end": 1841,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1813,
											"end": 1841,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1813,
											"end": 1841,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1813,
											"end": 1841,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1813,
											"end": 1850,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 1813,
											"end": 1850,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1813,
											"end": 1850,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1783,
											"end": 1796,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1783,
											"end": 1796,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1813,
											"end": 1850,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1813,
											"end": 1850,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 1813,
											"end": 1850,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 1813,
											"end": 1850,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1808,
											"end": 1870,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1808,
											"end": 1870,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1860,
											"end": 1865,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1860,
											"end": 1865,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1852,
											"end": 1870,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1703,
											"end": 1939,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1808,
											"end": 1870,
											"name": "tag",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1808,
											"end": 1870,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1909,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1894,
											"end": 1922,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1922,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1922,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1922,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1894,
											"end": 1922,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1922,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1922,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1922,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1894,
											"end": 1922,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1922,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1888,
											"end": 1892,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1894,
											"end": 1931,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1931,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1931,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1931,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1931,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 1880,
											"end": 1932,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "tag",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 1880,
											"end": 1932,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "tag",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "tag",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "tag",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "tag",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1880,
											"end": 1932,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1703,
											"end": 1939,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "tag",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3619,
											"end": 3629,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3641,
											"end": 3643,
											"name": "PUSHIMMUTABLE",
											"source": 7,
											"value": "1436"
										},
										{
											"begin": 3619,
											"end": 3644,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3619,
											"end": 3644,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3611,
											"end": 3645,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 3611,
											"end": 3645,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3611,
											"end": 3645,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3611,
											"end": 3645,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3611,
											"end": 3645,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3611,
											"end": 3645,
											"name": "tag",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 3611,
											"end": 3645,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3734,
											"end": 3752,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3730,
											"end": 4151,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3730,
											"end": 4151,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 3730,
											"end": 4151,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3783,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3805,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 3768,
											"end": 3805,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3805,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3812,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3812,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3768,
											"end": 3812,
											"name": "AND",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3768,
											"end": 3812,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3812,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3812,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3808,
											"end": 3812,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3768,
											"end": 3796,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 3826,
											"end": 3893,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "tag",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 3826,
											"end": 3893,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "tag",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "tag",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "tag",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "tag",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3893,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4033,
											"end": 4056,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4033,
											"end": 4056,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4033,
											"end": 4056,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4033,
											"end": 4056,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3952,
											"end": 3974,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3952,
											"end": 3974,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3992,
											"end": 4015,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3992,
											"end": 4015,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3992,
											"end": 4015,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3992,
											"end": 4015,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4033,
											"end": 4056,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 4033,
											"end": 4056,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4074,
											"end": 4085,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 4074,
											"end": 4085,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "PUSH",
											"source": 7,
											"value": "2CD47D03CA5EED86ED11475382AF40BC0F2965DD65BC4AB337D45577EA5DFAF9"
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3992,
											"end": 4015,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 3912,
											"end": 4099,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "tag",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3912,
											"end": 4099,
											"name": "LOG4",
											"source": 7
										},
										{
											"begin": 3754,
											"end": 4110,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3730,
											"end": 4151,
											"name": "tag",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 3730,
											"end": 4151,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4138,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4123,
											"end": 4151,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4151,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4151,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4151,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4123,
											"end": 4151,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4151,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4151,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4151,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4123,
											"end": 4151,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4151,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4151,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4138,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 4116,
											"end": 4151,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "tag",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4151,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3491,
											"end": 4158,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10706,
											"end": 10721,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10706,
											"end": 10721,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 10706,
											"end": 10721,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10688,
											"end": 10722,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10758,
											"end": 10773,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10758,
											"end": 10773,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10738,
											"end": 10756,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 10738,
											"end": 10756,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10738,
											"end": 10756,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10731,
											"end": 10774,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10790,
											"end": 10808,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 10790,
											"end": 10808,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10790,
											"end": 10808,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10783,
											"end": 10817,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10783,
											"end": 10817,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10783,
											"end": 10817,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1455,
											"end": 1551,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 1455,
											"end": 1551,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1475,
											"end": 1480,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1475,
											"end": 1480,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1505,
											"end": 1532,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10623,
											"end": 10641,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 10623,
											"end": 10641,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "tag",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1482,
											"end": 1550,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1474,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 1455,
											"end": 1551,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1455,
											"end": 1551,
											"name": "tag",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 1455,
											"end": 1551,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1355,
											"end": 1558,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1818,
											"end": 2391,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 1818,
											"end": 2391,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2143,
											"end": 2153,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2143,
											"end": 2153,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2143,
											"end": 2153,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2142,
											"end": 2204,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 2142,
											"end": 2204,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6EB1769F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2183,
											"end": 2187,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11040,
											"end": 11074,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11110,
											"end": 11125,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11110,
											"end": 11125,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11110,
											"end": 11125,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 11090,
											"end": 11108,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 11090,
											"end": 11108,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11090,
											"end": 11108,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11083,
											"end": 11126,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2159,
											"end": 2174,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2174,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2174,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2174,
											"name": "PUSH",
											"source": 2,
											"value": "DD62ED3E"
										},
										{
											"begin": 2159,
											"end": 2174,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10975,
											"end": 10993,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 10975,
											"end": 10993,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 2159,
											"end": 2198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 2159,
											"end": 2198,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2159,
											"end": 2203,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2142,
											"end": 2204,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 2142,
											"end": 2204,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11339,
											"end": 11341,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11321,
											"end": 11342,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11378,
											"end": 11380,
											"name": "PUSH",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 11358,
											"end": 11376,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 11358,
											"end": 11376,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11358,
											"end": 11376,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11351,
											"end": 11381,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11417,
											"end": 11451,
											"name": "PUSH",
											"source": 8,
											"value": "5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F"
										},
										{
											"begin": 11397,
											"end": 11415,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 11397,
											"end": 11415,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11397,
											"end": 11415,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11390,
											"end": 11452,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20746F206E6F6E2D7A65726F20616C6C6F77616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "50"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11468,
											"end": 11486,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 11468,
											"end": 11486,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11468,
											"end": 11486,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11461,
											"end": 11513,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11530,
											"end": 11549,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 11530,
											"end": 11549,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "tag",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "tag",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 2121,
											"end": 2284,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11752,
											"end": 11784,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11752,
											"end": 11784,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11734,
											"end": 11785,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11801,
											"end": 11819,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 11801,
											"end": 11819,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11801,
											"end": 11819,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11794,
											"end": 11828,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11794,
											"end": 11828,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11794,
											"end": 11828,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2294,
											"end": 2384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 2294,
											"end": 2384,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2314,
											"end": 2319,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2314,
											"end": 2319,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "95EA7B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2344,
											"end": 2366,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11707,
											"end": 11725,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 11707,
											"end": 11725,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2321,
											"end": 2383,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "103"
										},
										{
											"begin": 11560,
											"end": 11834,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2294,
											"end": 2384,
											"name": "tag",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 2294,
											"end": 2384,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1818,
											"end": 2391,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1818,
											"end": 2391,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1818,
											"end": 2391,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1818,
											"end": 2391,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2586,
											"end": 2768,
											"name": "tag",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 2586,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2647,
											"end": 2659,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 2695,
											"end": 2730,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 2726,
											"end": 2729,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 2715,
											"end": 2722,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2715,
											"end": 2729,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2715,
											"end": 2729,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 2695,
											"end": 2714,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 2695,
											"end": 2730,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2695,
											"end": 2730,
											"name": "tag",
											"source": 4,
											"value": "120"
										},
										{
											"begin": 2695,
											"end": 2730,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2732,
											"end": 2760,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 2752,
											"end": 2759,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2732,
											"end": 2751,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 2732,
											"end": 2760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2732,
											"end": 2760,
											"name": "tag",
											"source": 4,
											"value": "122"
										},
										{
											"begin": 2732,
											"end": 2760,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 11996,
											"end": 12015,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 11996,
											"end": 12015,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11996,
											"end": 12015,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 11996,
											"end": 12015,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12031,
											"end": 12043,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12031,
											"end": 12043,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12024,
											"end": 12052,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12068,
											"end": 12080,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 12068,
											"end": 12080,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "tag",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 2678,
											"end": 2761,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 2671,
											"end": 2761,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2671,
											"end": 2761,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2586,
											"end": 2768,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2586,
											"end": 2768,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2586,
											"end": 2768,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2586,
											"end": 2768,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3145,
											"end": 3363,
											"name": "tag",
											"source": 4,
											"value": "62"
										},
										{
											"begin": 3145,
											"end": 3363,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3207,
											"end": 3219,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 3267,
											"end": 3314,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "126"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3287,
											"end": 3313,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3287,
											"end": 3313,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 3287,
											"end": 3313,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3287,
											"end": 3313,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 3287,
											"end": 3313,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3267,
											"end": 3286,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 3267,
											"end": 3314,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3267,
											"end": 3314,
											"name": "tag",
											"source": 4,
											"value": "126"
										},
										{
											"begin": 3267,
											"end": 3314,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 3351,
											"end": 3352,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3343,
											"end": 3353,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 3343,
											"end": 3353,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3323,
											"end": 3342,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 3323,
											"end": 3354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "tag",
											"source": 4,
											"value": "127"
										},
										{
											"begin": 3323,
											"end": 3354,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "123"
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3250,
											"end": 3356,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 12246,
											"end": 12265,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 12246,
											"end": 12265,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12246,
											"end": 12265,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12295,
											"end": 12336,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 12290,
											"end": 12292,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 12281,
											"end": 12293,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12281,
											"end": 12293,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12274,
											"end": 12337,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12362,
											"end": 12364,
											"name": "PUSH",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 12353,
											"end": 12365,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12353,
											"end": 12365,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12091,
											"end": 12371,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3569,
											"end": 4115,
											"name": "tag",
											"source": 4,
											"value": "65"
										},
										{
											"begin": 3569,
											"end": 4115,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3628,
											"end": 3640,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 3656,
											"end": 3657,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3661,
											"end": 3662,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3656,
											"end": 3662,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 3652,
											"end": 3699,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 3652,
											"end": 3699,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FC"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3678,
											"end": 3688,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3569,
											"end": 4115,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3652,
											"end": 3699,
											"name": "tag",
											"source": 4,
											"value": "131"
										},
										{
											"begin": 3652,
											"end": 3699,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3720,
											"end": 3721,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3708,
											"end": 3717,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3759,
											"end": 3765,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3759,
											"end": 3765,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "133"
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 3781,
											"end": 3786,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "tag",
											"source": 4,
											"value": "134"
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3781,
											"end": 3786,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3805,
											"end": 3807,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 3800,
											"end": 3807,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 3800,
											"end": 3807,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "tag",
											"source": 4,
											"value": "133"
										},
										{
											"begin": 3752,
											"end": 3818,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3827,
											"end": 3844,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3857,
											"end": 3860,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "140"
										},
										{
											"begin": 3847,
											"end": 3861,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "tag",
											"source": 4,
											"value": "139"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "141"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "CALLDATASIZE",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "CALLDATACOPY",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "tag",
											"source": 4,
											"value": "141"
										},
										{
											"begin": 3847,
											"end": 3861,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3827,
											"end": 3861,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3883,
											"end": 3886,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "tag",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3903,
											"end": 3909,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 3903,
											"end": 3909,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3934,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 3933,
											"end": 3934,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 3929,
											"end": 3930,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3934,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "145"
										},
										{
											"begin": 3929,
											"end": 3934,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3929,
											"end": 3934,
											"name": "tag",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 3929,
											"end": 3934,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3925,
											"end": 3934,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3948,
											"end": 3958,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3978,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "146"
										},
										{
											"begin": 3982,
											"end": 3984,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 3978,
											"end": 3979,
											"name": "DUP9",
											"source": 4
										},
										{
											"begin": 3978,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 3978,
											"end": 3984,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3978,
											"end": 3984,
											"name": "tag",
											"source": 4,
											"value": "146"
										},
										{
											"begin": 3978,
											"end": 3984,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3977,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "147"
										},
										{
											"begin": 3977,
											"end": 3990,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3988,
											"end": 3990,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 3977,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "148"
										},
										{
											"begin": 3977,
											"end": 3990,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3977,
											"end": 3990,
											"name": "tag",
											"source": 4,
											"value": "147"
										},
										{
											"begin": 3977,
											"end": 3990,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "149"
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3973,
											"end": 3974,
											"name": "DUP9",
											"source": 4
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "145"
										},
										{
											"begin": 3973,
											"end": 3990,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "tag",
											"source": 4,
											"value": "149"
										},
										{
											"begin": 3973,
											"end": 3990,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3962,
											"end": 3991,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "150"
										},
										{
											"begin": 3962,
											"end": 3991,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3962,
											"end": 3964,
											"name": "PUSH",
											"source": 4,
											"value": "30"
										},
										{
											"begin": 3962,
											"end": 3991,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "151"
										},
										{
											"begin": 3962,
											"end": 3991,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3962,
											"end": 3991,
											"name": "tag",
											"source": 4,
											"value": "150"
										},
										{
											"begin": 3962,
											"end": 3991,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3948,
											"end": 3992,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3948,
											"end": 3992,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4006,
											"end": 4015,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4025,
											"end": 4029,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4018,
											"end": 4030,
											"name": "PUSH",
											"source": 4,
											"value": "F8"
										},
										{
											"begin": 4018,
											"end": 4030,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 4006,
											"end": 4030,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4006,
											"end": 4030,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4054,
											"end": 4056,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4048,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4049,
											"end": 4050,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "153"
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "153"
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "154"
										},
										{
											"begin": 4044,
											"end": 4051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "tag",
											"source": 4,
											"value": "153"
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4051,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "BYTE",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4044,
											"end": 4056,
											"name": "MSTORE8",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "155"
										},
										{
											"begin": 4075,
											"end": 4077,
											"name": "PUSH",
											"source": 4,
											"value": "A"
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "DUP10",
											"source": 4
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "137"
										},
										{
											"begin": 4070,
											"end": 4077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "tag",
											"source": 4,
											"value": "155"
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "SWAP8",
											"source": 4
										},
										{
											"begin": 4070,
											"end": 4077,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3911,
											"end": 4088,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3911,
											"end": 4088,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "142"
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "tag",
											"source": 4,
											"value": "143"
										},
										{
											"begin": 3896,
											"end": 4088,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4104,
											"end": 4108,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 3569,
											"end": 4115,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3569,
											"end": 4115,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5173,
											"end": 5815,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 5173,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5592,
											"end": 5615,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 5646,
											"end": 5650,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5626,
											"end": 5631,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5618,
											"end": 5645,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5645,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 5618,
											"end": 5645,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFF"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "tag",
											"source": 2,
											"value": "157"
										},
										{
											"begin": 5618,
											"end": 5687,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5592,
											"end": 5687,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5592,
											"end": 5687,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5705,
											"end": 5715,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5705,
											"end": 5722,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5726,
											"end": 5727,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5705,
											"end": 5727,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 5705,
											"end": 5761,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5705,
											"end": 5761,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 5705,
											"end": 5761,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5705,
											"end": 5761,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5742,
											"end": 5752,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 5731,
											"end": 5761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "tag",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 5731,
											"end": 5761,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 14045,
											"end": 14047,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 14027,
											"end": 14048,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14084,
											"end": 14086,
											"name": "PUSH",
											"source": 8,
											"value": "2A"
										},
										{
											"begin": 14064,
											"end": 14082,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 14064,
											"end": 14082,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14064,
											"end": 14082,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14057,
											"end": 14087,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14123,
											"end": 14157,
											"name": "PUSH",
											"source": 8,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 14103,
											"end": 14121,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 14103,
											"end": 14121,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14103,
											"end": 14121,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14096,
											"end": 14158,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14174,
											"end": 14192,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 14174,
											"end": 14192,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14174,
											"end": 14192,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14167,
											"end": 14207,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14224,
											"end": 14243,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 14224,
											"end": 14243,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5697,
											"end": 5808,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 13843,
											"end": 14249,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 897,
											"end": 2203,
											"name": "tag",
											"source": 4,
											"value": "121"
										},
										{
											"begin": 897,
											"end": 2203,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 965,
											"end": 972,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1008,
											"end": 1017,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1028,
											"end": 1035,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1020,
											"end": 1036,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1020,
											"end": 1036,
											"name": "SHR",
											"source": 4
										},
										{
											"begin": 1008,
											"end": 1036,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1008,
											"end": 1036,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1088,
											"end": 1089,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1088,
											"end": 1158,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1084,
											"end": 1158,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1084,
											"end": 1158,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1182,
											"end": 1183,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1186,
											"end": 1191,
											"name": "PUSH",
											"source": 4,
											"value": "10000000000000000"
										},
										{
											"begin": 1182,
											"end": 1191,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1177,
											"end": 1178,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1177,
											"end": 1192,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1196,
											"end": 1262,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1176,
											"end": 1262,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1172,
											"end": 1262,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1172,
											"end": 1262,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1286,
											"end": 1287,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1290,
											"end": 1295,
											"name": "PUSH",
											"source": 4,
											"value": "100000000"
										},
										{
											"begin": 1286,
											"end": 1295,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1281,
											"end": 1282,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1281,
											"end": 1296,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1300,
											"end": 1366,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF"
										},
										{
											"begin": 1280,
											"end": 1366,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1276,
											"end": 1366,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1276,
											"end": 1366,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1390,
											"end": 1391,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1394,
											"end": 1399,
											"name": "PUSH",
											"source": 4,
											"value": "10000"
										},
										{
											"begin": 1390,
											"end": 1399,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1385,
											"end": 1386,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1385,
											"end": 1400,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1404,
											"end": 1470,
											"name": "PUSH",
											"source": 4,
											"value": "FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF"
										},
										{
											"begin": 1384,
											"end": 1470,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1380,
											"end": 1470,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1380,
											"end": 1470,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1494,
											"end": 1495,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1498,
											"end": 1502,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 1494,
											"end": 1502,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1489,
											"end": 1490,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1489,
											"end": 1503,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1507,
											"end": 1573,
											"name": "PUSH",
											"source": 4,
											"value": "FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF"
										},
										{
											"begin": 1488,
											"end": 1573,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1484,
											"end": 1573,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1484,
											"end": 1573,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1597,
											"end": 1598,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1601,
											"end": 1605,
											"name": "PUSH",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 1597,
											"end": 1605,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 1592,
											"end": 1593,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1592,
											"end": 1606,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 1610,
											"end": 1676,
											"name": "PUSH",
											"source": 4,
											"value": "F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F"
										},
										{
											"begin": 1591,
											"end": 1676,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1587,
											"end": 1676,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1587,
											"end": 1676,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1717,
											"end": 1726,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1804,
											"end": 1805,
											"name": "PUSH",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 1730,
											"end": 1731,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1734,
											"end": 1800,
											"name": "PUSH",
											"source": 4,
											"value": "808080808080808080808080808080808080808080808080808080808080808"
										},
										{
											"begin": 1730,
											"end": 1800,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "168"
										},
										{
											"begin": 1729,
											"end": 1805,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "tag",
											"source": 4,
											"value": "167"
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1729,
											"end": 1805,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 1906,
											"end": 1907,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1836,
											"end": 1902,
											"name": "PUSH",
											"source": 4,
											"value": "404040404040404040404040404040404040404040404040404040404040404"
										},
										{
											"begin": 1832,
											"end": 1902,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 1832,
											"end": 1902,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1831,
											"end": 1907,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 2008,
											"end": 2009,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 1938,
											"end": 2004,
											"name": "PUSH",
											"source": 4,
											"value": "202020202020202020202020202020202020202020202020202020202020202"
										},
										{
											"begin": 1934,
											"end": 2004,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 1934,
											"end": 2004,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 1933,
											"end": 2009,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 2037,
											"end": 2042,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 2032,
											"end": 2043,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 2047,
											"end": 2051,
											"name": "PUSH",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 2031,
											"end": 2051,
											"name": "MUL",
											"source": 4
										},
										{
											"begin": 2027,
											"end": 2051,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2027,
											"end": 2051,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2027,
											"end": 2051,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2054,
											"end": 2120,
											"name": "PUSH",
											"source": 4,
											"value": "3030303030303030303030303030303030303030303030303030303030303030"
										},
										{
											"begin": 2027,
											"end": 2120,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 2027,
											"end": 2120,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 2027,
											"end": 2120,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 897,
											"end": 2203,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 4108,
											"end": 4331,
											"name": "tag",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 4108,
											"end": 4331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4241,
											"end": 4253,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 4272,
											"end": 4324,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 4294,
											"end": 4300,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4302,
											"end": 4306,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 4308,
											"end": 4309,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4311,
											"end": 4323,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4272,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 4272,
											"end": 4324,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4272,
											"end": 4324,
											"name": "tag",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 4272,
											"end": 4324,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4265,
											"end": 4324,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 4108,
											"end": 4331,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4108,
											"end": 4331,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5165,
											"end": 5611,
											"name": "tag",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 5165,
											"end": 5611,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5330,
											"end": 5342,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5387,
											"end": 5392,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5362,
											"end": 5383,
											"name": "SELFBALANCE",
											"source": 3
										},
										{
											"begin": 5362,
											"end": 5392,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 5362,
											"end": 5392,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "177"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 14456,
											"end": 14458,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 14438,
											"end": 14459,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14495,
											"end": 14497,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 14475,
											"end": 14493,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 14475,
											"end": 14493,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14475,
											"end": 14493,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14468,
											"end": 14498,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14534,
											"end": 14568,
											"name": "PUSH",
											"source": 8,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 14514,
											"end": 14532,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 14514,
											"end": 14532,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14514,
											"end": 14532,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14507,
											"end": 14569,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C8818D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14585,
											"end": 14603,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 14585,
											"end": 14603,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14585,
											"end": 14603,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14578,
											"end": 14614,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14631,
											"end": 14650,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 14631,
											"end": 14650,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 14254,
											"end": 14656,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "tag",
											"source": 3,
											"value": "177"
										},
										{
											"begin": 5354,
											"end": 5435,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5446,
											"end": 5458,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5460,
											"end": 5483,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5493,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5487,
											"end": 5498,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5506,
											"end": 5511,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5513,
											"end": 5517,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 5487,
											"end": 5518,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "tag",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "184"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "3F"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "tag",
											"source": 3,
											"value": "184"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "tag",
											"source": 3,
											"value": "183"
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5487,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5445,
											"end": 5518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5445,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5445,
											"end": 5518,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5445,
											"end": 5518,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5535,
											"end": 5604,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 5562,
											"end": 5568,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5570,
											"end": 5577,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5579,
											"end": 5589,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5591,
											"end": 5603,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 5535,
											"end": 5561,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "186"
										},
										{
											"begin": 5535,
											"end": 5604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5535,
											"end": 5604,
											"name": "tag",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 5535,
											"end": 5604,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5528,
											"end": 5604,
											"name": "SWAP8",
											"source": 3
										},
										{
											"begin": 5165,
											"end": 5611,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5165,
											"end": 5611,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "tag",
											"source": 3,
											"value": "186"
										},
										{
											"begin": 7671,
											"end": 8299,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7851,
											"end": 7863,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 7879,
											"end": 7886,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7906,
											"end": 7916,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7906,
											"end": 7923,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7927,
											"end": 7928,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7906,
											"end": 7928,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 7902,
											"end": 8188,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1702,
											"end": 1721,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 15155,
											"end": 15157,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 15137,
											"end": 15158,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 15194,
											"end": 15196,
											"name": "PUSH",
											"source": 8,
											"value": "1D"
										},
										{
											"begin": 15174,
											"end": 15192,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 15174,
											"end": 15192,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 15174,
											"end": 15192,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15167,
											"end": 15197,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 15233,
											"end": 15264,
											"name": "PUSH",
											"source": 8,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 15213,
											"end": 15231,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 15213,
											"end": 15231,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 15213,
											"end": 15231,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15206,
											"end": 15265,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 15282,
											"end": 15300,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 15282,
											"end": 15300,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 14953,
											"end": 15306,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "tag",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 8113,
											"end": 8173,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8208,
											"end": 8218,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8201,
											"end": 8218,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 8201,
											"end": 8218,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "tag",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 7875,
											"end": 8293,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8249,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 8257,
											"end": 8267,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8269,
											"end": 8281,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8980,
											"end": 8997,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8980,
											"end": 8997,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8980,
											"end": 9001,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "200"
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 9208,
											"end": 9218,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9202,
											"end": 9219,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9264,
											"end": 9279,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9251,
											"end": 9261,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9247,
											"end": 9249,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9243,
											"end": 9262,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9236,
											"end": 9280,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "tag",
											"source": 3,
											"value": "200"
										},
										{
											"begin": 8976,
											"end": 9355,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9331,
											"end": 9343,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9324,
											"end": 9344,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 9324,
											"end": 9344,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "100"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "203"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "82"
										},
										{
											"begin": -1,
											"end": -1,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "203"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "205"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "205"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DIV",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "KECCAK256",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "37"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "208"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP3",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "209"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPI",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH [tag]",
											"source": -1,
											"value": "208"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "209"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 848,
											"name": "tag",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 14,
											"end": 848,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 103,
											"end": 109,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 111,
											"end": 117,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 119,
											"end": 125,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 127,
											"end": 133,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 180,
											"end": 182,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 168,
											"end": 177,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 159,
											"end": 166,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 155,
											"end": 178,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 151,
											"end": 183,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 148,
											"end": 200,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 148,
											"end": 200,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 148,
											"end": 200,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 196,
											"end": 197,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 193,
											"end": 194,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 186,
											"end": 198,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 148,
											"end": 200,
											"name": "tag",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 148,
											"end": 200,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 232,
											"end": 241,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 219,
											"end": 242,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 209,
											"end": 242,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 209,
											"end": 242,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 293,
											"end": 295,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 282,
											"end": 291,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 278,
											"end": 296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 265,
											"end": 297,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 316,
											"end": 334,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 357,
											"end": 359,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 349,
											"end": 355,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 346,
											"end": 360,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 343,
											"end": 377,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 343,
											"end": 377,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 343,
											"end": 377,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 373,
											"end": 374,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 370,
											"end": 371,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 363,
											"end": 375,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 343,
											"end": 377,
											"name": "tag",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 343,
											"end": 377,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 411,
											"end": 417,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 400,
											"end": 409,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 396,
											"end": 418,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 386,
											"end": 418,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 386,
											"end": 418,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 456,
											"end": 463,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 449,
											"end": 453,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 445,
											"end": 447,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 441,
											"end": 454,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 437,
											"end": 464,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 427,
											"end": 482,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "223"
										},
										{
											"begin": 427,
											"end": 482,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 478,
											"end": 479,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 475,
											"end": 476,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 468,
											"end": 480,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 427,
											"end": 482,
											"name": "tag",
											"source": 8,
											"value": "223"
										},
										{
											"begin": 427,
											"end": 482,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 518,
											"end": 520,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 505,
											"end": 521,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 544,
											"end": 546,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 536,
											"end": 542,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 533,
											"end": 547,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 530,
											"end": 564,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 530,
											"end": 564,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 530,
											"end": 564,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 560,
											"end": 561,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 558,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 550,
											"end": 562,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 530,
											"end": 564,
											"name": "tag",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 530,
											"end": 564,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 605,
											"end": 612,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 600,
											"end": 602,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 591,
											"end": 597,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 587,
											"end": 589,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 583,
											"end": 598,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 579,
											"end": 603,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 576,
											"end": 613,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 573,
											"end": 630,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 573,
											"end": 630,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 573,
											"end": 630,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 626,
											"end": 627,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 623,
											"end": 624,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 616,
											"end": 628,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 573,
											"end": 630,
											"name": "tag",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 573,
											"end": 630,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 657,
											"end": 659,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 649,
											"end": 660,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 649,
											"end": 660,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 649,
											"end": 660,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 649,
											"end": 660,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 649,
											"end": 660,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 679,
											"end": 685,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 679,
											"end": 685,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 735,
											"end": 737,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 720,
											"end": 738,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 720,
											"end": 738,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 707,
											"end": 739,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 768,
											"end": 799,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 768,
											"end": 799,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 758,
											"end": 800,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 758,
											"end": 800,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 748,
											"end": 818,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 748,
											"end": 818,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 814,
											"end": 815,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 811,
											"end": 812,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 804,
											"end": 816,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 748,
											"end": 818,
											"name": "tag",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 748,
											"end": 818,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14,
											"end": 848,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 14,
											"end": 848,
											"name": "SWAP7",
											"source": 8
										},
										{
											"begin": 14,
											"end": 848,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 14,
											"end": 848,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 848,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14,
											"end": 848,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 848,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1256,
											"end": 1436,
											"name": "tag",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1256,
											"end": 1436,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1315,
											"end": 1321,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1368,
											"end": 1370,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1356,
											"end": 1365,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1347,
											"end": 1354,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1343,
											"end": 1366,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1339,
											"end": 1371,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1388,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1388,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 1336,
											"end": 1388,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1384,
											"end": 1385,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1381,
											"end": 1382,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1374,
											"end": 1386,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1336,
											"end": 1388,
											"name": "tag",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 1336,
											"end": 1388,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1407,
											"end": 1430,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1407,
											"end": 1430,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1256,
											"end": 1436,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1256,
											"end": 1436,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1441,
											"end": 1691,
											"name": "tag",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 1441,
											"end": 1691,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1526,
											"end": 1527,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1536,
											"end": 1649,
											"name": "tag",
											"source": 8,
											"value": "232"
										},
										{
											"begin": 1536,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1550,
											"end": 1556,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1547,
											"end": 1548,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1557,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1536,
											"end": 1649,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1536,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "234"
										},
										{
											"begin": 1536,
											"end": 1649,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1626,
											"end": 1637,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1626,
											"end": 1637,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1626,
											"end": 1637,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1620,
											"end": 1638,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1607,
											"end": 1618,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1607,
											"end": 1618,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1607,
											"end": 1618,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1600,
											"end": 1639,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1572,
											"end": 1574,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1565,
											"end": 1575,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1536,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "232"
										},
										{
											"begin": 1536,
											"end": 1649,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1536,
											"end": 1649,
											"name": "tag",
											"source": 8,
											"value": "234"
										},
										{
											"begin": 1536,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1683,
											"end": 1684,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1665,
											"end": 1681,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1665,
											"end": 1681,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1658,
											"end": 1685,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1441,
											"end": 1691,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1696,
											"end": 1967,
											"name": "tag",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 1696,
											"end": 1967,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1738,
											"end": 1741,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1776,
											"end": 1781,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1770,
											"end": 1782,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1803,
											"end": 1809,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1798,
											"end": 1801,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1791,
											"end": 1810,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1819,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 1888,
											"end": 1894,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1881,
											"end": 1885,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1876,
											"end": 1879,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1872,
											"end": 1886,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1865,
											"end": 1869,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1858,
											"end": 1863,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1854,
											"end": 1870,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1819,
											"end": 1895,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 1819,
											"end": 1895,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1819,
											"end": 1895,
											"name": "tag",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 1819,
											"end": 1895,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1949,
											"end": 1951,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1928,
											"end": 1943,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1924,
											"end": 1953,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1915,
											"end": 1954,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1915,
											"end": 1954,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1915,
											"end": 1954,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1915,
											"end": 1954,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1956,
											"end": 1960,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1911,
											"end": 1961,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1911,
											"end": 1961,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1696,
											"end": 1967,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1696,
											"end": 1967,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1972,
											"end": 2273,
											"name": "tag",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 1972,
											"end": 2273,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2157,
											"end": 2163,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2150,
											"end": 2164,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2143,
											"end": 2165,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2132,
											"end": 2141,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2125,
											"end": 2166,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2202,
											"end": 2204,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2197,
											"end": 2199,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2186,
											"end": 2195,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2182,
											"end": 2200,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2205,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2106,
											"end": 2110,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2222,
											"end": 2267,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 2263,
											"end": 2265,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2252,
											"end": 2261,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2248,
											"end": 2266,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2240,
											"end": 2246,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2222,
											"end": 2267,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 2222,
											"end": 2267,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2727,
											"end": 2845,
											"name": "tag",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 2727,
											"end": 2845,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2813,
											"end": 2818,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2806,
											"end": 2819,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2799,
											"end": 2820,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2792,
											"end": 2797,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2789,
											"end": 2821,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 2779,
											"end": 2839,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 2779,
											"end": 2839,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2835,
											"end": 2836,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2832,
											"end": 2833,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2825,
											"end": 2837,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2850,
											"end": 3159,
											"name": "tag",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 2850,
											"end": 3159,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2915,
											"end": 2921,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2923,
											"end": 2929,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2976,
											"end": 2978,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2964,
											"end": 2973,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2955,
											"end": 2962,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2951,
											"end": 2974,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2947,
											"end": 2979,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2944,
											"end": 2996,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2944,
											"end": 2996,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 2944,
											"end": 2996,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2992,
											"end": 2993,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2989,
											"end": 2990,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2982,
											"end": 2994,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2944,
											"end": 2996,
											"name": "tag",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 2944,
											"end": 2996,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3028,
											"end": 3037,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3015,
											"end": 3038,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 3005,
											"end": 3038,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3005,
											"end": 3038,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3088,
											"end": 3090,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3077,
											"end": 3086,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 3073,
											"end": 3091,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3060,
											"end": 3092,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 3101,
											"end": 3129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 3123,
											"end": 3128,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3101,
											"end": 3129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 3101,
											"end": 3129,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3101,
											"end": 3129,
											"name": "tag",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 3101,
											"end": 3129,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3148,
											"end": 3153,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3138,
											"end": 3153,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3138,
											"end": 3153,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3138,
											"end": 3153,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2850,
											"end": 3159,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2850,
											"end": 3159,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2850,
											"end": 3159,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2850,
											"end": 3159,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2850,
											"end": 3159,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2850,
											"end": 3159,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3372,
											"end": 3556,
											"name": "tag",
											"source": 8,
											"value": "54"
										},
										{
											"begin": 3372,
											"end": 3556,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3442,
											"end": 3448,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3495,
											"end": 3497,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3483,
											"end": 3492,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3474,
											"end": 3481,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3470,
											"end": 3493,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 3466,
											"end": 3498,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 3463,
											"end": 3515,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3463,
											"end": 3515,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 3463,
											"end": 3515,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3511,
											"end": 3512,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3508,
											"end": 3509,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3501,
											"end": 3513,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 3463,
											"end": 3515,
											"name": "tag",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 3463,
											"end": 3515,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3534,
											"end": 3550,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3534,
											"end": 3550,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3372,
											"end": 3556,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3372,
											"end": 3556,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3561,
											"end": 3758,
											"name": "tag",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 3561,
											"end": 3758,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3602,
											"end": 3605,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3640,
											"end": 3645,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3634,
											"end": 3646,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3655,
											"end": 3720,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "250"
										},
										{
											"begin": 3713,
											"end": 3719,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3708,
											"end": 3711,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3701,
											"end": 3705,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3694,
											"end": 3699,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 3690,
											"end": 3706,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3655,
											"end": 3720,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 3655,
											"end": 3720,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3655,
											"end": 3720,
											"name": "tag",
											"source": 8,
											"value": "250"
										},
										{
											"begin": 3655,
											"end": 3720,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3736,
											"end": 3752,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3736,
											"end": 3752,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3736,
											"end": 3752,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3736,
											"end": 3752,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3736,
											"end": 3752,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3561,
											"end": 3758,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3561,
											"end": 3758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3901,
											"end": 5985,
											"name": "tag",
											"source": 8,
											"value": "68"
										},
										{
											"begin": 3901,
											"end": 5985,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4908,
											"end": 4933,
											"name": "PUSH",
											"source": 8,
											"value": "496D6167652061737365727465642061742075726C3A20000000000000000000"
										},
										{
											"begin": 4903,
											"end": 4906,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4896,
											"end": 4934,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4978,
											"end": 4984,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 4970,
											"end": 4976,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 4965,
											"end": 4967,
											"name": "PUSH",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 4960,
											"end": 4963,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4956,
											"end": 4968,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4943,
											"end": 4985,
											"name": "CALLDATACOPY",
											"source": 8
										},
										{
											"begin": 4878,
											"end": 4881,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5013,
											"end": 5019,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 5008,
											"end": 5011,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5004,
											"end": 5020,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40CCDEE440D2DAC2CECA9288744060F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "83"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5044,
											"end": 5046,
											"name": "PUSH",
											"source": 8,
											"value": "17"
										},
										{
											"begin": 5040,
											"end": 5042,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5036,
											"end": 5047,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5029,
											"end": 5068,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5097,
											"end": 5103,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 5091,
											"end": 5104,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5113,
											"end": 5187,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 5180,
											"end": 5186,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5175,
											"end": 5177,
											"name": "PUSH",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 5171,
											"end": 5173,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5167,
											"end": 5178,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5160,
											"end": 5164,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5152,
											"end": 5158,
											"name": "DUP13",
											"source": 8
										},
										{
											"begin": 5148,
											"end": 5165,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5113,
											"end": 5187,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 5113,
											"end": 5187,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5113,
											"end": 5187,
											"name": "tag",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 5113,
											"end": 5187,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40C2DCC840C2E6E6CAE4E8CAE4744060F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5245,
											"end": 5247,
											"name": "PUSH",
											"source": 8,
											"value": "27"
										},
										{
											"begin": 5206,
											"end": 5221,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5206,
											"end": 5221,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5206,
											"end": 5221,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5206,
											"end": 5221,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5237,
											"end": 5248,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5237,
											"end": 5248,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5237,
											"end": 5248,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5230,
											"end": 5270,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5295,
											"end": 5308,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 5295,
											"end": 5308,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5317,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "254"
										},
										{
											"begin": 5295,
											"end": 5308,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5379,
											"end": 5381,
											"name": "PUSH",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 5371,
											"end": 5382,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5371,
											"end": 5382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5364,
											"end": 5368,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5352,
											"end": 5369,
											"name": "DUP12",
											"source": 8
										},
										{
											"begin": 5352,
											"end": 5369,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5317,
											"end": 5393,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 5317,
											"end": 5393,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5317,
											"end": 5393,
											"name": "tag",
											"source": 8,
											"value": "254"
										},
										{
											"begin": 5317,
											"end": 5393,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5454,
											"end": 5467,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 5454,
											"end": 5467,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5412,
											"end": 5429,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5412,
											"end": 5429,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5412,
											"end": 5429,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5476,
											"end": 5552,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 5454,
											"end": 5467,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5538,
											"end": 5540,
											"name": "PUSH",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 5530,
											"end": 5541,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5530,
											"end": 5541,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5523,
											"end": 5527,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5511,
											"end": 5528,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 5511,
											"end": 5528,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5476,
											"end": 5552,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 5476,
											"end": 5552,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5476,
											"end": 5552,
											"name": "tag",
											"source": 8,
											"value": "255"
										},
										{
											"begin": 5476,
											"end": 5552,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1030BA103A34B6B2B9BA30B6B81D1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5612,
											"end": 5614,
											"name": "PUSH",
											"source": 8,
											"value": "38"
										},
										{
											"begin": 5571,
											"end": 5588,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5571,
											"end": 5588,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5571,
											"end": 5588,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5571,
											"end": 5588,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5604,
											"end": 5615,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5604,
											"end": 5615,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5604,
											"end": 5615,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5635,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5660,
											"end": 5673,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5660,
											"end": 5673,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 5682,
											"end": 5758,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "256"
										},
										{
											"begin": 5660,
											"end": 5673,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5744,
											"end": 5746,
											"name": "PUSH",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 5736,
											"end": 5747,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 5736,
											"end": 5747,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5729,
											"end": 5733,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5717,
											"end": 5734,
											"name": "DUP10",
											"source": 8
										},
										{
											"begin": 5717,
											"end": 5734,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5682,
											"end": 5758,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 5682,
											"end": 5758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5682,
											"end": 5758,
											"name": "tag",
											"source": 8,
											"value": "256"
										},
										{
											"begin": 5682,
											"end": 5758,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5823,
											"end": 5857,
											"name": "PUSH",
											"source": 8,
											"value": "20696E207468652044617461417373657274657220636F6E7472616374206174"
										},
										{
											"begin": 5818,
											"end": 5820,
											"name": "PUSH",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 5777,
											"end": 5794,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5777,
											"end": 5794,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5777,
											"end": 5794,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5777,
											"end": 5794,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5810,
											"end": 5821,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5810,
											"end": 5821,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5810,
											"end": 5821,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5803,
											"end": 5858,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4060F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5882,
											"end": 5885,
											"name": "PUSH",
											"source": 8,
											"value": "67"
										},
										{
											"begin": 5874,
											"end": 5886,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5874,
											"end": 5886,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5867,
											"end": 5894,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5910,
											"end": 5979,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "257"
										},
										{
											"begin": 5940,
											"end": 5978,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 5973,
											"end": 5976,
											"name": "PUSH",
											"source": 8,
											"value": "6A"
										},
										{
											"begin": 5965,
											"end": 5977,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5965,
											"end": 5977,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5957,
											"end": 5963,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 5940,
											"end": 5978,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 5940,
											"end": 5978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5940,
											"end": 5978,
											"name": "tag",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 5940,
											"end": 5978,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1034B9903737BA1030903232B2B83330B5B297"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "69"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3828,
											"end": 3862,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3828,
											"end": 3862,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3887,
											"end": 3889,
											"name": "PUSH",
											"source": 8,
											"value": "13"
										},
										{
											"begin": 3878,
											"end": 3890,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3878,
											"end": 3890,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3763,
											"end": 3896,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5910,
											"end": 5979,
											"name": "tag",
											"source": 8,
											"value": "257"
										},
										{
											"begin": 5910,
											"end": 5979,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5903,
											"end": 5979,
											"name": "SWAP11",
											"source": 8
										},
										{
											"begin": 3901,
											"end": 5985,
											"name": "SWAP10",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3901,
											"end": 5985,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5990,
											"end": 6913,
											"name": "tag",
											"source": 8,
											"value": "70"
										},
										{
											"begin": 5990,
											"end": 6913,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6335,
											"end": 6339,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6364,
											"end": 6367,
											"name": "PUSH",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 6394,
											"end": 6396,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6383,
											"end": 6392,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6376,
											"end": 6397,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6414,
											"end": 6459,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "260"
										},
										{
											"begin": 6455,
											"end": 6457,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6444,
											"end": 6453,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6440,
											"end": 6458,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6432,
											"end": 6438,
											"name": "DUP14",
											"source": 8
										},
										{
											"begin": 6414,
											"end": 6459,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 6414,
											"end": 6459,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6414,
											"end": 6459,
											"name": "tag",
											"source": 8,
											"value": "260"
										},
										{
											"begin": 6414,
											"end": 6459,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6533,
											"end": 6548,
											"name": "SWAP12",
											"source": 8
										},
										{
											"begin": 6533,
											"end": 6548,
											"name": "DUP13",
											"source": 8
										},
										{
											"begin": 6533,
											"end": 6548,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6528,
											"end": 6530,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6513,
											"end": 6531,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 6513,
											"end": 6531,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6506,
											"end": 6549,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6585,
											"end": 6600,
											"name": "SWAP10",
											"source": 8
										},
										{
											"begin": 6585,
											"end": 6600,
											"name": "DUP12",
											"source": 8
										},
										{
											"begin": 6585,
											"end": 6600,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6580,
											"end": 6582,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6565,
											"end": 6583,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6565,
											"end": 6583,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6558,
											"end": 6601,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6637,
											"end": 6652,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 6637,
											"end": 6652,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 6637,
											"end": 6652,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6632,
											"end": 6634,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 6617,
											"end": 6635,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 6617,
											"end": 6635,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6610,
											"end": 6653,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6702,
											"end": 6720,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6690,
											"end": 6721,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 6690,
											"end": 6721,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6690,
											"end": 6721,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 6690,
											"end": 6721,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6684,
											"end": 6687,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 6669,
											"end": 6688,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 6669,
											"end": 6688,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6662,
											"end": 6722,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6759,
											"end": 6774,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6759,
											"end": 6774,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6759,
											"end": 6774,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 6759,
											"end": 6774,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6486,
											"end": 6489,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 6738,
											"end": 6757,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6738,
											"end": 6757,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6731,
											"end": 6775,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6806,
											"end": 6809,
											"name": "PUSH",
											"source": 8,
											"value": "C0"
										},
										{
											"begin": 6791,
											"end": 6810,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6791,
											"end": 6810,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6784,
											"end": 6819,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 6784,
											"end": 6819,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6784,
											"end": 6819,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 6784,
											"end": 6819,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6850,
											"end": 6853,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 6835,
											"end": 6854,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6835,
											"end": 6854,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6828,
											"end": 6863,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 6828,
											"end": 6863,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6828,
											"end": 6863,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 6828,
											"end": 6863,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6894,
											"end": 6897,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 6879,
											"end": 6898,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6872,
											"end": 6907,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6872,
											"end": 6907,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6872,
											"end": 6907,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6872,
											"end": 6907,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6406,
											"end": 6459,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5990,
											"end": 6913,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5990,
											"end": 6913,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7107,
											"end": 7234,
											"name": "tag",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 7107,
											"end": 7234,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7168,
											"end": 7178,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 7163,
											"end": 7166,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 7159,
											"end": 7179,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 7156,
											"end": 7157,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7149,
											"end": 7180,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7199,
											"end": 7203,
											"name": "PUSH",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 7196,
											"end": 7197,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7189,
											"end": 7204,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7223,
											"end": 7227,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 7220,
											"end": 7221,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7213,
											"end": 7228,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7239,
											"end": 7619,
											"name": "tag",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 7239,
											"end": 7619,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7318,
											"end": 7319,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 7314,
											"end": 7326,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7314,
											"end": 7326,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7314,
											"end": 7326,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 7314,
											"end": 7326,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7361,
											"end": 7373,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7361,
											"end": 7373,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7361,
											"end": 7373,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7382,
											"end": 7443,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "265"
										},
										{
											"begin": 7382,
											"end": 7443,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7436,
											"end": 7440,
											"name": "PUSH",
											"source": 8,
											"value": "7F"
										},
										{
											"begin": 7428,
											"end": 7434,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7424,
											"end": 7441,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7414,
											"end": 7441,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7414,
											"end": 7441,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7382,
											"end": 7443,
											"name": "tag",
											"source": 8,
											"value": "265"
										},
										{
											"begin": 7382,
											"end": 7443,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7489,
											"end": 7491,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7481,
											"end": 7487,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7478,
											"end": 7492,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 7458,
											"end": 7476,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7455,
											"end": 7493,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7452,
											"end": 7613,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "266"
										},
										{
											"begin": 7452,
											"end": 7613,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7535,
											"end": 7545,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 7530,
											"end": 7533,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 7526,
											"end": 7546,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 7523,
											"end": 7524,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7516,
											"end": 7547,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7570,
											"end": 7574,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 7567,
											"end": 7568,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 7560,
											"end": 7575,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7598,
											"end": 7602,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 7595,
											"end": 7596,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7588,
											"end": 7603,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7452,
											"end": 7613,
											"name": "tag",
											"source": 8,
											"value": "266"
										},
										{
											"begin": 7452,
											"end": 7613,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7452,
											"end": 7613,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7239,
											"end": 7619,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7239,
											"end": 7619,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7239,
											"end": 7619,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7239,
											"end": 7619,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7750,
											"end": 8295,
											"name": "tag",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 7750,
											"end": 8295,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7852,
											"end": 7854,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 7847,
											"end": 7850,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7844,
											"end": 7855,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 7841,
											"end": 8289,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7841,
											"end": 8289,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 7841,
											"end": 8289,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7888,
											"end": 7889,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7913,
											"end": 7918,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7909,
											"end": 7911,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7902,
											"end": 7919,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7958,
											"end": 7962,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7954,
											"end": 7956,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7944,
											"end": 7963,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 8028,
											"end": 8030,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 8016,
											"end": 8026,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8012,
											"end": 8031,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8009,
											"end": 8010,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 8005,
											"end": 8032,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 7999,
											"end": 8003,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7995,
											"end": 8033,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8064,
											"end": 8068,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8052,
											"end": 8062,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 8049,
											"end": 8069,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 8046,
											"end": 8093,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8046,
											"end": 8093,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 8046,
											"end": 8093,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8087,
											"end": 8091,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8046,
											"end": 8093,
											"name": "tag",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 8046,
											"end": 8093,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8142,
											"end": 8144,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 8137,
											"end": 8140,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8133,
											"end": 8145,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8130,
											"end": 8131,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 8126,
											"end": 8146,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 8120,
											"end": 8124,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8116,
											"end": 8147,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8106,
											"end": 8147,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 8106,
											"end": 8147,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8197,
											"end": 8279,
											"name": "tag",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 8197,
											"end": 8279,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8215,
											"end": 8217,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8208,
											"end": 8213,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8205,
											"end": 8218,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 8197,
											"end": 8279,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8197,
											"end": 8279,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 8197,
											"end": 8279,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8260,
											"end": 8277,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8260,
											"end": 8277,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8260,
											"end": 8277,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 8241,
											"end": 8242,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 8230,
											"end": 8243,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8197,
											"end": 8279,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 8197,
											"end": 8279,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8197,
											"end": 8279,
											"name": "tag",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 8197,
											"end": 8279,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8201,
											"end": 8204,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8201,
											"end": 8204,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 8201,
											"end": 8204,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7750,
											"end": 8295,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7750,
											"end": 8295,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7750,
											"end": 8295,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7750,
											"end": 8295,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8471,
											"end": 9823,
											"name": "tag",
											"source": 8,
											"value": "76"
										},
										{
											"begin": 8471,
											"end": 9823,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8597,
											"end": 8600,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8591,
											"end": 8601,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 8624,
											"end": 8642,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8616,
											"end": 8622,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8613,
											"end": 8643,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 8610,
											"end": 8666,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 8610,
											"end": 8666,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 8610,
											"end": 8666,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 8646,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 8646,
											"end": 8664,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 8646,
											"end": 8664,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8646,
											"end": 8664,
											"name": "tag",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 8646,
											"end": 8664,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8675,
											"end": 8772,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "278"
										},
										{
											"begin": 8765,
											"end": 8771,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8725,
											"end": 8763,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 8757,
											"end": 8761,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8751,
											"end": 8762,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 8725,
											"end": 8763,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "82"
										},
										{
											"begin": 8725,
											"end": 8763,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8725,
											"end": 8763,
											"name": "tag",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 8725,
											"end": 8763,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8719,
											"end": 8723,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 8675,
											"end": 8772,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 8675,
											"end": 8772,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8675,
											"end": 8772,
											"name": "tag",
											"source": 8,
											"value": "278"
										},
										{
											"begin": 8675,
											"end": 8772,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8827,
											"end": 8831,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8827,
											"end": 8831,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8891,
											"end": 8893,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 8880,
											"end": 8894,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 8880,
											"end": 8894,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 8908,
											"end": 8909,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 8903,
											"end": 9566,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8903,
											"end": 9566,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 8903,
											"end": 9566,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "281"
										},
										{
											"begin": 8903,
											"end": 9566,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9610,
											"end": 9611,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9627,
											"end": 9633,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9624,
											"end": 9713,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9624,
											"end": 9713,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 9624,
											"end": 9713,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9679,
											"end": 9698,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9679,
											"end": 9698,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9679,
											"end": 9698,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9673,
											"end": 9699,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9624,
											"end": 9713,
											"name": "tag",
											"source": 8,
											"value": "282"
										},
										{
											"begin": 9624,
											"end": 9713,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8428,
											"end": 8429,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 8424,
											"end": 8435,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 8424,
											"end": 8435,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8424,
											"end": 8435,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 8420,
											"end": 8444,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 8416,
											"end": 8445,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 8406,
											"end": 8446,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8452,
											"end": 8453,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 8448,
											"end": 8459,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8448,
											"end": 8459,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8448,
											"end": 8459,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 8403,
											"end": 8460,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 9726,
											"end": 9807,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9726,
											"end": 9807,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 8873,
											"end": 9817,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 8873,
											"end": 9817,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8903,
											"end": 9566,
											"name": "tag",
											"source": 8,
											"value": "281"
										},
										{
											"begin": 8903,
											"end": 9566,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7697,
											"end": 7698,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7690,
											"end": 7704,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7690,
											"end": 7704,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7690,
											"end": 7704,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7734,
											"end": 7738,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7721,
											"end": 7739,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7721,
											"end": 7739,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 8939,
											"end": 8959,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 8939,
											"end": 8959,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 8939,
											"end": 8959,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9057,
											"end": 9293,
											"name": "tag",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 9057,
											"end": 9293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9071,
											"end": 9078,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9068,
											"end": 9069,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9065,
											"end": 9079,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 9057,
											"end": 9293,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9057,
											"end": 9293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 9057,
											"end": 9293,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9160,
											"end": 9179,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 9160,
											"end": 9179,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 9160,
											"end": 9179,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9154,
											"end": 9180,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9139,
											"end": 9181,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9139,
											"end": 9181,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 9252,
											"end": 9279,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 9252,
											"end": 9279,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9252,
											"end": 9279,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9252,
											"end": 9279,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 9220,
											"end": 9221,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 9208,
											"end": 9222,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9222,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9222,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9222,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9087,
											"end": 9106,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9087,
											"end": 9106,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9057,
											"end": 9293,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 9057,
											"end": 9293,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9057,
											"end": 9293,
											"name": "tag",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 9057,
											"end": 9293,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9061,
											"end": 9064,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9321,
											"end": 9327,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9312,
											"end": 9319,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9309,
											"end": 9328,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 9306,
											"end": 9507,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9306,
											"end": 9507,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "288"
										},
										{
											"begin": 9306,
											"end": 9507,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9382,
											"end": 9401,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 9382,
											"end": 9401,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9382,
											"end": 9401,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9376,
											"end": 9402,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9465,
											"end": 9466,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 9461,
											"end": 9475,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 9461,
											"end": 9475,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9461,
											"end": 9475,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 9477,
											"end": 9480,
											"name": "PUSH",
											"source": 8,
											"value": "F8"
										},
										{
											"begin": 9457,
											"end": 9481,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9453,
											"end": 9490,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 9449,
											"end": 9491,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 9434,
											"end": 9492,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9419,
											"end": 9493,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9419,
											"end": 9493,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 9306,
											"end": 9507,
											"name": "tag",
											"source": 8,
											"value": "288"
										},
										{
											"begin": 9306,
											"end": 9507,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9553,
											"end": 9554,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 9537,
											"end": 9551,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9537,
											"end": 9551,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9537,
											"end": 9551,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 9533,
											"end": 9555,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9520,
											"end": 9556,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9520,
											"end": 9556,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8471,
											"end": 9823,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9828,
											"end": 10218,
											"name": "tag",
											"source": 8,
											"value": "78"
										},
										{
											"begin": 9828,
											"end": 10218,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9987,
											"end": 9989,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9976,
											"end": 9985,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9969,
											"end": 9990,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10026,
											"end": 10032,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10021,
											"end": 10023,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10010,
											"end": 10019,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10006,
											"end": 10024,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9999,
											"end": 10033,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10083,
											"end": 10089,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10075,
											"end": 10081,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10070,
											"end": 10072,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10059,
											"end": 10068,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10055,
											"end": 10073,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10042,
											"end": 10090,
											"name": "CALLDATACOPY",
											"source": 8
										},
										{
											"begin": 10139,
											"end": 10140,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10110,
											"end": 10132,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10110,
											"end": 10132,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10110,
											"end": 10132,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10134,
											"end": 10136,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10106,
											"end": 10137,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10106,
											"end": 10137,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10106,
											"end": 10137,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10099,
											"end": 10141,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10099,
											"end": 10141,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10099,
											"end": 10141,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10099,
											"end": 10141,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10202,
											"end": 10204,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 10181,
											"end": 10196,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10181,
											"end": 10196,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 10181,
											"end": 10196,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10177,
											"end": 10206,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10162,
											"end": 10207,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10158,
											"end": 10212,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10158,
											"end": 10212,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9828,
											"end": 10218,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9828,
											"end": 10218,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10223,
											"end": 10443,
											"name": "tag",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 10223,
											"end": 10443,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10372,
											"end": 10374,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10361,
											"end": 10370,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10354,
											"end": 10375,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10335,
											"end": 10339,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10392,
											"end": 10437,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "291"
										},
										{
											"begin": 10433,
											"end": 10435,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10422,
											"end": 10431,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10418,
											"end": 10436,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10410,
											"end": 10416,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 10392,
											"end": 10437,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 10392,
											"end": 10437,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10392,
											"end": 10437,
											"name": "tag",
											"source": 8,
											"value": "291"
										},
										{
											"begin": 10392,
											"end": 10437,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10384,
											"end": 10437,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 10223,
											"end": 10443,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10223,
											"end": 10443,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 12376,
											"end": 12503,
											"name": "tag",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 12376,
											"end": 12503,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12437,
											"end": 12447,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 12432,
											"end": 12435,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 12428,
											"end": 12448,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 12425,
											"end": 12426,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12418,
											"end": 12449,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12468,
											"end": 12472,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 12465,
											"end": 12466,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 12458,
											"end": 12473,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12492,
											"end": 12496,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 12489,
											"end": 12490,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12482,
											"end": 12497,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 12508,
											"end": 12643,
											"name": "tag",
											"source": 8,
											"value": "135"
										},
										{
											"begin": 12508,
											"end": 12643,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12547,
											"end": 12550,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12568,
											"end": 12585,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 12568,
											"end": 12585,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12568,
											"end": 12585,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12565,
											"end": 12608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 12565,
											"end": 12608,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 12588,
											"end": 12606,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 12588,
											"end": 12606,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 12588,
											"end": 12606,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 12588,
											"end": 12606,
											"name": "tag",
											"source": 8,
											"value": "301"
										},
										{
											"begin": 12588,
											"end": 12606,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12635,
											"end": 12636,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 12624,
											"end": 12637,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12624,
											"end": 12637,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12508,
											"end": 12643,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 12648,
											"end": 12775,
											"name": "tag",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 12648,
											"end": 12775,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12709,
											"end": 12719,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 12704,
											"end": 12707,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 12700,
											"end": 12720,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 12697,
											"end": 12698,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12690,
											"end": 12721,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12740,
											"end": 12744,
											"name": "PUSH",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 12737,
											"end": 12738,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 12730,
											"end": 12745,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12764,
											"end": 12768,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 12761,
											"end": 12762,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12754,
											"end": 12769,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 12780,
											"end": 12997,
											"name": "tag",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 12780,
											"end": 12997,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12820,
											"end": 12821,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12846,
											"end": 12847,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 12836,
											"end": 12968,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 12836,
											"end": 12968,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 12890,
											"end": 12900,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 12885,
											"end": 12888,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 12881,
											"end": 12901,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 12878,
											"end": 12879,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12871,
											"end": 12902,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12925,
											"end": 12929,
											"name": "PUSH",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 12922,
											"end": 12923,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 12915,
											"end": 12930,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 12953,
											"end": 12957,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 12950,
											"end": 12951,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 12943,
											"end": 12958,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 12836,
											"end": 12968,
											"name": "tag",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 12836,
											"end": 12968,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12982,
											"end": 12991,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 12982,
											"end": 12991,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 12780,
											"end": 12997,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13002,
											"end": 13130,
											"name": "tag",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 13002,
											"end": 13130,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13069,
											"end": 13078,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13069,
											"end": 13078,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13069,
											"end": 13078,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 13090,
											"end": 13101,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13090,
											"end": 13101,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13090,
											"end": 13101,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 13087,
											"end": 13124,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 13087,
											"end": 13124,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 13087,
											"end": 13124,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 13104,
											"end": 13122,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 13104,
											"end": 13122,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 13104,
											"end": 13122,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13104,
											"end": 13122,
											"name": "tag",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 13104,
											"end": 13122,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13002,
											"end": 13130,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 13002,
											"end": 13130,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 13002,
											"end": 13130,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13002,
											"end": 13130,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 13002,
											"end": 13130,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13135,
											"end": 13303,
											"name": "tag",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 13135,
											"end": 13303,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13175,
											"end": 13182,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13241,
											"end": 13242,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13237,
											"end": 13238,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13233,
											"end": 13239,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 13229,
											"end": 13243,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 13226,
											"end": 13227,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 13223,
											"end": 13244,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 13218,
											"end": 13219,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13211,
											"end": 13220,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 13204,
											"end": 13221,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 13200,
											"end": 13245,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 13197,
											"end": 13268,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 13197,
											"end": 13268,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "310"
										},
										{
											"begin": 13197,
											"end": 13268,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 13248,
											"end": 13266,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "310"
										},
										{
											"begin": 13248,
											"end": 13266,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 13248,
											"end": 13266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13248,
											"end": 13266,
											"name": "tag",
											"source": 8,
											"value": "310"
										},
										{
											"begin": 13248,
											"end": 13266,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13288,
											"end": 13297,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 13288,
											"end": 13297,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13135,
											"end": 13303,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13308,
											"end": 13456,
											"name": "tag",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 13308,
											"end": 13456,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13396,
											"end": 13400,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 13375,
											"end": 13387,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13375,
											"end": 13387,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13375,
											"end": 13387,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 13389,
											"end": 13401,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 13389,
											"end": 13401,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13389,
											"end": 13401,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 13371,
											"end": 13402,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13371,
											"end": 13402,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13414,
											"end": 13427,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13414,
											"end": 13427,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 13411,
											"end": 13450,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 13411,
											"end": 13450,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 13411,
											"end": 13450,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 13430,
											"end": 13448,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 13430,
											"end": 13448,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "218"
										},
										{
											"begin": 13430,
											"end": 13448,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 13461,
											"end": 13588,
											"name": "tag",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 13461,
											"end": 13588,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13522,
											"end": 13532,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 13517,
											"end": 13520,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 13513,
											"end": 13533,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 13510,
											"end": 13511,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13503,
											"end": 13534,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13553,
											"end": 13557,
											"name": "PUSH",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 13550,
											"end": 13551,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 13543,
											"end": 13558,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13577,
											"end": 13581,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 13574,
											"end": 13575,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13567,
											"end": 13582,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 13593,
											"end": 13838,
											"name": "tag",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 13593,
											"end": 13838,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13660,
											"end": 13666,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13713,
											"end": 13715,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 13701,
											"end": 13710,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 13692,
											"end": 13699,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 13688,
											"end": 13711,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 13684,
											"end": 13716,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 13681,
											"end": 13733,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 13681,
											"end": 13733,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "316"
										},
										{
											"begin": 13681,
											"end": 13733,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 13729,
											"end": 13730,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 13726,
											"end": 13727,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 13719,
											"end": 13731,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 13681,
											"end": 13733,
											"name": "tag",
											"source": 8,
											"value": "316"
										},
										{
											"begin": 13681,
											"end": 13733,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 13761,
											"end": 13770,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13755,
											"end": 13771,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 13780,
											"end": 13808,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "291"
										},
										{
											"begin": 13802,
											"end": 13807,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 13780,
											"end": 13808,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 13780,
											"end": 13808,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 14661,
											"end": 14948,
											"name": "tag",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 14661,
											"end": 14948,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14790,
											"end": 14793,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 14828,
											"end": 14834,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 14822,
											"end": 14835,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 14844,
											"end": 14910,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "321"
										},
										{
											"begin": 14903,
											"end": 14909,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 14898,
											"end": 14901,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 14891,
											"end": 14895,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 14883,
											"end": 14889,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 14879,
											"end": 14896,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14844,
											"end": 14910,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "210"
										},
										{
											"begin": 14844,
											"end": 14910,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 14844,
											"end": 14910,
											"name": "tag",
											"source": 8,
											"value": "321"
										},
										{
											"begin": 14844,
											"end": 14910,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 14926,
											"end": 14942,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14926,
											"end": 14942,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 14926,
											"end": 14942,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 14926,
											"end": 14942,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14926,
											"end": 14942,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 14661,
											"end": 14948,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14661,
											"end": 14948,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol",
								"lib/protocol/packages/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
								"lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
								"src/DeepFakeDetector.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"assertDataFor(bytes32,string,address)": "096464cc",
							"assertionDisputedCallback(bytes32)": "d448a4ec",
							"assertionLiveness()": "b75d4e24",
							"assertionResolvedCallback(bytes32,bool)": "f1b156b2",
							"defaultCurrency()": "20402e1d",
							"defaultIdentifier()": "d509b017",
							"getImage(bytes32)": "6ced1ae9",
							"oo()": "8921a614"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"imageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"ImageAsserted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"imageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"ImageAssertionResolved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"imageId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"asserter\",\"type\":\"address\"}],\"name\":\"assertDataFor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"assertionDisputedCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assertionLiveness\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"assertedTruthfully\",\"type\":\"bool\"}],\"name\":\"assertionResolvedCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultIdentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assertionId\",\"type\":\"bytes32\"}],\"name\":\"getImage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oo\",\"outputs\":[{\"internalType\":\"contract OptimisticOracleV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DeepFakeDetector.sol\":\"DeepFakeDetector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@uma/=lib/protocol/packages/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3dac621d015a68a5251b1e5d41dda0faf252699bf6e8bcf46a958b29964d9dd1\",\"dweb:/ipfs/QmP9axjgZv4cezAhALoTemM62sdLtMDJ9MGTxECnNwHgSJ\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x35e258421ae206f3db37281cea70871b4c3553914734aa76139a41af60ac1abb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ef94b6bc4ee356db612a1849c615f7dd4b15542d6c8584c86bb9243a7913cf0\",\"dweb:/ipfs/QmaxFj5NFpAjjitZtHPNS9PPtCuBATaRz9ktDDRCQCQ83y\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x8a63ea9ec07788740e51046ca14c61f411aedb901e89749c9d55fa56ed43086a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3035ae3f172ed9e172e1ba4d83bdc70279f63be51ce9218c530132def66ff577\",\"dweb:/ipfs/QmTQ3zfC3YUNeY3KUVFiHgTWDuxfmcEMgpGC6HMoTpgZJL\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xa6dfb97ce947b7c846b054ee7d45d12383359778f4f3743654ae0a34fa421b26\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b97e7e5a77ea47c08ba422291df887eba76c80982f52a6e94a30106e9377a94f\",\"dweb:/ipfs/Qme7N2XRC7mcDxB8wZxNWPk6T8S2qsnmhAqXeUj4CNvsGD\"]},\"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol\":{\"keccak256\":\"0x8ff33ac32d3e6de25de9e0ac2c0ff9a621f187fa97e9ee84092b327471baa3ce\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://0bbaed49756e8cf7ef405e132f441cd7a735ac6186a200b0179147e7d137b74a\",\"dweb:/ipfs/QmeSBJX5a61LZPxbkUKS2NF4LSxemgDwjD65fCAmyP7PX2\"]},\"lib/protocol/packages/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol\":{\"keccak256\":\"0xf8427cb144e47a47625df27e5182bd8f3774becf23d67fd16e51599bd1386bc5\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://63d4212d86dfc755e5eead59e05038aaf889be3e9daee9fd9a8070825c7b8b8f\",\"dweb:/ipfs/QmQ87qqtqhSQdfdEjT3wPGSitQ9uPoyYToVu9WTECqYsQP\"]},\"lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol\":{\"keccak256\":\"0x06c16f033cb100a20286b0f9c866a33a227a9e534544d5da6e5e20103d182d00\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://a354805eab907d5e9e7910f66ef5c5c5594bb5144a77541d6d30c6cb3cbd6871\",\"dweb:/ipfs/QmTfUDPJrsuUQ2aPwsbQwTaSvjUzBQFvFxXtmscZFymM4X\"]},\"src/DeepFakeDetector.sol\":{\"keccak256\":\"0xce5b10dec65feeaaff2ad5fd602ac43170d3dc84ba136c15e15836f3b4d474b7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://973a3876b7f46b8071436ef4b906480c90c6393912386f035f47c40ba5a0e76d\",\"dweb:/ipfs/QmUMefRARyApfvEuLDurak6TmYZcMvx4TLTXF6tsPNLgwz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1455,
								"contract": "src/DeepFakeDetector.sol:DeepFakeDetector",
								"label": "imageAssertions",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(ImageAssertion)1450_storage)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_bytes32,t_struct(ImageAssertion)1450_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct DeepFakeDetector.ImageAssertion)",
								"numberOfBytes": "32",
								"value": "t_struct(ImageAssertion)1450_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(ImageAssertion)1450_storage": {
								"encoding": "inplace",
								"label": "struct DeepFakeDetector.ImageAssertion",
								"members": [
									{
										"astId": 1443,
										"contract": "src/DeepFakeDetector.sol:DeepFakeDetector",
										"label": "imageId",
										"offset": 0,
										"slot": "0",
										"type": "t_bytes32"
									},
									{
										"astId": 1445,
										"contract": "src/DeepFakeDetector.sol:DeepFakeDetector",
										"label": "imageUrl",
										"offset": 0,
										"slot": "1",
										"type": "t_string_storage"
									},
									{
										"astId": 1447,
										"contract": "src/DeepFakeDetector.sol:DeepFakeDetector",
										"label": "asserter",
										"offset": 0,
										"slot": "2",
										"type": "t_address"
									},
									{
										"astId": 1449,
										"contract": "src/DeepFakeDetector.sol:DeepFakeDetector",
										"label": "resolved",
										"offset": 20,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "212:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 11,
									"name": "Transfer",
									"nameLocation": "394:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "419:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "403:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "441:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "425:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "445:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:0"
									},
									"src": "388:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 20,
									"name": "Approval",
									"nameLocation": "625:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "650:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "634:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "673:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "657:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "690:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "682:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:0"
									},
									"src": "619:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:0",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "820:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:0"
									},
									"scope": 77,
									"src": "774:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:0",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "931:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "971:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:0"
									},
									"scope": 77,
									"src": "912:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:0",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1202:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1219:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1211:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1231:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1223:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1257:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:0"
									},
									"scope": 77,
									"src": "1193:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1547:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1565:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1557:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1580:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1572:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1612:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:0"
									},
									"scope": 77,
									"src": "1538:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:0",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2283:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2299:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2291:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2316:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2308:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2342:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:0"
									},
									"scope": 77,
									"src": "2274:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:0",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2655:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2676:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2668:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2690:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2682:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2682:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2702:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2694:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2694:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:42:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2728:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2728:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2727:6:0"
									},
									"scope": 77,
									"src": "2646:88:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 78,
							"src": "202:2534:0",
							"usedErrors": []
						}
					],
					"src": "106:2631:0"
				},
				"id": 0
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							113
						]
					},
					"id": 114,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 79,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 80,
								"nodeType": "StructuredDocumentation",
								"src": "133:480:1",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 113,
							"linearizedBaseContracts": [
								113
							],
							"name": "IERC20Permit",
							"nameLocation": "624:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "643:792:1",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 98,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1449:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1473:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1465:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1465:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1496:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1488:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1488:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 87,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1521:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1513:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 86,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1513:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1544:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1536:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 88,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1568:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1562:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 90,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1562:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1587:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1579:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 92,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1579:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1606:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 98,
												"src": "1598:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 94,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1598:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1455:158:1"
									},
									"returnParameters": {
										"id": 97,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1622:0:1"
									},
									"scope": 113,
									"src": "1440:183:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "1629:294:1",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 106,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1937:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1952:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "1944:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1944:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1943:15:1"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "1982:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1982:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1981:9:1"
									},
									"scope": 113,
									"src": "1928:63:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "1997:128:1",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2192:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2208:2:1"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "2234:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 109,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2234:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2233:9:1"
									},
									"scope": 113,
									"src": "2183:60:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 114,
							"src": "614:1631:1",
							"usedErrors": []
						}
					],
					"src": "108:2138:1"
				},
				"id": 1
			},
			"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							819
						],
						"IERC20": [
							77
						],
						"IERC20Permit": [
							113
						],
						"SafeERC20": [
							489
						]
					},
					"id": 490,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 115,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "115:23:2"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 116,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 490,
							"sourceUnit": 78,
							"src": "140:23:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "../extensions/IERC20Permit.sol",
							"id": 117,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 490,
							"sourceUnit": 114,
							"src": "164:40:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 118,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 490,
							"sourceUnit": 820,
							"src": "205:36:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 119,
								"nodeType": "StructuredDocumentation",
								"src": "243:457:2",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 489,
							"linearizedBaseContracts": [
								489
							],
							"name": "SafeERC20",
							"nameLocation": "709:9:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 122,
									"libraryName": {
										"id": 120,
										"name": "Address",
										"nameLocations": [
											"731:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 819,
										"src": "731:7:2"
									},
									"nodeType": "UsingForDirective",
									"src": "725:26:2",
									"typeName": {
										"id": 121,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "743:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "1013:103:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 134,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 126,
															"src": "1043:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 137,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 126,
																			"src": "1073:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 138,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1079:8:2",
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 44,
																		"src": "1073:14:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 139,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1088:8:2",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1073:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 140,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 128,
																	"src": "1098:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 141,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "1102:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 135,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1050:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 136,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1054:18:2",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1050:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 142,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1050:58:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 133,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "1023:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1023:86:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "ExpressionStatement",
												"src": "1023:86:2"
											}
										]
									},
									"documentation": {
										"id": 123,
										"nodeType": "StructuredDocumentation",
										"src": "757:179:2",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "950:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "970:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "963:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 125,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 124,
														"name": "IERC20",
														"nameLocations": [
															"963:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "963:6:2"
													},
													"referencedDeclaration": 77,
													"src": "963:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "985:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "977:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "977:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "997:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "989:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 129,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "989:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "962:41:2"
									},
									"returnParameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1013:0:2"
									},
									"scope": 489,
									"src": "941:175:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 172,
										"nodeType": "Block",
										"src": "1445:113:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 160,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 150,
															"src": "1475:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 163,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 150,
																			"src": "1505:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 164,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1511:12:2",
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 76,
																		"src": "1505:18:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 165,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1524:8:2",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1505:27:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 166,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 152,
																	"src": "1534:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 167,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 154,
																	"src": "1540:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 168,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 156,
																	"src": "1544:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 161,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1482:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 162,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1486:18:2",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1482:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 169,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1482:68:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 159,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "1455:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1455:96:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 171,
												"nodeType": "ExpressionStatement",
												"src": "1455:96:2"
											}
										]
									},
									"documentation": {
										"id": 147,
										"nodeType": "StructuredDocumentation",
										"src": "1122:228:2",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 173,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1364:16:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1388:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1381:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 149,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 148,
														"name": "IERC20",
														"nameLocations": [
															"1381:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "1381:6:2"
													},
													"referencedDeclaration": 77,
													"src": "1381:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1403:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1395:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1395:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1417:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1409:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1409:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1429:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "1421:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1421:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1380:55:2"
									},
									"returnParameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1445:0:2"
									},
									"scope": 489,
									"src": "1355:203:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 216,
										"nodeType": "Block",
										"src": "1894:497:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 200,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 187,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 185,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 181,
																			"src": "2143:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 186,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2152:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2143:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 188,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2142:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 198,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 193,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "2183:4:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$489",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$489",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 192,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "2175:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 191,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "2175:7:2",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 194,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "2175:13:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 195,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 179,
																					"src": "2190:7:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 189,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 177,
																					"src": "2159:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$77",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 190,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2165:9:2",
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 54,
																				"src": "2159:15:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 196,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2159:39:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 197,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2202:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2159:44:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 199,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2158:46:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2142:62:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 201,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2218:56:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 184,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2121:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2121:163:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 203,
												"nodeType": "ExpressionStatement",
												"src": "2121:163:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 205,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 177,
															"src": "2314:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 208,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 177,
																			"src": "2344:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 209,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2350:7:2",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 64,
																		"src": "2344:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 210,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2358:8:2",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2344:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 211,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 179,
																	"src": "2368:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 212,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 181,
																	"src": "2377:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 206,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2321:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 207,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2325:18:2",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2321:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2321:62:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 204,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "2294:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2294:90:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 215,
												"nodeType": "ExpressionStatement",
												"src": "2294:90:2"
											}
										]
									},
									"documentation": {
										"id": 174,
										"nodeType": "StructuredDocumentation",
										"src": "1564:249:2",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 217,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nameLocation": "1827:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1846:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1839:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 176,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 175,
														"name": "IERC20",
														"nameLocations": [
															"1839:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "1839:6:2"
													},
													"referencedDeclaration": 77,
													"src": "1839:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1861:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1853:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1853:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1878:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1870:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1870:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1838:46:2"
									},
									"returnParameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1894:0:2"
									},
									"scope": 489,
									"src": "1818:573:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 253,
										"nodeType": "Block",
										"src": "2668:194:2",
										"statements": [
											{
												"assignments": [
													229
												],
												"declarations": [
													{
														"constant": false,
														"id": 229,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2686:12:2",
														"nodeType": "VariableDeclaration",
														"scope": 253,
														"src": "2678:20:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 228,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2678:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 238,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 234,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2725:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$489",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$489",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 233,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2717:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 232,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2717:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 235,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2717:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 236,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "2732:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 230,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 221,
															"src": "2701:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 231,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2707:9:2",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 54,
														"src": "2701:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 237,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2701:39:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2678:62:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 240,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 221,
															"src": "2770:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 243,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 221,
																			"src": "2800:5:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$77",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 244,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2806:7:2",
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 64,
																		"src": "2800:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 245,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2814:8:2",
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2800:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 246,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 223,
																	"src": "2824:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 249,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 247,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 229,
																		"src": "2833:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 248,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 225,
																		"src": "2848:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2833:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 241,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2777:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 242,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2781:18:2",
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2777:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2777:77:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 239,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 440,
														"src": "2750:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2750:105:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 252,
												"nodeType": "ExpressionStatement",
												"src": "2750:105:2"
											}
										]
									},
									"documentation": {
										"id": 218,
										"nodeType": "StructuredDocumentation",
										"src": "2397:180:2",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 254,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2591:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2620:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "2613:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 220,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 219,
														"name": "IERC20",
														"nameLocations": [
															"2613:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "2613:6:2"
													},
													"referencedDeclaration": 77,
													"src": "2613:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2635:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "2627:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2627:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2652:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "2644:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2644:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2612:46:2"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2668:0:2"
									},
									"scope": 489,
									"src": "2582:280:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 298,
										"nodeType": "Block",
										"src": "3139:321:2",
										"statements": [
											{
												"id": 297,
												"nodeType": "UncheckedBlock",
												"src": "3149:305:2",
												"statements": [
													{
														"assignments": [
															266
														],
														"declarations": [
															{
																"constant": false,
																"id": 266,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nameLocation": "3181:12:2",
																"nodeType": "VariableDeclaration",
																"scope": 297,
																"src": "3173:20:2",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 265,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "3173:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 275,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 271,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3220:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$489",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$489",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3212:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 269,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3212:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 272,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3212:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 273,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 260,
																	"src": "3227:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 267,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 258,
																	"src": "3196:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3202:9:2",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 54,
																"src": "3196:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 274,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3196:39:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "3173:62:2"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 279,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 277,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 266,
																		"src": "3257:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 278,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 262,
																		"src": "3273:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3257:21:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 280,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3280:43:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 276,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "3249:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 281,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3249:75:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 282,
														"nodeType": "ExpressionStatement",
														"src": "3249:75:2"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 284,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 258,
																	"src": "3358:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 287,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 258,
																					"src": "3388:5:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$77",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 288,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3394:7:2",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 64,
																				"src": "3388:13:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 289,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3402:8:2",
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "3388:22:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 290,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 260,
																			"src": "3412:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 293,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 291,
																				"name": "oldAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 266,
																				"src": "3421:12:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 292,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 262,
																				"src": "3436:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "3421:20:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 285,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "3365:3:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 286,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "3369:18:2",
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "3365:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3365:77:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 283,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 440,
																"src": "3338:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20,bytes memory)"
																}
															},
															"id": 295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3338:105:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 296,
														"nodeType": "ExpressionStatement",
														"src": "3338:105:2"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "2868:180:2",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "3062:21:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3091:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "3084:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 257,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 256,
														"name": "IERC20",
														"nameLocations": [
															"3084:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "3084:6:2"
													},
													"referencedDeclaration": 77,
													"src": "3084:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3106:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "3098:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3098:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3123:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "3115:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3115:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3083:46:2"
									},
									"returnParameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3139:0:2"
									},
									"scope": 489,
									"src": "3053:407:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 345,
										"nodeType": "Block",
										"src": "3833:333:2",
										"statements": [
											{
												"assignments": [
													311
												],
												"declarations": [
													{
														"constant": false,
														"id": 311,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "3856:12:2",
														"nodeType": "VariableDeclaration",
														"scope": 345,
														"src": "3843:25:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 310,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3843:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 320,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"expression": {
																	"id": 314,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 303,
																	"src": "3894:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 315,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3900:7:2",
																"memberName": "approve",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 64,
																"src": "3894:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,uint256) external returns (bool)"
																}
															},
															"id": 316,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3908:8:2",
															"memberName": "selector",
															"nodeType": "MemberAccess",
															"src": "3894:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														{
															"id": 317,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "3918:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 318,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 307,
															"src": "3927:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 312,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3871:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 313,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3875:18:2",
														"memberName": "encodeWithSelector",
														"nodeType": "MemberAccess",
														"src": "3871:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes4) pure returns (bytes memory)"
														}
													},
													"id": 319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3871:62:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3843:90:2"
											},
											{
												"condition": {
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3948:45:2",
													"subExpression": {
														"arguments": [
															{
																"id": 322,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 303,
																"src": "3973:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$77",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 323,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 311,
																"src": "3980:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$77",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 321,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 488,
															"src": "3949:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 324,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3949:44:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 344,
												"nodeType": "IfStatement",
												"src": "3944:216:2",
												"trueBody": {
													"id": 343,
													"nodeType": "Block",
													"src": "3995:165:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 327,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 303,
																		"src": "4029:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"expression": {
																						"id": 330,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 303,
																						"src": "4059:5:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$77",
																							"typeString": "contract IERC20"
																						}
																					},
																					"id": 331,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "4065:7:2",
																					"memberName": "approve",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 64,
																					"src": "4059:13:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																						"typeString": "function (address,uint256) external returns (bool)"
																					}
																				},
																				"id": 332,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4073:8:2",
																				"memberName": "selector",
																				"nodeType": "MemberAccess",
																				"src": "4059:22:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				}
																			},
																			{
																				"id": 333,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 305,
																				"src": "4083:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"hexValue": "30",
																				"id": 334,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4092:1:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"expression": {
																				"id": 328,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4036:3:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 329,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "4040:18:2",
																			"memberName": "encodeWithSelector",
																			"nodeType": "MemberAccess",
																			"src": "4036:22:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes4) pure returns (bytes memory)"
																			}
																		},
																		"id": 335,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4036:58:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 326,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 440,
																	"src": "4009:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 336,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4009:86:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 337,
															"nodeType": "ExpressionStatement",
															"src": "4009:86:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 339,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 303,
																		"src": "4129:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 340,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 311,
																		"src": "4136:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 338,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 440,
																	"src": "4109:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 341,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4109:40:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 342,
															"nodeType": "ExpressionStatement",
															"src": "4109:40:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 300,
										"nodeType": "StructuredDocumentation",
										"src": "3466:285:2",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n 0 before setting it to a non-zero value."
									},
									"id": 346,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3765:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3785:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "3778:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 302,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 301,
														"name": "IERC20",
														"nameLocations": [
															"3778:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "3778:6:2"
													},
													"referencedDeclaration": 77,
													"src": "3778:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3800:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "3792:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3792:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3817:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "3809:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 306,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3809:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3777:46:2"
									},
									"returnParameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3833:0:2"
									},
									"scope": 489,
									"src": "3756:410:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 402,
										"nodeType": "Block",
										"src": "4533:257:2",
										"statements": [
											{
												"assignments": [
													368
												],
												"declarations": [
													{
														"constant": false,
														"id": 368,
														"mutability": "mutable",
														"name": "nonceBefore",
														"nameLocation": "4551:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 402,
														"src": "4543:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 367,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4543:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 373,
												"initialValue": {
													"arguments": [
														{
															"id": 371,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "4578:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 369,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 350,
															"src": "4565:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 370,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4571:6:2",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 106,
														"src": "4565:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 372,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4565:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4543:41:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 377,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "4607:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 378,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 354,
															"src": "4614:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 379,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 356,
															"src": "4623:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 380,
															"name": "deadline",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 358,
															"src": "4630:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 381,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 360,
															"src": "4640:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 382,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "4643:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 383,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 364,
															"src": "4646:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 374,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 350,
															"src": "4594:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 376,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4600:6:2",
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 98,
														"src": "4594:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"
														}
													},
													"id": 384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4594:54:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 385,
												"nodeType": "ExpressionStatement",
												"src": "4594:54:2"
											},
											{
												"assignments": [
													387
												],
												"declarations": [
													{
														"constant": false,
														"id": 387,
														"mutability": "mutable",
														"name": "nonceAfter",
														"nameLocation": "4666:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 402,
														"src": "4658:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 386,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4658:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 392,
												"initialValue": {
													"arguments": [
														{
															"id": 390,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "4692:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 388,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 350,
															"src": "4679:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Permit_$113",
																"typeString": "contract IERC20Permit"
															}
														},
														"id": 389,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4685:6:2",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 106,
														"src": "4679:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4679:19:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4658:40:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 398,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 394,
																"name": "nonceAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 387,
																"src": "4716:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 397,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 395,
																	"name": "nonceBefore",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 368,
																	"src": "4730:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 396,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4744:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "4730:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4716:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a207065726d697420646964206e6f742073756363656564",
															"id": 399,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4747:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															},
															"value": "SafeERC20: permit did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d",
																"typeString": "literal_string \"SafeERC20: permit did not succeed\""
															}
														],
														"id": 393,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4708:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4708:75:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 401,
												"nodeType": "ExpressionStatement",
												"src": "4708:75:2"
											}
										]
									},
									"documentation": {
										"id": 347,
										"nodeType": "StructuredDocumentation",
										"src": "4172:141:2",
										"text": " @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."
									},
									"id": 403,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safePermit",
									"nameLocation": "4327:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4360:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4347:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Permit_$113",
													"typeString": "contract IERC20Permit"
												},
												"typeName": {
													"id": 349,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 348,
														"name": "IERC20Permit",
														"nameLocations": [
															"4347:12:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 113,
														"src": "4347:12:2"
													},
													"referencedDeclaration": 113,
													"src": "4347:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Permit_$113",
														"typeString": "contract IERC20Permit"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4383:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4375:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4375:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4406:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4398:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4398:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4431:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4423:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "4454:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4446:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4446:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "4478:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4472:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 359,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4472:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4497:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4489:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 361,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4489:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "4516:1:2",
												"nodeType": "VariableDeclaration",
												"scope": 403,
												"src": "4508:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 363,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4508:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4337:186:2"
									},
									"returnParameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4533:0:2"
									},
									"scope": 489,
									"src": "4318:472:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 439,
										"nodeType": "Block",
										"src": "5243:572:2",
										"statements": [
											{
												"assignments": [
													413
												],
												"declarations": [
													{
														"constant": false,
														"id": 413,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5605:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 439,
														"src": "5592:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 412,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5592:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 422,
												"initialValue": {
													"arguments": [
														{
															"id": 419,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "5646:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 420,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5652:34:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 416,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 407,
																	"src": "5626:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 415,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5618:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 414,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5618:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5618:14:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 418,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5633:12:2",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 579,
														"src": "5618:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5618:69:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5592:95:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 435,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 427,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 424,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 413,
																		"src": "5705:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 425,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "5716:6:2",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "5705:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 426,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5726:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5705:22:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 430,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 413,
																		"src": "5742:10:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 432,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5755:4:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				},
																				"typeName": {
																					"id": 431,
																					"name": "bool",
																					"nodeType": "ElementaryTypeName",
																					"src": "5755:4:2",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 433,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "5754:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_bool_$",
																			"typeString": "type(bool)"
																		}
																	],
																	"expression": {
																		"id": 428,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "5731:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 429,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "5735:6:2",
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "5731:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 434,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5731:30:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5705:56:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
															"id": 436,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5763:44:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															},
															"value": "SafeERC20: ERC20 operation did not succeed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
															}
														],
														"id": 423,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5697:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5697:111:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 438,
												"nodeType": "ExpressionStatement",
												"src": "5697:111:2"
											}
										]
									},
									"documentation": {
										"id": 404,
										"nodeType": "StructuredDocumentation",
										"src": "4796:372:2",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 440,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "5182:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5209:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "5202:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 406,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 405,
														"name": "IERC20",
														"nameLocations": [
															"5202:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "5202:6:2"
													},
													"referencedDeclaration": 77,
													"src": "5202:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5229:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 440,
												"src": "5216:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 408,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5216:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5201:33:2"
									},
									"returnParameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5243:0:2"
									},
									"scope": 489,
									"src": "5173:642:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 487,
										"nodeType": "Block",
										"src": "6405:505:2",
										"statements": [
											{
												"assignments": [
													452,
													454
												],
												"declarations": [
													{
														"constant": false,
														"id": 452,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6706:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 487,
														"src": "6701:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 451,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6701:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 454,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6728:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 487,
														"src": "6715:23:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 453,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6715:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 462,
												"initialValue": {
													"arguments": [
														{
															"id": 460,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "6762:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 457,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 444,
																	"src": "6750:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 456,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6742:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 455,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6742:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6742:14:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 459,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6757:4:2",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "6742:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 461,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6742:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6700:67:2"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 477,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 463,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 452,
															"src": "6796:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 475,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 467,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 464,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 454,
																				"src": "6808:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 465,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "6819:6:2",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "6808:17:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 466,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6829:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "6808:22:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 470,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 454,
																				"src": "6845:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 472,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "6858:4:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 471,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "6858:4:2",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 473,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "6857:6:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 468,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "6834:3:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 469,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "6838:6:2",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "6834:10:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6834:30:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "6808:56:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 476,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "6807:58:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "6796:69:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 482,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 444,
																		"src": "6896:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$77",
																			"typeString": "contract IERC20"
																		}
																	],
																	"id": 481,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "6888:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 480,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "6888:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6888:14:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 478,
																"name": "Address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 819,
																"src": "6869:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Address_$819_$",
																	"typeString": "type(library Address)"
																}
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6877:10:2",
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 507,
															"src": "6869:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 484,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6869:34:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6796:107:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 450,
												"id": 486,
												"nodeType": "Return",
												"src": "6777:126:2"
											}
										]
									},
									"documentation": {
										"id": 441,
										"nodeType": "StructuredDocumentation",
										"src": "5821:490:2",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 488,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "6325:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6356:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "6349:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 443,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 442,
														"name": "IERC20",
														"nameLocations": [
															"6349:6:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "6349:6:2"
													},
													"referencedDeclaration": 77,
													"src": "6349:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6376:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "6363:17:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 445,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6363:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6348:33:2"
									},
									"returnParameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 488,
												"src": "6399:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 448,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6399:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6398:6:2"
									},
									"scope": 489,
									"src": "6316:594:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 490,
							"src": "701:6211:2",
							"usedErrors": []
						}
					],
					"src": "115:6798:2"
				},
				"id": 2
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							819
						]
					},
					"id": 820,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 491,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "101:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 492,
								"nodeType": "StructuredDocumentation",
								"src": "126:67:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 819,
							"linearizedBaseContracts": [
								819
							],
							"name": "Address",
							"nameLocation": "202:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 506,
										"nodeType": "Block",
										"src": "1478:254:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 500,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 495,
																"src": "1702:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1710:4:3",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1702:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 502,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1715:6:3",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1702:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 503,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1724:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1702:23:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 499,
												"id": 505,
												"nodeType": "Return",
												"src": "1695:30:3"
											}
										]
									},
									"documentation": {
										"id": 493,
										"nodeType": "StructuredDocumentation",
										"src": "216:1191:3",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1421:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1440:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "1432:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 494,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1432:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1431:17:3"
									},
									"returnParameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 498,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "1472:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 497,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1472:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1471:6:3"
									},
									"scope": 819,
									"src": "1412:320:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 540,
										"nodeType": "Block",
										"src": "2718:241:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 522,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 518,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2744:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$819",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$819",
																				"typeString": "library Address"
																			}
																		],
																		"id": 517,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2736:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 516,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2736:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 519,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2736:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 520,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2750:7:3",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2736:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 521,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 512,
																"src": "2761:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2736:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 523,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2769:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 515,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2728:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2728:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 525,
												"nodeType": "ExpressionStatement",
												"src": "2728:73:3"
											},
											{
												"assignments": [
													527,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 527,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2818:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 540,
														"src": "2813:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 526,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2813:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 534,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 532,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2861:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 528,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 510,
																"src": "2831:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 529,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2841:4:3",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2831:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 531,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 530,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 512,
																"src": "2853:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2831:29:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 533,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2831:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2812:52:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 536,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 527,
															"src": "2882:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 537,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2891:60:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 535,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2874:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2874:78:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 539,
												"nodeType": "ExpressionStatement",
												"src": "2874:78:3"
											}
										]
									},
									"documentation": {
										"id": 508,
										"nodeType": "StructuredDocumentation",
										"src": "1738:904:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 541,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2656:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2682:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "2666:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2666:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2701:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "2693:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 511,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2665:43:3"
									},
									"returnParameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2718:0:3"
									},
									"scope": 819,
									"src": "2647:312:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 558,
										"nodeType": "Block",
										"src": "3790:96:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 552,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "3829:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 553,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "3837:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 554,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3843:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 555,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3846:32:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 551,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															599,
															643
														],
														"referencedDeclaration": 643,
														"src": "3807:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3807:72:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 550,
												"id": 557,
												"nodeType": "Return",
												"src": "3800:79:3"
											}
										]
									},
									"documentation": {
										"id": 542,
										"nodeType": "StructuredDocumentation",
										"src": "2965:731:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 559,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3710:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3731:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "3723:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 543,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3723:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3752:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "3739:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 545,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3739:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3722:35:3"
									},
									"returnParameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "3776:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 548,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3776:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3775:14:3"
									},
									"scope": 819,
									"src": "3701:185:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 578,
										"nodeType": "Block",
										"src": "4255:76:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 572,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 562,
															"src": "4294:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 573,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 564,
															"src": "4302:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 574,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4308:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 575,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 566,
															"src": "4311:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 571,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															599,
															643
														],
														"referencedDeclaration": 643,
														"src": "4272:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4272:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 570,
												"id": 577,
												"nodeType": "Return",
												"src": "4265:59:3"
											}
										]
									},
									"documentation": {
										"id": 560,
										"nodeType": "StructuredDocumentation",
										"src": "3892:211:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "4117:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 562,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4147:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4139:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 561,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4139:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 564,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4176:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4163:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 563,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4163:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4204:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4190:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 565,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4190:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4129:93:3"
									},
									"returnParameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4241:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 568,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4241:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4240:14:3"
									},
									"scope": 819,
									"src": "4108:223:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 598,
										"nodeType": "Block",
										"src": "4806:111:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 592,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 582,
															"src": "4845:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 593,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 584,
															"src": "4853:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 594,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 586,
															"src": "4859:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 595,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4866:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 591,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															599,
															643
														],
														"referencedDeclaration": 643,
														"src": "4823:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4823:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 590,
												"id": 597,
												"nodeType": "Return",
												"src": "4816:94:3"
											}
										]
									},
									"documentation": {
										"id": 580,
										"nodeType": "StructuredDocumentation",
										"src": "4337:351:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 599,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4702:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4732:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 599,
												"src": "4724:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4724:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4753:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 599,
												"src": "4740:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 583,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4740:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4767:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 599,
												"src": "4759:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 585,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4759:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4723:50:3"
									},
									"returnParameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 599,
												"src": "4792:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 588,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4792:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4791:14:3"
									},
									"scope": 819,
									"src": "4693:224:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 642,
										"nodeType": "Block",
										"src": "5344:267:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 616,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5370:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$819",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$819",
																				"typeString": "library Address"
																			}
																		],
																		"id": 615,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5362:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 614,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5362:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5362:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 618,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5376:7:3",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5362:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 619,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 606,
																"src": "5387:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5362:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 621,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5394:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 613,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5354:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5354:81:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 623,
												"nodeType": "ExpressionStatement",
												"src": "5354:81:3"
											},
											{
												"assignments": [
													625,
													627
												],
												"declarations": [
													{
														"constant": false,
														"id": 625,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5451:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 642,
														"src": "5446:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 624,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5446:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 627,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5473:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 642,
														"src": "5460:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 626,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5460:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 634,
												"initialValue": {
													"arguments": [
														{
															"id": 632,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 604,
															"src": "5513:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 628,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 602,
																"src": "5487:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 629,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5494:4:3",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5487:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 631,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 630,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 606,
																"src": "5506:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5487:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 633,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5487:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5445:73:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 636,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 602,
															"src": "5562:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 637,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 625,
															"src": "5570:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 638,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 627,
															"src": "5579:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 639,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 608,
															"src": "5591:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 635,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "5535:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5535:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 612,
												"id": 641,
												"nodeType": "Return",
												"src": "5528:76:3"
											}
										]
									},
									"documentation": {
										"id": 600,
										"nodeType": "StructuredDocumentation",
										"src": "4923:237:3",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 643,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5174:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 602,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5213:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5205:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 601,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5205:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5242:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5229:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 603,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5229:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5264:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5256:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 605,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5256:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5293:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5279:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 607,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5279:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5195:116:3"
									},
									"returnParameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 643,
												"src": "5330:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 610,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5330:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5329:14:3"
									},
									"scope": 819,
									"src": "5165:446:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 659,
										"nodeType": "Block",
										"src": "5888:97:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 654,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 646,
															"src": "5924:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 655,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 648,
															"src": "5932:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 656,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5938:39:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 653,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															660,
															689
														],
														"referencedDeclaration": 689,
														"src": "5905:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5905:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 652,
												"id": 658,
												"nodeType": "Return",
												"src": "5898:80:3"
											}
										]
									},
									"documentation": {
										"id": 644,
										"nodeType": "StructuredDocumentation",
										"src": "5617:166:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 660,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5797:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 646,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5824:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "5816:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 645,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5816:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5845:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "5832:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 647,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5832:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5815:35:3"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "5874:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 650,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5874:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5873:14:3"
									},
									"scope": 819,
									"src": "5788:197:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 688,
										"nodeType": "Block",
										"src": "6327:168:3",
										"statements": [
											{
												"assignments": [
													673,
													675
												],
												"declarations": [
													{
														"constant": false,
														"id": 673,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6343:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 688,
														"src": "6338:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 672,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6338:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 675,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6365:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 688,
														"src": "6352:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 674,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6352:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 680,
												"initialValue": {
													"arguments": [
														{
															"id": 678,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 665,
															"src": "6397:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 676,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 663,
															"src": "6379:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 677,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6386:10:3",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6379:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6379:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6337:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 682,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 663,
															"src": "6446:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 683,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 673,
															"src": "6454:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 684,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 675,
															"src": "6463:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 685,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "6475:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 681,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "6419:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 686,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6419:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 671,
												"id": 687,
												"nodeType": "Return",
												"src": "6412:76:3"
											}
										]
									},
									"documentation": {
										"id": 661,
										"nodeType": "StructuredDocumentation",
										"src": "5991:173:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 689,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6178:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6214:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "6206:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 662,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6206:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6243:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "6230:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 664,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6230:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6271:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "6257:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 666,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6257:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6196:93:3"
									},
									"returnParameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 670,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "6313:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 669,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6313:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6312:14:3"
									},
									"scope": 819,
									"src": "6169:326:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 705,
										"nodeType": "Block",
										"src": "6771:101:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 700,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 692,
															"src": "6809:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 701,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "6817:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 702,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6823:41:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 699,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															706,
															735
														],
														"referencedDeclaration": 735,
														"src": "6788:20:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6788:77:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 698,
												"id": 704,
												"nodeType": "Return",
												"src": "6781:84:3"
											}
										]
									},
									"documentation": {
										"id": 690,
										"nodeType": "StructuredDocumentation",
										"src": "6501:168:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 706,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "6683:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6712:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "6704:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 691,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6704:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6733:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "6720:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 693,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6720:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6703:35:3"
									},
									"returnParameters": {
										"id": 698,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 697,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "6757:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 696,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6757:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6756:14:3"
									},
									"scope": 819,
									"src": "6674:198:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 734,
										"nodeType": "Block",
										"src": "7213:170:3",
										"statements": [
											{
												"assignments": [
													719,
													721
												],
												"declarations": [
													{
														"constant": false,
														"id": 719,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "7229:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 734,
														"src": "7224:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 718,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7224:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 721,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "7251:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 734,
														"src": "7238:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 720,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7238:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 726,
												"initialValue": {
													"arguments": [
														{
															"id": 724,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "7285:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 722,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "7265:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 723,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7272:12:3",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "7265:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7265:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7223:67:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 728,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "7334:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 729,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 719,
															"src": "7342:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 730,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 721,
															"src": "7351:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 731,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 713,
															"src": "7363:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 727,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "7307:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7307:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 717,
												"id": 733,
												"nodeType": "Return",
												"src": "7300:76:3"
											}
										]
									},
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "6878:175:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 735,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "7067:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7105:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "7097:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7097:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7134:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "7121:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 710,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7121:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7162:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "7148:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 712,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7148:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7087:93:3"
									},
									"returnParameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 735,
												"src": "7199:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 715,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7199:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7198:14:3"
									},
									"scope": 819,
									"src": "7058:325:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 773,
										"nodeType": "Block",
										"src": "7865:434:3",
										"statements": [
											{
												"condition": {
													"id": 749,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 740,
													"src": "7879:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 771,
													"nodeType": "Block",
													"src": "8235:58:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 767,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 742,
																		"src": "8257:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 768,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 744,
																		"src": "8269:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 766,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 818,
																	"src": "8249:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 769,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8249:33:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 770,
															"nodeType": "ExpressionStatement",
															"src": "8249:33:3"
														}
													]
												},
												"id": 772,
												"nodeType": "IfStatement",
												"src": "7875:418:3",
												"trueBody": {
													"id": 765,
													"nodeType": "Block",
													"src": "7888:341:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 753,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 750,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 742,
																		"src": "7906:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 751,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7917:6:3",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7906:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 752,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7927:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7906:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 762,
															"nodeType": "IfStatement",
															"src": "7902:286:3",
															"trueBody": {
																"id": 761,
																"nodeType": "Block",
																"src": "7930:258:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 756,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 738,
																							"src": "8132:6:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 755,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 507,
																						"src": "8121:10:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 757,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "8121:18:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 758,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "8141:31:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 754,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "8113:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 759,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8113:60:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 760,
																		"nodeType": "ExpressionStatement",
																		"src": "8113:60:3"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 763,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 742,
																"src": "8208:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 748,
															"id": 764,
															"nodeType": "Return",
															"src": "8201:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 736,
										"nodeType": "StructuredDocumentation",
										"src": "7389:277:3",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 774,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "7680:26:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "7724:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "7716:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 737,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7716:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7745:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "7740:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 739,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7740:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7775:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "7762:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 741,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7762:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7809:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "7795:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 743,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7795:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7706:121:3"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "7851:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 746,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7851:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7850:14:3"
									},
									"scope": 819,
									"src": "7671:628:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 797,
										"nodeType": "Block",
										"src": "8680:135:3",
										"statements": [
											{
												"condition": {
													"id": 786,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 777,
													"src": "8694:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 795,
													"nodeType": "Block",
													"src": "8751:58:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 791,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 779,
																		"src": "8773:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 792,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 781,
																		"src": "8785:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 790,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 818,
																	"src": "8765:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 793,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8765:33:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 794,
															"nodeType": "ExpressionStatement",
															"src": "8765:33:3"
														}
													]
												},
												"id": 796,
												"nodeType": "IfStatement",
												"src": "8690:119:3",
												"trueBody": {
													"id": 789,
													"nodeType": "Block",
													"src": "8703:42:3",
													"statements": [
														{
															"expression": {
																"id": 787,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 779,
																"src": "8724:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 785,
															"id": 788,
															"nodeType": "Return",
															"src": "8717:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 775,
										"nodeType": "StructuredDocumentation",
										"src": "8305:210:3",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 798,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "8529:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "8560:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "8555:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 776,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8555:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8590:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "8577:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 778,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8577:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8624:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "8610:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 780,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8610:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8545:97:3"
									},
									"returnParameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "8666:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 783,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8666:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8665:14:3"
									},
									"scope": 819,
									"src": "8520:295:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 817,
										"nodeType": "Block",
										"src": "8904:457:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 805,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 800,
															"src": "8980:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 806,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8991:6:3",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8980:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 807,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9000:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8980:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 815,
													"nodeType": "Block",
													"src": "9310:45:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 812,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 802,
																		"src": "9331:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 811,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "9324:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 813,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9324:20:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 814,
															"nodeType": "ExpressionStatement",
															"src": "9324:20:3"
														}
													]
												},
												"id": 816,
												"nodeType": "IfStatement",
												"src": "8976:379:3",
												"trueBody": {
													"id": 810,
													"nodeType": "Block",
													"src": "9003:301:3",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "9161:133:3",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9179:40:3",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "9208:10:3"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "9202:5:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9202:17:3"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "9183:15:3",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9247:2:3",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "9251:10:3"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "9243:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9243:19:3"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "9264:15:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9236:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9236:44:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9236:44:3"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 800,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9208:10:3",
																	"valueSize": 1
																},
																{
																	"declaration": 800,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "9251:10:3",
																	"valueSize": 1
																}
															],
															"id": 809,
															"nodeType": "InlineAssembly",
															"src": "9152:142:3"
														}
													]
												}
											}
										]
									},
									"id": 818,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "8830:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 800,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "8851:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "8838:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 799,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8838:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 802,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8877:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "8863:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 801,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8863:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8837:53:3"
									},
									"returnParameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8904:0:3"
									},
									"scope": 819,
									"src": "8821:540:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 820,
							"src": "194:9169:3",
							"usedErrors": []
						}
					],
					"src": "101:9263:3"
				},
				"id": 3
			},
			"lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol": {
				"ast": {
					"absolutePath": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol",
					"exportedSymbols": {
						"AncillaryData": [
							1227
						]
					},
					"id": 1228,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 821,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AncillaryData",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 822,
								"nodeType": "StructuredDocumentation",
								"src": "67:595:4",
								"text": " @title Library for encoding and decoding ancillary data for DVM price requests.\n @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\n web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\n dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\n smart contracts. More details on UMA's ancillary data guidelines below:\n https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit"
							},
							"fullyImplemented": true,
							"id": 1227,
							"linearizedBaseContracts": [
								1227
							],
							"name": "AncillaryData",
							"nameLocation": "671:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 961,
										"nodeType": "Block",
										"src": "974:1229:4",
										"statements": [
											{
												"id": 960,
												"nodeType": "UncheckedBlock",
												"src": "984:1213:4",
												"statements": [
													{
														"assignments": [
															830
														],
														"declarations": [
															{
																"constant": false,
																"id": 830,
																"mutability": "mutable",
																"name": "x",
																"nameLocation": "1016:1:4",
																"nodeType": "VariableDeclaration",
																"scope": 960,
																"src": "1008:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 829,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1008:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 835,
														"initialValue": {
															"arguments": [
																{
																	"id": 833,
																	"name": "bytesIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 824,
																	"src": "1028:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 832,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1020:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 831,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1020:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 834,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1020:16:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1008:28:4"
													},
													{
														"expression": {
															"id": 840,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 836,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1084:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 839,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 837,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 830,
																	"src": "1088:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830303030303030303030303030303030303030303030303030303030303030306666666666666666666666666666666666666666666666666666666666666666",
																	"id": 838,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1092:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_340282366920938463463374607431768211455_by_1",
																		"typeString": "int_const 3402...(31 digits omitted)...1455"
																	},
																	"value": "0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff"
																},
																"src": "1088:70:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1084:74:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 841,
														"nodeType": "ExpressionStatement",
														"src": "1084:74:4"
													},
													{
														"expression": {
															"id": 854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 842,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1172:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 853,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 850,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 843,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 830,
																				"src": "1177:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "|",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 848,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 844,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 830,
																							"src": "1182:1:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"commonType": {
																								"typeIdentifier": "t_rational_18446744073709551616_by_1",
																								"typeString": "int_const 18446744073709551616"
																							},
																							"id": 847,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"leftExpression": {
																								"hexValue": "32",
																								"id": 845,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1186:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_2_by_1",
																									"typeString": "int_const 2"
																								},
																								"value": "2"
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "**",
																							"rightExpression": {
																								"hexValue": "3634",
																								"id": 846,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1189:2:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_64_by_1",
																									"typeString": "int_const 64"
																								},
																								"value": "64"
																							},
																							"src": "1186:5:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_18446744073709551616_by_1",
																								"typeString": "int_const 18446744073709551616"
																							}
																						},
																						"src": "1182:9:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 849,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1181:11:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1177:15:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 851,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1176:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830303030303030303030303030303030666666666666666666666666666666663030303030303030303030303030303066666666666666666666666666666666",
																	"id": 852,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1196:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_6277101735386680763495507056286727952657427581105975853055_by_1",
																		"typeString": "int_const 6277...(50 digits omitted)...3055"
																	},
																	"value": "0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff"
																},
																"src": "1176:86:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1172:90:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 855,
														"nodeType": "ExpressionStatement",
														"src": "1172:90:4"
													},
													{
														"expression": {
															"id": 868,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 856,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1276:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 867,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 864,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 857,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 830,
																				"src": "1281:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "|",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 862,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 858,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 830,
																							"src": "1286:1:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"commonType": {
																								"typeIdentifier": "t_rational_4294967296_by_1",
																								"typeString": "int_const 4294967296"
																							},
																							"id": 861,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"leftExpression": {
																								"hexValue": "32",
																								"id": 859,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1290:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_2_by_1",
																									"typeString": "int_const 2"
																								},
																								"value": "2"
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "**",
																							"rightExpression": {
																								"hexValue": "3332",
																								"id": 860,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1293:2:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_32_by_1",
																									"typeString": "int_const 32"
																								},
																								"value": "32"
																							},
																							"src": "1290:5:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_4294967296_by_1",
																								"typeString": "int_const 4294967296"
																							}
																						},
																						"src": "1286:9:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 863,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1285:11:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1281:15:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 865,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1280:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830303030303030306666666666666666303030303030303066666666666666663030303030303030666666666666666630303030303030306666666666666666",
																	"id": 866,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1300:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_26959946660873538060741835960174461801791452538186943042387869433855_by_1",
																		"typeString": "int_const 2695...(60 digits omitted)...3855"
																	},
																	"value": "0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff"
																},
																"src": "1280:86:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1276:90:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 869,
														"nodeType": "ExpressionStatement",
														"src": "1276:90:4"
													},
													{
														"expression": {
															"id": 882,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 870,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1380:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 881,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 878,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 871,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 830,
																				"src": "1385:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "|",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 876,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 872,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 830,
																							"src": "1390:1:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"commonType": {
																								"typeIdentifier": "t_rational_65536_by_1",
																								"typeString": "int_const 65536"
																							},
																							"id": 875,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"leftExpression": {
																								"hexValue": "32",
																								"id": 873,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1394:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_2_by_1",
																									"typeString": "int_const 2"
																								},
																								"value": "2"
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "**",
																							"rightExpression": {
																								"hexValue": "3136",
																								"id": 874,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1397:2:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_16_by_1",
																									"typeString": "int_const 16"
																								},
																								"value": "16"
																							},
																							"src": "1394:5:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_65536_by_1",
																								"typeString": "int_const 65536"
																							}
																						},
																						"src": "1390:9:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 877,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1389:11:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1385:15:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 879,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1384:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830303030666666663030303066666666303030306666666630303030666666663030303066666666303030306666666630303030666666663030303066666666",
																	"id": 880,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1766820105243087041267848467410591083712559083657179364930612997358944255_by_1",
																		"typeString": "int_const 1766...(65 digits omitted)...4255"
																	},
																	"value": "0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff"
																},
																"src": "1384:86:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1380:90:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 883,
														"nodeType": "ExpressionStatement",
														"src": "1380:90:4"
													},
													{
														"expression": {
															"id": 896,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 884,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1484:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 895,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 892,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 885,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 830,
																				"src": "1489:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "|",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 890,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 886,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 830,
																							"src": "1494:1:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"commonType": {
																								"typeIdentifier": "t_rational_256_by_1",
																								"typeString": "int_const 256"
																							},
																							"id": 889,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"leftExpression": {
																								"hexValue": "32",
																								"id": 887,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1498:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_2_by_1",
																									"typeString": "int_const 2"
																								},
																								"value": "2"
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "**",
																							"rightExpression": {
																								"hexValue": "38",
																								"id": 888,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1501:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_8_by_1",
																									"typeString": "int_const 8"
																								},
																								"value": "8"
																							},
																							"src": "1498:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_256_by_1",
																								"typeString": "int_const 256"
																							}
																						},
																						"src": "1494:8:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 891,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1493:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1489:14:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 893,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1488:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830306666303066663030666630306666303066663030666630306666303066663030666630306666303066663030666630306666303066663030666630306666",
																	"id": 894,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1507:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_450552876409790643671482431940419874915447411150352389258589821042463539455_by_1",
																		"typeString": "int_const 4505...(67 digits omitted)...9455"
																	},
																	"value": "0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff"
																},
																"src": "1488:85:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1484:89:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 897,
														"nodeType": "ExpressionStatement",
														"src": "1484:89:4"
													},
													{
														"expression": {
															"id": 910,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 898,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "1587:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 909,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 906,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 899,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 830,
																				"src": "1592:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "|",
																			"rightExpression": {
																				"components": [
																					{
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 904,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"id": 900,
																							"name": "x",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 830,
																							"src": "1597:1:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"commonType": {
																								"typeIdentifier": "t_rational_16_by_1",
																								"typeString": "int_const 16"
																							},
																							"id": 903,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"leftExpression": {
																								"hexValue": "32",
																								"id": 901,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1601:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_2_by_1",
																									"typeString": "int_const 2"
																								},
																								"value": "2"
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "**",
																							"rightExpression": {
																								"hexValue": "34",
																								"id": 902,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1604:1:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_4_by_1",
																									"typeString": "int_const 4"
																								},
																								"value": "4"
																							},
																							"src": "1601:4:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_16_by_1",
																								"typeString": "int_const 16"
																							}
																						},
																						"src": "1597:8:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					}
																				],
																				"id": 905,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "1596:10:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "1592:14:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 907,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1591:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"hexValue": "307830663066306630663066306630663066306630663066306630663066306630663066306630663066306630663066306630663066306630663066306630663066",
																	"id": 908,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1610:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_6811299366900952671974763824040465167839410862684739061144563765171360567055_by_1",
																		"typeString": "int_const 6811...(68 digits omitted)...7055"
																	},
																	"value": "0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f"
																},
																"src": "1591:85:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1587:89:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 911,
														"nodeType": "ExpressionStatement",
														"src": "1587:89:4"
													},
													{
														"assignments": [
															913
														],
														"declarations": [
															{
																"constant": false,
																"id": 913,
																"mutability": "mutable",
																"name": "h",
																"nameLocation": "1725:1:4",
																"nodeType": "VariableDeclaration",
																"scope": 960,
																"src": "1717:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 912,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1717:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 920,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 919,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 916,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 914,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 830,
																			"src": "1730:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307830383038303830383038303830383038303830383038303830383038303830383038303830383038303830383038303830383038303830383038303830383038",
																			"id": 915,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1734:66:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3632692995680508091719874039488248089514352460098527499277100674758058969096_by_1",
																				"typeString": "int_const 3632...(68 digits omitted)...9096"
																			},
																			"value": "0x0808080808080808080808080808080808080808080808080808080808080808"
																		},
																		"src": "1730:70:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 917,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1729:72:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "38",
																"id": 918,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1804:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_8_by_1",
																	"typeString": "int_const 8"
																},
																"value": "8"
															},
															"src": "1729:76:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1717:88:4"
													},
													{
														"assignments": [
															922
														],
														"declarations": [
															{
																"constant": false,
																"id": 922,
																"mutability": "mutable",
																"name": "i",
																"nameLocation": "1827:1:4",
																"nodeType": "VariableDeclaration",
																"scope": 960,
																"src": "1819:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 921,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1819:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 929,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 928,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 925,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 923,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 830,
																			"src": "1832:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307830343034303430343034303430343034303430343034303430343034303430343034303430343034303430343034303430343034303430343034303430343034",
																			"id": 924,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1836:66:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1816346497840254045859937019744124044757176230049263749638550337379029484548_by_1",
																				"typeString": "int_const 1816...(68 digits omitted)...4548"
																			},
																			"value": "0x0404040404040404040404040404040404040404040404040404040404040404"
																		},
																		"src": "1832:70:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 926,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1831:72:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "34",
																"id": 927,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1906:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_4_by_1",
																	"typeString": "int_const 4"
																},
																"value": "4"
															},
															"src": "1831:76:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1819:88:4"
													},
													{
														"assignments": [
															931
														],
														"declarations": [
															{
																"constant": false,
																"id": 931,
																"mutability": "mutable",
																"name": "j",
																"nameLocation": "1929:1:4",
																"nodeType": "VariableDeclaration",
																"scope": 960,
																"src": "1921:9:4",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 930,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1921:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 938,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 937,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 934,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 932,
																			"name": "x",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 830,
																			"src": "1934:1:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307830323032303230323032303230323032303230323032303230323032303230323032303230323032303230323032303230323032303230323032303230323032",
																			"id": 933,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1938:66:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_908173248920127022929968509872062022378588115024631874819275168689514742274_by_1",
																				"typeString": "int_const 9081...(67 digits omitted)...2274"
																			},
																			"value": "0x0202020202020202020202020202020202020202020202020202020202020202"
																		},
																		"src": "1934:70:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 935,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1933:72:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"hexValue": "32",
																"id": 936,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2008:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1933:76:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1921:88:4"
													},
													{
														"expression": {
															"id": 953,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 939,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 830,
																"src": "2023:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 952,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 950,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 940,
																		"name": "x",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 830,
																		"src": "2027:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 949,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"components": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 946,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 941,
																						"name": "h",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 913,
																						"src": "2032:1:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "&",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 944,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 942,
																									"name": "i",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 922,
																									"src": "2037:1:4",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "|",
																								"rightExpression": {
																									"id": 943,
																									"name": "j",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 931,
																									"src": "2041:1:4",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "2037:5:4",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 945,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "2036:7:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "2032:11:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"id": 947,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "2031:13:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"hexValue": "30783237",
																			"id": 948,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2047:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_39_by_1",
																				"typeString": "int_const 39"
																			},
																			"value": "0x27"
																		},
																		"src": "2031:20:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2027:24:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "307833303330333033303330333033303330333033303330333033303330333033303330333033303330333033303330333033303330333033303330333033303330",
																	"id": 951,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2054:66:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_21796157974083048550319244236929488537086114760591164995662604048548353814576_by_1",
																		"typeString": "int_const 2179...(69 digits omitted)...4576"
																	},
																	"value": "0x3030303030303030303030303030303030303030303030303030303030303030"
																},
																"src": "2027:93:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2023:97:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 954,
														"nodeType": "ExpressionStatement",
														"src": "2023:97:4"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 957,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 830,
																	"src": "2184:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 956,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2176:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 955,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "2176:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 958,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2176:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"functionReturnParameters": 828,
														"id": 959,
														"nodeType": "Return",
														"src": "2169:17:4"
													}
												]
											}
										]
									},
									"id": 962,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUtf8Bytes32Bottom",
									"nameLocation": "906:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 824,
												"mutability": "mutable",
												"name": "bytesIn",
												"nameLocation": "934:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "926:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 823,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:17:4"
									},
									"returnParameters": {
										"id": 828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 962,
												"src": "965:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 826,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "965:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "964:9:4"
									},
									"scope": 1227,
									"src": "897:1306:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 982,
										"nodeType": "Block",
										"src": "2661:107:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"id": 975,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 973,
																		"name": "bytesIn",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 965,
																		"src": "2715:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">>",
																	"rightExpression": {
																		"hexValue": "313238",
																		"id": 974,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2726:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_128_by_1",
																			"typeString": "int_const 128"
																		},
																		"value": "128"
																	},
																	"src": "2715:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 972,
																"name": "toUtf8Bytes32Bottom",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 962,
																"src": "2695:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32) pure returns (bytes32)"
																}
															},
															"id": 976,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2695:35:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"id": 978,
																	"name": "bytesIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 965,
																	"src": "2752:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 977,
																"name": "toUtf8Bytes32Bottom",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 962,
																"src": "2732:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32) pure returns (bytes32)"
																}
															},
															"id": 979,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2732:28:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 970,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "2678:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 971,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "2682:12:4",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "2678:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2678:83:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 969,
												"id": 981,
												"nodeType": "Return",
												"src": "2671:90:4"
											}
										]
									},
									"documentation": {
										"id": 963,
										"nodeType": "StructuredDocumentation",
										"src": "2209:372:4",
										"text": " @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\n @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\n This has minor changes from the toUtf8BytesAddress to control for the size of the input.\n @param bytesIn bytes32 to encode.\n @return utf8 encoded bytes32."
									},
									"id": 983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUtf8Bytes",
									"nameLocation": "2595:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 965,
												"mutability": "mutable",
												"name": "bytesIn",
												"nameLocation": "2615:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "2607:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 964,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2607:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2606:17:4"
									},
									"returnParameters": {
										"id": 969,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 968,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "2647:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 967,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2647:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2646:14:4"
									},
									"scope": 1227,
									"src": "2586:182:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1015,
										"nodeType": "Block",
										"src": "3221:142:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"id": 1002,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 998,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 986,
																						"src": "3303:1:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 997,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "3295:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes20_$",
																						"typeString": "type(bytes20)"
																					},
																					"typeName": {
																						"id": 996,
																						"name": "bytes20",
																						"nodeType": "ElementaryTypeName",
																						"src": "3295:7:4",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 999,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3295:10:4",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes20",
																					"typeString": "bytes20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes20",
																					"typeString": "bytes20"
																				}
																			],
																			"id": 995,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3287:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 994,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "3287:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1000,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3287:19:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">>",
																	"rightExpression": {
																		"hexValue": "313238",
																		"id": 1001,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3310:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_128_by_1",
																			"typeString": "int_const 128"
																		},
																		"value": "128"
																	},
																	"src": "3287:26:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 993,
																"name": "toUtf8Bytes32Bottom",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 962,
																"src": "3267:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32) pure returns (bytes32)"
																}
															},
															"id": 1003,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3267:47:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1009,
																					"name": "x",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 986,
																					"src": "3351:1:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1008,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "3343:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bytes20_$",
																					"typeString": "type(bytes20)"
																				},
																				"typeName": {
																					"id": 1007,
																					"name": "bytes20",
																					"nodeType": "ElementaryTypeName",
																					"src": "3343:7:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1010,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3343:10:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes20",
																				"typeString": "bytes20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes20",
																				"typeString": "bytes20"
																			}
																		],
																		"id": 1006,
																		"name": "toUtf8Bytes32Bottom",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 962,
																		"src": "3323:19:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 1011,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3323:31:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 1005,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3316:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes8_$",
																	"typeString": "type(bytes8)"
																},
																"typeName": {
																	"id": 1004,
																	"name": "bytes8",
																	"nodeType": "ElementaryTypeName",
																	"src": "3316:6:4",
																	"typeDescriptions": {}
																}
															},
															"id": 1012,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3316:39:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes8",
																"typeString": "bytes8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes8",
																"typeString": "bytes8"
															}
														],
														"expression": {
															"id": 991,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3250:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 992,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3254:12:4",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "3250:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3250:106:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 990,
												"id": 1014,
												"nodeType": "Return",
												"src": "3231:125:4"
											}
										]
									},
									"documentation": {
										"id": 984,
										"nodeType": "StructuredDocumentation",
										"src": "2774:366:4",
										"text": " @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\n Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\n @dev Will return address in all lower case characters and without the leading 0x.\n @param x address to encode.\n @return utf8 encoded address bytes."
									},
									"id": 1016,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUtf8BytesAddress",
									"nameLocation": "3154:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 987,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3181:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "3173:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 985,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3173:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3172:11:4"
									},
									"returnParameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "3207:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 988,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3207:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3206:14:4"
									},
									"scope": 1227,
									"src": "3145:218:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1108,
										"nodeType": "Block",
										"src": "3642:473:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1026,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1024,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1019,
														"src": "3656:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1025,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3661:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3656:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1030,
												"nodeType": "IfStatement",
												"src": "3652:47:4",
												"trueBody": {
													"id": 1029,
													"nodeType": "Block",
													"src": "3664:35:4",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1027,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3685:3:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 1023,
															"id": 1028,
															"nodeType": "Return",
															"src": "3678:10:4"
														}
													]
												}
											},
											{
												"assignments": [
													1032
												],
												"declarations": [
													{
														"constant": false,
														"id": 1032,
														"mutability": "mutable",
														"name": "j",
														"nameLocation": "3716:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 1108,
														"src": "3708:9:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1031,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3708:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1034,
												"initialValue": {
													"id": 1033,
													"name": "x",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1019,
													"src": "3720:1:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3708:13:4"
											},
											{
												"assignments": [
													1036
												],
												"declarations": [
													{
														"constant": false,
														"id": 1036,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "3739:3:4",
														"nodeType": "VariableDeclaration",
														"scope": 1108,
														"src": "3731:11:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1035,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3731:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1037,
												"nodeType": "VariableDeclarationStatement",
												"src": "3731:11:4"
											},
											{
												"body": {
													"id": 1048,
													"nodeType": "Block",
													"src": "3767:51:4",
													"statements": [
														{
															"expression": {
																"id": 1042,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "3781:5:4",
																"subExpression": {
																	"id": 1041,
																	"name": "len",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1036,
																	"src": "3781:3:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1043,
															"nodeType": "ExpressionStatement",
															"src": "3781:5:4"
														},
														{
															"expression": {
																"id": 1046,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1044,
																	"name": "j",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1032,
																	"src": "3800:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1045,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3805:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "3800:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1047,
															"nodeType": "ExpressionStatement",
															"src": "3800:7:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1040,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1038,
														"name": "j",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1032,
														"src": "3759:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1039,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3764:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3759:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1049,
												"nodeType": "WhileStatement",
												"src": "3752:66:4"
											},
											{
												"assignments": [
													1051
												],
												"declarations": [
													{
														"constant": false,
														"id": 1051,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "3840:4:4",
														"nodeType": "VariableDeclaration",
														"scope": 1108,
														"src": "3827:17:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1050,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3827:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1056,
												"initialValue": {
													"arguments": [
														{
															"id": 1054,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1036,
															"src": "3857:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1053,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "3847:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1052,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3851:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3847:14:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3827:34:4"
											},
											{
												"assignments": [
													1058
												],
												"declarations": [
													{
														"constant": false,
														"id": 1058,
														"mutability": "mutable",
														"name": "k",
														"nameLocation": "3879:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 1108,
														"src": "3871:9:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1057,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3871:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1060,
												"initialValue": {
													"id": 1059,
													"name": "len",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1036,
													"src": "3883:3:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3871:15:4"
											},
											{
												"body": {
													"id": 1104,
													"nodeType": "Block",
													"src": "3911:177:4",
													"statements": [
														{
															"expression": {
																"id": 1068,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1064,
																	"name": "k",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1058,
																	"src": "3925:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1067,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1065,
																		"name": "k",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1058,
																		"src": "3929:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1066,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3933:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "3929:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3925:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1069,
															"nodeType": "ExpressionStatement",
															"src": "3925:9:4"
														},
														{
															"assignments": [
																1071
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1071,
																	"mutability": "mutable",
																	"name": "temp",
																	"nameLocation": "3954:4:4",
																	"nodeType": "VariableDeclaration",
																	"scope": 1104,
																	"src": "3948:10:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1070,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "3948:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1086,
															"initialValue": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		"id": 1084,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "3438",
																			"id": 1072,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3962:2:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_48_by_1",
																				"typeString": "int_const 48"
																			},
																			"value": "48"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "+",
																		"rightExpression": {
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1082,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1075,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1019,
																						"src": "3973:1:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"commonType": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						},
																						"id": 1081,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftExpression": {
																							"components": [
																								{
																									"commonType": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									},
																									"id": 1078,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": false,
																									"lValueRequested": false,
																									"leftExpression": {
																										"id": 1076,
																										"name": "x",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1019,
																										"src": "3978:1:4",
																										"typeDescriptions": {
																											"typeIdentifier": "t_uint256",
																											"typeString": "uint256"
																										}
																									},
																									"nodeType": "BinaryOperation",
																									"operator": "/",
																									"rightExpression": {
																										"hexValue": "3130",
																										"id": 1077,
																										"isConstant": false,
																										"isLValue": false,
																										"isPure": true,
																										"kind": "number",
																										"lValueRequested": false,
																										"nodeType": "Literal",
																										"src": "3982:2:4",
																										"typeDescriptions": {
																											"typeIdentifier": "t_rational_10_by_1",
																											"typeString": "int_const 10"
																										},
																										"value": "10"
																									},
																									"src": "3978:6:4",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								}
																							],
																							"id": 1079,
																							"isConstant": false,
																							"isInlineArray": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "TupleExpression",
																							"src": "3977:8:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "BinaryOperation",
																						"operator": "*",
																						"rightExpression": {
																							"hexValue": "3130",
																							"id": 1080,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "3988:2:4",
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_10_by_1",
																								"typeString": "int_const 10"
																							},
																							"value": "10"
																						},
																						"src": "3977:13:4",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "3973:17:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1074,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "3967:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 1073,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "3967:5:4",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1083,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3967:24:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		},
																		"src": "3962:29:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 1085,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3961:31:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3948:44:4"
														},
														{
															"assignments": [
																1088
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1088,
																	"mutability": "mutable",
																	"name": "b1",
																	"nameLocation": "4013:2:4",
																	"nodeType": "VariableDeclaration",
																	"scope": 1104,
																	"src": "4006:9:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	},
																	"typeName": {
																		"id": 1087,
																		"name": "bytes1",
																		"nodeType": "ElementaryTypeName",
																		"src": "4006:6:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes1",
																			"typeString": "bytes1"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1093,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1091,
																		"name": "temp",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1071,
																		"src": "4025:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 1090,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4018:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes1_$",
																		"typeString": "type(bytes1)"
																	},
																	"typeName": {
																		"id": 1089,
																		"name": "bytes1",
																		"nodeType": "ElementaryTypeName",
																		"src": "4018:6:4",
																		"typeDescriptions": {}
																	}
																},
																"id": 1092,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4018:12:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4006:24:4"
														},
														{
															"expression": {
																"id": 1098,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1094,
																		"name": "bstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1051,
																		"src": "4044:4:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1096,
																	"indexExpression": {
																		"id": 1095,
																		"name": "k",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1058,
																		"src": "4049:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "4044:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1097,
																	"name": "b1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1088,
																	"src": "4054:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "4044:12:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1099,
															"nodeType": "ExpressionStatement",
															"src": "4044:12:4"
														},
														{
															"expression": {
																"id": 1102,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1100,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1019,
																	"src": "4070:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1101,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4075:2:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "4070:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1103,
															"nodeType": "ExpressionStatement",
															"src": "4070:7:4"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1063,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1061,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1019,
														"src": "3903:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1062,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3908:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3903:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1105,
												"nodeType": "WhileStatement",
												"src": "3896:192:4"
											},
											{
												"expression": {
													"id": 1106,
													"name": "bstr",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1051,
													"src": "4104:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1023,
												"id": 1107,
												"nodeType": "Return",
												"src": "4097:11:4"
											}
										]
									},
									"documentation": {
										"id": 1017,
										"nodeType": "StructuredDocumentation",
										"src": "3369:195:4",
										"text": " @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\n @dev This method is based off of this code: https://stackoverflow.com/a/65707309."
									},
									"id": 1109,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toUtf8BytesUint",
									"nameLocation": "3578:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3602:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "3594:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1018,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3594:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3593:11:4"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "3628:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1021,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3628:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:14:4"
									},
									"scope": 1227,
									"src": "3569:546:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1136,
										"nodeType": "Block",
										"src": "4287:164:4",
										"statements": [
											{
												"assignments": [
													1121
												],
												"declarations": [
													{
														"constant": false,
														"id": 1121,
														"mutability": "mutable",
														"name": "prefix",
														"nameLocation": "4310:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 1136,
														"src": "4297:19:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1120,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4297:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1126,
												"initialValue": {
													"arguments": [
														{
															"id": 1123,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1111,
															"src": "4335:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1124,
															"name": "key",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1113,
															"src": "4357:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1122,
														"name": "constructPrefix",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1226,
														"src": "4319:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 1125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4319:42:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4297:64:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1129,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1111,
															"src": "4395:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1130,
															"name": "prefix",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1121,
															"src": "4417:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 1132,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1115,
																	"src": "4437:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 1131,
																"name": "toUtf8Bytes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 983,
																"src": "4425:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes32) pure returns (bytes memory)"
																}
															},
															"id": 1133,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4425:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1127,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "4378:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1128,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "4382:12:4",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "4378:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4378:66:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1119,
												"id": 1135,
												"nodeType": "Return",
												"src": "4371:73:4"
											}
										]
									},
									"id": 1137,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "appendKeyValueBytes32",
									"nameLocation": "4130:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1111,
												"mutability": "mutable",
												"name": "currentAncillaryData",
												"nameLocation": "4174:20:4",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "4161:33:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1110,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4161:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "4217:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "4204:16:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1112,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4204:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4238:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "4230:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1114,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4230:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4151:98:4"
									},
									"returnParameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "4273:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1117,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4273:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4272:14:4"
									},
									"scope": 1227,
									"src": "4121:330:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1165,
										"nodeType": "Block",
										"src": "5350:171:4",
										"statements": [
											{
												"assignments": [
													1150
												],
												"declarations": [
													{
														"constant": false,
														"id": 1150,
														"mutability": "mutable",
														"name": "prefix",
														"nameLocation": "5373:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 1165,
														"src": "5360:19:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1149,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5360:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1155,
												"initialValue": {
													"arguments": [
														{
															"id": 1152,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1140,
															"src": "5398:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1153,
															"name": "key",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1142,
															"src": "5420:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1151,
														"name": "constructPrefix",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1226,
														"src": "5382:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 1154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5382:42:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5360:64:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1158,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1140,
															"src": "5458:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1159,
															"name": "prefix",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1150,
															"src": "5480:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 1161,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1144,
																	"src": "5507:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1160,
																"name": "toUtf8BytesAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1016,
																"src": "5488:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (address) pure returns (bytes memory)"
																}
															},
															"id": 1162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5488:25:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1156,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5441:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1157,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5445:12:4",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "5441:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5441:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1148,
												"id": 1164,
												"nodeType": "Return",
												"src": "5434:80:4"
											}
										]
									},
									"documentation": {
										"id": 1138,
										"nodeType": "StructuredDocumentation",
										"src": "4457:722:4",
										"text": " @notice Adds \"key:value\" to `currentAncillaryData` where `value` is an address that first needs to be converted\n to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\n @return Newly appended ancillary data."
									},
									"id": 1166,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "appendKeyValueAddress",
									"nameLocation": "5193:21:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "currentAncillaryData",
												"nameLocation": "5237:20:4",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5224:33:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1139,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5224:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "5280:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5267:16:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1141,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5267:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5301:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5293:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5293:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5214:98:4"
									},
									"returnParameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1147,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1166,
												"src": "5336:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1146,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5336:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5335:14:4"
									},
									"scope": 1227,
									"src": "5184:337:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1194,
										"nodeType": "Block",
										"src": "6409:168:4",
										"statements": [
											{
												"assignments": [
													1179
												],
												"declarations": [
													{
														"constant": false,
														"id": 1179,
														"mutability": "mutable",
														"name": "prefix",
														"nameLocation": "6432:6:4",
														"nodeType": "VariableDeclaration",
														"scope": 1194,
														"src": "6419:19:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1178,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6419:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1184,
												"initialValue": {
													"arguments": [
														{
															"id": 1181,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1169,
															"src": "6457:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1182,
															"name": "key",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "6479:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1180,
														"name": "constructPrefix",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1226,
														"src": "6441:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory,bytes memory) pure returns (bytes memory)"
														}
													},
													"id": 1183,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6441:42:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6419:64:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1187,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1169,
															"src": "6517:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1188,
															"name": "prefix",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1179,
															"src": "6539:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 1190,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1173,
																	"src": "6563:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1189,
																"name": "toUtf8BytesUint",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1109,
																"src": "6547:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (bytes memory)"
																}
															},
															"id": 1191,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6547:22:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1185,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "6500:3:4",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1186,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "6504:12:4",
														"memberName": "encodePacked",
														"nodeType": "MemberAccess",
														"src": "6500:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6500:70:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1177,
												"id": 1193,
												"nodeType": "Return",
												"src": "6493:77:4"
											}
										]
									},
									"documentation": {
										"id": 1167,
										"nodeType": "StructuredDocumentation",
										"src": "5527:714:4",
										"text": " @notice Adds \"key:value\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\n to utf8 bytes. For example, if `utf8(currentAncillaryData)=\"k1:v1\"`, then this function will return\n `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\n @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\n @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\n @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\n @return Newly appended ancillary data."
									},
									"id": 1195,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "appendKeyValueUint",
									"nameLocation": "6255:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "currentAncillaryData",
												"nameLocation": "6296:20:4",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "6283:33:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1168,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6283:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "6339:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "6326:16:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1170,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6326:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6360:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "6352:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6352:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6273:98:4"
									},
									"returnParameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "6395:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1175,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6395:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6394:14:4"
									},
									"scope": 1227,
									"src": "6246:331:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1225,
										"nodeType": "Block",
										"src": "7043:180:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1205,
															"name": "currentAncillaryData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1198,
															"src": "7057:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1206,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7078:6:4",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7057:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1207,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7087:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7057:31:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1223,
													"nodeType": "Block",
													"src": "7159:58:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1219,
																		"name": "key",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1200,
																		"src": "7197:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "3a",
																		"id": 1220,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7202:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c",
																			"typeString": "literal_string \":\""
																		},
																		"value": ":"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c",
																			"typeString": "literal_string \":\""
																		}
																	],
																	"expression": {
																		"id": 1217,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "7180:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1218,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7184:12:4",
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "7180:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1221,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7180:26:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1204,
															"id": 1222,
															"nodeType": "Return",
															"src": "7173:33:4"
														}
													]
												},
												"id": 1224,
												"nodeType": "IfStatement",
												"src": "7053:164:4",
												"trueBody": {
													"id": 1216,
													"nodeType": "Block",
													"src": "7090:63:4",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"hexValue": "2c",
																		"id": 1211,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7128:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
																			"typeString": "literal_string \",\""
																		},
																		"value": ","
																	},
																	{
																		"id": 1212,
																		"name": "key",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1200,
																		"src": "7133:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "3a",
																		"id": 1213,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7138:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c",
																			"typeString": "literal_string \":\""
																		},
																		"value": ":"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_3e7a35b97029f9e0cf6effd71c1a7958822e9a217d3a3aec886668a7dd8231cb",
																			"typeString": "literal_string \",\""
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c",
																			"typeString": "literal_string \":\""
																		}
																	],
																	"expression": {
																		"id": 1209,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "7111:3:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1210,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7115:12:4",
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "7111:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1214,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7111:31:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1204,
															"id": 1215,
															"nodeType": "Return",
															"src": "7104:38:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1196,
										"nodeType": "StructuredDocumentation",
										"src": "6583:340:4",
										"text": " @notice Helper method that returns the left hand side of a \"key:value\" pair plus the colon \":\" and a leading\n comma \",\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\n some utf8 value that is ultimately added to a comma-delimited, key-value dictionary."
									},
									"id": 1226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "constructPrefix",
									"nameLocation": "6937:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "currentAncillaryData",
												"nameLocation": "6966:20:4",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "6953:33:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1197,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6953:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "7001:3:4",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "6988:16:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1199,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6988:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6952:53:4"
									},
									"returnParameters": {
										"id": 1204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "7029:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1202,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7029:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7028:14:4"
									},
									"scope": 1227,
									"src": "6928:295:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1228,
							"src": "663:6562:4",
							"usedErrors": []
						}
					],
					"src": "42:7184:4"
				},
				"id": 4
			},
			"lib/protocol/packages/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol": {
				"ast": {
					"absolutePath": "lib/protocol/packages/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
					"exportedSymbols": {
						"ClaimData": [
							1227
						]
					},
					"id": 1232,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1229,
							"literals": [
								"solidity",
								"0.8",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:5"
						},
						{
							"absolutePath": "lib/protocol/packages/core/contracts/common/implementation/AncillaryData.sol",
							"file": "../../common/implementation/AncillaryData.sol",
							"id": 1231,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1232,
							"sourceUnit": 1228,
							"src": "67:91:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1230,
										"name": "AncillaryData",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1227,
										"src": "76:13:5",
										"typeDescriptions": {}
									},
									"local": "ClaimData",
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "42:117:5"
				},
				"id": 5
			},
			"lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol": {
				"ast": {
					"absolutePath": "lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
					"exportedSymbols": {
						"IERC20": [
							77
						],
						"OptimisticOracleV3Interface": [
							1421
						]
					},
					"id": 1422,
					"license": "AGPL-3.0-only",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1233,
							"literals": [
								"solidity",
								"0.8",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "42:23:6"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1234,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1422,
							"sourceUnit": 78,
							"src": "67:56:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "OptimisticOracleV3Interface",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1235,
								"nodeType": "StructuredDocumentation",
								"src": "125:104:6",
								"text": " @title Optimistic Oracle V3 Interface that callers must use to assert truths about the world."
							},
							"fullyImplemented": false,
							"id": 1421,
							"linearizedBaseContracts": [
								1421
							],
							"name": "OptimisticOracleV3Interface",
							"nameLocation": "240:27:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "OptimisticOracleV3Interface.EscalationManagerSettings",
									"id": 1246,
									"members": [
										{
											"constant": false,
											"id": 1237,
											"mutability": "mutable",
											"name": "arbitrateViaEscalationManager",
											"nameLocation": "426:29:6",
											"nodeType": "VariableDeclaration",
											"scope": 1246,
											"src": "421:34:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1236,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "421:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1239,
											"mutability": "mutable",
											"name": "discardOracle",
											"nameLocation": "540:13:6",
											"nodeType": "VariableDeclaration",
											"scope": 1246,
											"src": "535:18:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1238,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "535:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1241,
											"mutability": "mutable",
											"name": "validateDisputers",
											"nameLocation": "641:17:6",
											"nodeType": "VariableDeclaration",
											"scope": 1246,
											"src": "636:22:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1240,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "636:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1243,
											"mutability": "mutable",
											"name": "assertingCaller",
											"nameLocation": "742:15:6",
											"nodeType": "VariableDeclaration",
											"scope": 1246,
											"src": "734:23:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1242,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "734:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1245,
											"mutability": "mutable",
											"name": "escalationManager",
											"nameLocation": "821:17:6",
											"nodeType": "VariableDeclaration",
											"scope": 1246,
											"src": "813:25:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1244,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "813:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "EscalationManagerSettings",
									"nameLocation": "385:25:6",
									"nodeType": "StructDefinition",
									"scope": 1421,
									"src": "378:538:6",
									"visibility": "public"
								},
								{
									"canonicalName": "OptimisticOracleV3Interface.Assertion",
									"id": 1273,
									"members": [
										{
											"constant": false,
											"id": 1249,
											"mutability": "mutable",
											"name": "escalationManagerSettings",
											"nameLocation": "1043:25:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1017:51:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_EscalationManagerSettings_$1246_storage_ptr",
												"typeString": "struct OptimisticOracleV3Interface.EscalationManagerSettings"
											},
											"typeName": {
												"id": 1248,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1247,
													"name": "EscalationManagerSettings",
													"nameLocations": [
														"1017:25:6"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1246,
													"src": "1017:25:6"
												},
												"referencedDeclaration": 1246,
												"src": "1017:25:6",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_EscalationManagerSettings_$1246_storage_ptr",
													"typeString": "struct OptimisticOracleV3Interface.EscalationManagerSettings"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1251,
											"mutability": "mutable",
											"name": "asserter",
											"nameLocation": "1133:8:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1125:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1250,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1125:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1253,
											"mutability": "mutable",
											"name": "assertionTime",
											"nameLocation": "1186:13:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1179:20:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1252,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "1179:6:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1255,
											"mutability": "mutable",
											"name": "settled",
											"nameLocation": "1240:7:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1235:12:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1254,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1235:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1258,
											"mutability": "mutable",
											"name": "currency",
											"nameLocation": "1299:8:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1292:15:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IERC20_$77",
												"typeString": "contract IERC20"
											},
											"typeName": {
												"id": 1257,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1256,
													"name": "IERC20",
													"nameLocations": [
														"1292:6:6"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 77,
													"src": "1292:6:6"
												},
												"referencedDeclaration": 77,
												"src": "1292:6:6",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1260,
											"mutability": "mutable",
											"name": "expirationTime",
											"nameLocation": "1369:14:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1362:21:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 1259,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "1362:6:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1262,
											"mutability": "mutable",
											"name": "settlementResolution",
											"nameLocation": "1480:20:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1475:25:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1261,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1475:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1264,
											"mutability": "mutable",
											"name": "domainId",
											"nameLocation": "1572:8:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1564:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1263,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1564:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1266,
											"mutability": "mutable",
											"name": "identifier",
											"nameLocation": "1694:10:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1686:18:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1265,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1686:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1268,
											"mutability": "mutable",
											"name": "bond",
											"nameLocation": "1797:4:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1789:12:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1267,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1789:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1270,
											"mutability": "mutable",
											"name": "callbackRecipient",
											"nameLocation": "1871:17:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1863:25:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1269,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1863:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1272,
											"mutability": "mutable",
											"name": "disputer",
											"nameLocation": "1945:8:6",
											"nodeType": "VariableDeclaration",
											"scope": 1273,
											"src": "1937:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1271,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1937:7:6",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Assertion",
									"nameLocation": "997:9:6",
									"nodeType": "StructDefinition",
									"scope": 1421,
									"src": "990:998:6",
									"visibility": "public"
								},
								{
									"canonicalName": "OptimisticOracleV3Interface.WhitelistedCurrency",
									"id": 1278,
									"members": [
										{
											"constant": false,
											"id": 1275,
											"mutability": "mutable",
											"name": "isWhitelisted",
											"nameLocation": "2089:13:6",
											"nodeType": "VariableDeclaration",
											"scope": 1278,
											"src": "2084:18:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1274,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2084:4:6",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1277,
											"mutability": "mutable",
											"name": "finalFee",
											"nameLocation": "2160:8:6",
											"nodeType": "VariableDeclaration",
											"scope": 1278,
											"src": "2152:16:6",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1276,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2152:7:6",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "WhitelistedCurrency",
									"nameLocation": "2054:19:6",
									"nodeType": "StructDefinition",
									"scope": 1421,
									"src": "2047:158:6",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1279,
										"nodeType": "StructuredDocumentation",
										"src": "2211:130:6",
										"text": " @notice Returns the default identifier used by the Optimistic Oracle V3.\n @return The default identifier."
									},
									"functionSelector": "d509b017",
									"id": 1284,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "defaultIdentifier",
									"nameLocation": "2355:17:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1280,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2372:2:6"
									},
									"returnParameters": {
										"id": 1283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1284,
												"src": "2398:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1281,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2398:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2397:9:6"
									},
									"scope": 1421,
									"src": "2346:61:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1285,
										"nodeType": "StructuredDocumentation",
										"src": "2413:235:6",
										"text": " @notice Fetches information about a specific assertion and returns it.\n @param assertionId unique identifier for the assertion to fetch information for.\n @return assertion information about the assertion."
									},
									"functionSelector": "88302884",
									"id": 1293,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAssertion",
									"nameLocation": "2662:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1287,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "2683:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "2675:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1286,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2675:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2674:21:6"
									},
									"returnParameters": {
										"id": 1292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1291,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "2719:16:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Assertion_$1273_memory_ptr",
													"typeString": "struct OptimisticOracleV3Interface.Assertion"
												},
												"typeName": {
													"id": 1290,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1289,
														"name": "Assertion",
														"nameLocations": [
															"2719:9:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1273,
														"src": "2719:9:6"
													},
													"referencedDeclaration": 1273,
													"src": "2719:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Assertion_$1273_storage_ptr",
														"typeString": "struct OptimisticOracleV3Interface.Assertion"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2718:18:6"
									},
									"scope": 1421,
									"src": "2653:84:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1294,
										"nodeType": "StructuredDocumentation",
										"src": "2743:807:6",
										"text": " @notice Asserts a truth about the world, using the default currency and liveness. No callback recipient or\n escalation manager is enabled. The caller is expected to provide a bond of finalFee/burnedBondPercentage\n (with burnedBondPercentage set to 50%, the bond is 2x final fee) of the default currency.\n @dev The caller must approve this contract to spend at least the result of getMinimumBond(defaultCurrency).\n @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\n @param asserter receives bonds back at settlement. This could be msg.sender or\n any other account that the caller wants to receive the bond at settlement time.\n @return assertionId unique identifier for this assertion."
									},
									"functionSelector": "36b13af4",
									"id": 1303,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "assertTruthWithDefaults",
									"nameLocation": "3564:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1296,
												"mutability": "mutable",
												"name": "claim",
												"nameLocation": "3601:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "3588:18:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1295,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3588:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1298,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "3616:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "3608:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3608:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3587:38:6"
									},
									"returnParameters": {
										"id": 1302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1301,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "3644:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1300,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3644:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3643:9:6"
									},
									"scope": 1421,
									"src": "3555:98:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1304,
										"nodeType": "StructuredDocumentation",
										"src": "3659:2287:6",
										"text": " @notice Asserts a truth about the world, using a fully custom configuration.\n @dev The caller must approve this contract to spend at least bond amount of currency.\n @param claim the truth claim being asserted. This is an assertion about the world, and is verified by disputers.\n @param asserter receives bonds back at settlement. This could be msg.sender or\n any other account that the caller wants to receive the bond at settlement time.\n @param callbackRecipient if configured, this address will receive a function call assertionResolvedCallback and\n assertionDisputedCallback at resolution or dispute respectively. Enables dynamic responses to these events. The\n recipient _must_ implement these callbacks and not revert or the assertion resolution will be blocked.\n @param escalationManager if configured, this address will control escalation properties of the assertion. This\n means a) choosing to arbitrate via the UMA DVM, b) choosing to discard assertions on dispute, or choosing to\n validate disputes. Combining these, the asserter can define their own security properties for the assertion.\n escalationManager also _must_ implement the same callbacks as callbackRecipient.\n @param liveness time to wait before the assertion can be resolved. Assertion can be disputed in this time.\n @param currency bond currency pulled from the caller and held in escrow until the assertion is resolved.\n @param bond amount of currency to pull from the caller and hold in escrow until the assertion is resolved. This\n must be >= getMinimumBond(address(currency)).\n @param identifier UMA DVM identifier to use for price requests in the event of a dispute. Must be pre-approved.\n @param domainId optional domain that can be used to relate this assertion to others in the escalationManager and\n can be used by the configured escalationManager to define custom behavior for groups of assertions. This is\n typically used for \"escalation games\" by changing bonds or other assertion properties based on the other\n assertions that have come before. If not needed this value should be 0 to save gas.\n @return assertionId unique identifier for this assertion."
									},
									"functionSelector": "6457c979",
									"id": 1328,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "assertTruth",
									"nameLocation": "5960:11:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1306,
												"mutability": "mutable",
												"name": "claim",
												"nameLocation": "5994:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "5981:18:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1305,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5981:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "6017:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6009:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6009:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1310,
												"mutability": "mutable",
												"name": "callbackRecipient",
												"nameLocation": "6043:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6035:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6035:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1312,
												"mutability": "mutable",
												"name": "escalationManager",
												"nameLocation": "6078:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6070:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1311,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6070:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1314,
												"mutability": "mutable",
												"name": "liveness",
												"nameLocation": "6112:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6105:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1313,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6105:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1317,
												"mutability": "mutable",
												"name": "currency",
												"nameLocation": "6137:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6130:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1316,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1315,
														"name": "IERC20",
														"nameLocations": [
															"6130:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "6130:6:6"
													},
													"referencedDeclaration": 77,
													"src": "6130:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1319,
												"mutability": "mutable",
												"name": "bond",
												"nameLocation": "6163:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6155:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1318,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6155:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1321,
												"mutability": "mutable",
												"name": "identifier",
												"nameLocation": "6185:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6177:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1320,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6177:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "domainId",
												"nameLocation": "6213:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6205:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1322,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6205:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5971:256:6"
									},
									"returnParameters": {
										"id": 1327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1328,
												"src": "6246:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1325,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6246:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6245:9:6"
									},
									"scope": 1421,
									"src": "5951:304:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1329,
										"nodeType": "StructuredDocumentation",
										"src": "6261:460:6",
										"text": " @notice Fetches information about a specific identifier & currency from the UMA contracts and stores a local copy\n of the information within this contract. This is used to save gas when making assertions as we can avoid an\n external call to the UMA contracts to fetch this.\n @param identifier identifier to fetch information for and store locally.\n @param currency currency to fetch information for and store locally."
									},
									"functionSelector": "a8655785",
									"id": 1336,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "syncUmaParams",
									"nameLocation": "6735:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "identifier",
												"nameLocation": "6757:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1336,
												"src": "6749:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1330,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6749:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1333,
												"mutability": "mutable",
												"name": "currency",
												"nameLocation": "6777:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1336,
												"src": "6769:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6769:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6748:38:6"
									},
									"returnParameters": {
										"id": 1335,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6795:0:6"
									},
									"scope": 1421,
									"src": "6726:70:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1337,
										"nodeType": "StructuredDocumentation",
										"src": "6802:621:6",
										"text": " @notice Resolves an assertion. If the assertion has not been disputed, the assertion is resolved as true and the\n asserter receives the bond. If the assertion has been disputed, the assertion is resolved depending on the oracle\n result. Based on the result, the asserter or disputer receives the bond. If the assertion was disputed then an\n amount of the bond is sent to the UMA Store as an oracle fee based on the burnedBondPercentage. The remainder of\n the bond is returned to the asserter or disputer.\n @param assertionId unique identifier for the assertion to resolve."
									},
									"functionSelector": "4124beef",
									"id": 1342,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "settleAssertion",
									"nameLocation": "7437:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1339,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "7461:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1342,
												"src": "7453:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1338,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7453:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7452:21:6"
									},
									"returnParameters": {
										"id": 1341,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7482:0:6"
									},
									"scope": 1421,
									"src": "7428:55:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1343,
										"nodeType": "StructuredDocumentation",
										"src": "7489:223:6",
										"text": " @notice Settles an assertion and returns the resolution.\n @param assertionId unique identifier for the assertion to resolve and return the resolution for.\n @return resolution of the assertion."
									},
									"functionSelector": "8ea2f2ab",
									"id": 1350,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "settleAndGetAssertionResult",
									"nameLocation": "7726:27:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "7762:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1350,
												"src": "7754:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1344,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7754:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7753:21:6"
									},
									"returnParameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1350,
												"src": "7793:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1347,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7793:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7792:6:6"
									},
									"scope": 1421,
									"src": "7717:82:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1351,
										"nodeType": "StructuredDocumentation",
										"src": "7805:384:6",
										"text": " @notice Fetches the resolution of a specific assertion and returns it. If the assertion has not been settled then\n this will revert. If the assertion was disputed and configured to discard the oracle resolution return false.\n @param assertionId unique identifier for the assertion to fetch the resolution for.\n @return resolution of the assertion."
									},
									"functionSelector": "e39dfd7f",
									"id": 1358,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAssertionResult",
									"nameLocation": "8203:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1353,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "8230:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1358,
												"src": "8222:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1352,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8222:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8221:21:6"
									},
									"returnParameters": {
										"id": 1357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1356,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1358,
												"src": "8266:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1355,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8266:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8265:6:6"
									},
									"scope": 1421,
									"src": "8194:78:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1359,
										"nodeType": "StructuredDocumentation",
										"src": "8278:353:6",
										"text": " @notice Returns the minimum bond amount required to make an assertion. This is calculated as the final fee of the\n currency divided by the burnedBondPercentage. If burn percentage is 50% then the min bond is 2x the final fee.\n @param currency currency to calculate the minimum bond for.\n @return minimum bond amount."
									},
									"functionSelector": "4360af3d",
									"id": 1366,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getMinimumBond",
									"nameLocation": "8645:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1361,
												"mutability": "mutable",
												"name": "currency",
												"nameLocation": "8668:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1366,
												"src": "8660:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1360,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8660:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8659:18:6"
									},
									"returnParameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1364,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1366,
												"src": "8701:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1363,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8701:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8700:9:6"
									},
									"scope": 1421,
									"src": "8636:74:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"eventSelector": "db1513f0abeb57a364db56aa3eb52015cca5268f00fd67bc73aaf22bccab02b7",
									"id": 1391,
									"name": "AssertionMade",
									"nameLocation": "8722:13:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1368,
												"indexed": true,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "8761:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8745:27:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1367,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8745:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"indexed": false,
												"mutability": "mutable",
												"name": "domainId",
												"nameLocation": "8790:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8782:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1369,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8782:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1372,
												"indexed": false,
												"mutability": "mutable",
												"name": "claim",
												"nameLocation": "8814:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8808:11:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1371,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8808:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1374,
												"indexed": true,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "8845:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8829:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8829:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"indexed": false,
												"mutability": "mutable",
												"name": "callbackRecipient",
												"nameLocation": "8871:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8863:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8863:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1378,
												"indexed": false,
												"mutability": "mutable",
												"name": "escalationManager",
												"nameLocation": "8906:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8898:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8898:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"indexed": false,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "8941:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8933:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8933:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1382,
												"indexed": false,
												"mutability": "mutable",
												"name": "expirationTime",
												"nameLocation": "8964:14:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8957:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1381,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8957:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1385,
												"indexed": false,
												"mutability": "mutable",
												"name": "currency",
												"nameLocation": "8995:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "8988:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1384,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1383,
														"name": "IERC20",
														"nameLocations": [
															"8988:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "8988:6:6"
													},
													"referencedDeclaration": 77,
													"src": "8988:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1387,
												"indexed": false,
												"mutability": "mutable",
												"name": "bond",
												"nameLocation": "9021:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "9013:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1386,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9013:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1389,
												"indexed": true,
												"mutability": "mutable",
												"name": "identifier",
												"nameLocation": "9051:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 1391,
												"src": "9035:26:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1388,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9035:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8735:332:6"
									},
									"src": "8716:352:6"
								},
								{
									"anonymous": false,
									"eventSelector": "60133788b013c89f2a3756dbc47e3484997b87bd7e0af98a7d70232032c1ce2b",
									"id": 1399,
									"name": "AssertionDisputed",
									"nameLocation": "9080:17:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1393,
												"indexed": true,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "9114:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1399,
												"src": "9098:27:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1392,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9098:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1395,
												"indexed": true,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "9143:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 1399,
												"src": "9127:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1394,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9127:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1397,
												"indexed": true,
												"mutability": "mutable",
												"name": "disputer",
												"nameLocation": "9167:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1399,
												"src": "9151:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1396,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9151:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9097:79:6"
									},
									"src": "9074:103:6"
								},
								{
									"anonymous": false,
									"eventSelector": "f4fa324b13daeb4e1aae736c2553632ae0fb16fb31f2d4da8ac99fd056313a13",
									"id": 1411,
									"name": "AssertionSettled",
									"nameLocation": "9189:16:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"indexed": true,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "9231:11:6",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "9215:27:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1400,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9215:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1403,
												"indexed": true,
												"mutability": "mutable",
												"name": "bondRecipient",
												"nameLocation": "9268:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "9252:29:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1402,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9252:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1405,
												"indexed": false,
												"mutability": "mutable",
												"name": "disputed",
												"nameLocation": "9296:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "9291:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1404,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9291:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1407,
												"indexed": false,
												"mutability": "mutable",
												"name": "settlementResolution",
												"nameLocation": "9319:20:6",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "9314:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1406,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9314:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1409,
												"indexed": false,
												"mutability": "mutable",
												"name": "settleCaller",
												"nameLocation": "9357:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 1411,
												"src": "9349:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1408,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9349:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9205:170:6"
									},
									"src": "9183:193:6"
								},
								{
									"anonymous": false,
									"eventSelector": "d0f09246d369018534c67fec6a6c3259c6f962ef82c5521c337ae0ccc104e4bd",
									"id": 1420,
									"name": "AdminPropertiesSet",
									"nameLocation": "9388:18:6",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1414,
												"indexed": false,
												"mutability": "mutable",
												"name": "defaultCurrency",
												"nameLocation": "9414:15:6",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "9407:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$77",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1413,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1412,
														"name": "IERC20",
														"nameLocations": [
															"9407:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 77,
														"src": "9407:6:6"
													},
													"referencedDeclaration": 77,
													"src": "9407:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1416,
												"indexed": false,
												"mutability": "mutable",
												"name": "defaultLiveness",
												"nameLocation": "9438:15:6",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "9431:22:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1415,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "9431:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1418,
												"indexed": false,
												"mutability": "mutable",
												"name": "burnedBondPercentage",
												"nameLocation": "9463:20:6",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "9455:28:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9455:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9406:78:6"
									},
									"src": "9382:103:6"
								}
							],
							"scope": 1422,
							"src": "230:9257:6",
							"usedErrors": []
						}
					],
					"src": "42:9446:6"
				},
				"id": 6
			},
			"src/DeepFakeDetector.sol": {
				"ast": {
					"absolutePath": "src/DeepFakeDetector.sol",
					"exportedSymbols": {
						"Address": [
							819
						],
						"ClaimData": [
							1227
						],
						"DeepFakeDetector": [
							1713
						],
						"IERC20": [
							77
						],
						"IERC20Permit": [
							113
						],
						"OptimisticOracleV3Interface": [
							1421
						],
						"SafeERC20": [
							489
						]
					},
					"id": 1714,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1423,
							"literals": [
								"solidity",
								"0.8",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:7"
						},
						{
							"absolutePath": "lib/protocol/packages/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
							"file": "@uma/core/contracts/optimistic-oracle-v3/implementation/ClaimData.sol",
							"id": 1424,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1714,
							"sourceUnit": 1232,
							"src": "57:79:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/protocol/packages/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
							"file": "@uma/core/contracts/optimistic-oracle-v3/interfaces/OptimisticOracleV3Interface.sol",
							"id": 1425,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1714,
							"sourceUnit": 1422,
							"src": "137:93:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1426,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1714,
							"sourceUnit": 490,
							"src": "231:65:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "DeepFakeDetector",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1713,
							"linearizedBaseContracts": [
								1713
							],
							"name": "DeepFakeDetector",
							"nameLocation": "307:16:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1430,
									"libraryName": {
										"id": 1427,
										"name": "SafeERC20",
										"nameLocations": [
											"336:9:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 489,
										"src": "336:9:7"
									},
									"nodeType": "UsingForDirective",
									"src": "330:27:7",
									"typeName": {
										"id": 1429,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1428,
											"name": "IERC20",
											"nameLocations": [
												"350:6:7"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 77,
											"src": "350:6:7"
										},
										"referencedDeclaration": 77,
										"src": "350:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "20402e1d",
									"id": 1433,
									"mutability": "immutable",
									"name": "defaultCurrency",
									"nameLocation": "386:15:7",
									"nodeType": "VariableDeclaration",
									"scope": 1713,
									"src": "362:39:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$77",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 1432,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1431,
											"name": "IERC20",
											"nameLocations": [
												"362:6:7"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 77,
											"src": "362:6:7"
										},
										"referencedDeclaration": 77,
										"src": "362:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$77",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8921a614",
									"id": 1436,
									"mutability": "immutable",
									"name": "oo",
									"nameLocation": "453:2:7",
									"nodeType": "VariableDeclaration",
									"scope": 1713,
									"src": "408:47:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
										"typeString": "contract OptimisticOracleV3Interface"
									},
									"typeName": {
										"id": 1435,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1434,
											"name": "OptimisticOracleV3Interface",
											"nameLocations": [
												"408:27:7"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1421,
											"src": "408:27:7"
										},
										"referencedDeclaration": 1421,
										"src": "408:27:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
											"typeString": "contract OptimisticOracleV3Interface"
										}
									},
									"visibility": "public"
								},
								{
									"constant": true,
									"functionSelector": "b75d4e24",
									"id": 1439,
									"mutability": "constant",
									"name": "assertionLiveness",
									"nameLocation": "484:17:7",
									"nodeType": "VariableDeclaration",
									"scope": 1713,
									"src": "461:47:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint64",
										"typeString": "uint64"
									},
									"typeName": {
										"id": 1437,
										"name": "uint64",
										"nodeType": "ElementaryTypeName",
										"src": "461:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint64",
											"typeString": "uint64"
										}
									},
									"value": {
										"hexValue": "33363030",
										"id": 1438,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "504:4:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_3600_by_1",
											"typeString": "int_const 3600"
										},
										"value": "3600"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d509b017",
									"id": 1441,
									"mutability": "immutable",
									"name": "defaultIdentifier",
									"nameLocation": "539:17:7",
									"nodeType": "VariableDeclaration",
									"scope": 1713,
									"src": "514:42:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1440,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "514:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "DeepFakeDetector.ImageAssertion",
									"id": 1450,
									"members": [
										{
											"constant": false,
											"id": 1443,
											"mutability": "mutable",
											"name": "imageId",
											"nameLocation": "603:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 1450,
											"src": "595:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1442,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "595:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1445,
											"mutability": "mutable",
											"name": "imageUrl",
											"nameLocation": "664:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 1450,
											"src": "657:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1444,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "657:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1447,
											"mutability": "mutable",
											"name": "asserter",
											"nameLocation": "733:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 1450,
											"src": "725:16:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1446,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "725:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1449,
											"mutability": "mutable",
											"name": "resolved",
											"nameLocation": "795:8:7",
											"nodeType": "VariableDeclaration",
											"scope": 1450,
											"src": "790:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1448,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "790:4:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ImageAssertion",
									"nameLocation": "570:14:7",
									"nodeType": "StructDefinition",
									"scope": 1713,
									"src": "563:290:7",
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 1455,
									"mutability": "mutable",
									"name": "imageAssertions",
									"nameLocation": "894:15:7",
									"nodeType": "VariableDeclaration",
									"scope": 1713,
									"src": "859:50:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ImageAssertion_$1450_storage_$",
										"typeString": "mapping(bytes32 => struct DeepFakeDetector.ImageAssertion)"
									},
									"typeName": {
										"id": 1454,
										"keyType": {
											"id": 1451,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "867:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "859:34:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ImageAssertion_$1450_storage_$",
											"typeString": "mapping(bytes32 => struct DeepFakeDetector.ImageAssertion)"
										},
										"valueType": {
											"id": 1453,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1452,
												"name": "ImageAssertion",
												"nameLocations": [
													"878:14:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1450,
												"src": "878:14:7"
											},
											"referencedDeclaration": 1450,
											"src": "878:14:7",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_ImageAssertion_$1450_storage_ptr",
												"typeString": "struct DeepFakeDetector.ImageAssertion"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"eventSelector": "b3b5c304bc1ba781ea735c86e786e9ae6432b86b469fbc00ec8bb252bf54eda8",
									"id": 1465,
									"name": "ImageAsserted",
									"nameLocation": "962:13:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"indexed": true,
												"mutability": "mutable",
												"name": "imageId",
												"nameLocation": "1001:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "985:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1456,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "985:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1459,
												"indexed": false,
												"mutability": "mutable",
												"name": "imageUrl",
												"nameLocation": "1025:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1018:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1458,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1018:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1461,
												"indexed": true,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "1059:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1043:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1463,
												"indexed": true,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "1093:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1077:27:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1462,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1077:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "975:135:7"
									},
									"src": "956:155:7"
								},
								{
									"anonymous": false,
									"eventSelector": "2cd47d03ca5eed86ed11475382af40bc0f2965dd65bc4ab337d45577ea5dfaf9",
									"id": 1475,
									"name": "ImageAssertionResolved",
									"nameLocation": "1123:22:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1467,
												"indexed": true,
												"mutability": "mutable",
												"name": "imageId",
												"nameLocation": "1171:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "1155:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1466,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1155:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1469,
												"indexed": false,
												"mutability": "mutable",
												"name": "imageUrl",
												"nameLocation": "1195:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "1188:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1468,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1188:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1471,
												"indexed": true,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "1229:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "1213:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1470,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1213:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1473,
												"indexed": true,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "1263:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "1247:27:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1472,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1145:135:7"
									},
									"src": "1117:164:7"
								},
								{
									"body": {
										"id": 1496,
										"nodeType": "Block",
										"src": "1301:281:7",
										"statements": [
											{
												"expression": {
													"id": 1482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1478,
														"name": "defaultCurrency",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1433,
														"src": "1311:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "307830373836356336453837423946373032353533373765303234616365363633304331456161333746",
																"id": 1480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1336:42:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"value": "0x07865c6E87B9F70255377e024ace6630C1Eaa37F"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1479,
															"name": "IERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "1329:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20_$77_$",
																"typeString": "type(contract IERC20)"
															}
														},
														"id": 1481,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1329:50:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$77",
															"typeString": "contract IERC20"
														}
													},
													"src": "1311:68:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$77",
														"typeString": "contract IERC20"
													}
												},
												"id": 1483,
												"nodeType": "ExpressionStatement",
												"src": "1311:68:7"
											},
											{
												"expression": {
													"id": 1488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1484,
														"name": "oo",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1436,
														"src": "1407:2:7",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
															"typeString": "contract OptimisticOracleV3Interface"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "307839393233443432654636393542356464393931314430354163393434643463416361336334454142",
																"id": 1486,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1453:42:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"value": "0x9923D42eF695B5dd9911D05Ac944d4cAca3c4EAB"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1485,
															"name": "OptimisticOracleV3Interface",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1421,
															"src": "1412:27:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_OptimisticOracleV3Interface_$1421_$",
																"typeString": "type(contract OptimisticOracleV3Interface)"
															}
														},
														"id": 1487,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1412:93:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
															"typeString": "contract OptimisticOracleV3Interface"
														}
													},
													"src": "1407:98:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
														"typeString": "contract OptimisticOracleV3Interface"
													}
												},
												"id": 1489,
												"nodeType": "ExpressionStatement",
												"src": "1407:98:7"
											},
											{
												"expression": {
													"id": 1494,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1490,
														"name": "defaultIdentifier",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1441,
														"src": "1533:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 1491,
																"name": "oo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1436,
																"src": "1553:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																	"typeString": "contract OptimisticOracleV3Interface"
																}
															},
															"id": 1492,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1556:17:7",
															"memberName": "defaultIdentifier",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1284,
															"src": "1553:20:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$__$returns$_t_bytes32_$",
																"typeString": "function () view external returns (bytes32)"
															}
														},
														"id": 1493,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1553:22:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "1533:42:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1495,
												"nodeType": "ExpressionStatement",
												"src": "1533:42:7"
											}
										]
									},
									"id": 1497,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1476,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1298:2:7"
									},
									"returnParameters": {
										"id": 1477,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1301:0:7"
									},
									"scope": 1713,
									"src": "1287:295:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1523,
										"nodeType": "Block",
										"src": "1798:141:7",
										"statements": [
											{
												"condition": {
													"id": 1510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1812:38:7",
													"subExpression": {
														"expression": {
															"baseExpression": {
																"id": 1506,
																"name": "imageAssertions",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1455,
																"src": "1813:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ImageAssertion_$1450_storage_$",
																	"typeString": "mapping(bytes32 => struct DeepFakeDetector.ImageAssertion storage ref)"
																}
															},
															"id": 1508,
															"indexExpression": {
																"id": 1507,
																"name": "assertionId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1499,
																"src": "1829:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1813:28:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ImageAssertion_$1450_storage",
																"typeString": "struct DeepFakeDetector.ImageAssertion storage ref"
															}
														},
														"id": 1509,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1842:8:7",
														"memberName": "resolved",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1449,
														"src": "1813:37:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1515,
												"nodeType": "IfStatement",
												"src": "1808:62:7",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 1511,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1860:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "",
																"id": 1512,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1867:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															}
														],
														"id": 1513,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "1859:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_$",
															"typeString": "tuple(bool,literal_string \"\")"
														}
													},
													"functionReturnParameters": 1505,
													"id": 1514,
													"nodeType": "Return",
													"src": "1852:18:7"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 1516,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1888:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"expression": {
																"baseExpression": {
																	"id": 1517,
																	"name": "imageAssertions",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1455,
																	"src": "1894:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ImageAssertion_$1450_storage_$",
																		"typeString": "mapping(bytes32 => struct DeepFakeDetector.ImageAssertion storage ref)"
																	}
																},
																"id": 1519,
																"indexExpression": {
																	"id": 1518,
																	"name": "assertionId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1499,
																	"src": "1910:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1894:28:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ImageAssertion_$1450_storage",
																	"typeString": "struct DeepFakeDetector.ImageAssertion storage ref"
																}
															},
															"id": 1520,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1923:8:7",
															"memberName": "imageUrl",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1445,
															"src": "1894:37:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"id": 1521,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1887:45:7",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_string_storage_$",
														"typeString": "tuple(bool,string storage ref)"
													}
												},
												"functionReturnParameters": 1505,
												"id": 1522,
												"nodeType": "Return",
												"src": "1880:52:7"
											}
										]
									},
									"functionSelector": "6ced1ae9",
									"id": 1524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getImage",
									"nameLocation": "1712:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1499,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "1738:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "1730:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1498,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1730:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1720:35:7"
									},
									"returnParameters": {
										"id": 1505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1502,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "1777:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1501,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1777:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1504,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "1783:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1503,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1783:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1776:21:7"
									},
									"scope": 1713,
									"src": "1703:236:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1655,
										"nodeType": "Block",
										"src": "2096:1345:7",
										"statements": [
											{
												"expression": {
													"id": 1546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1535,
														"name": "asserter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1530,
														"src": "2106:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1541,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1536,
																"name": "asserter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1530,
																"src": "2117:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1539,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2137:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1538,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2129:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1537,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2129:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1540,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2129:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2117:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"id": 1544,
															"name": "asserter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1530,
															"src": "2155:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1545,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "2117:46:7",
														"trueExpression": {
															"expression": {
																"id": 1542,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2142:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1543,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2146:6:7",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2142:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2106:57:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1547,
												"nodeType": "ExpressionStatement",
												"src": "2106:57:7"
											},
											{
												"assignments": [
													1549
												],
												"declarations": [
													{
														"constant": false,
														"id": 1549,
														"mutability": "mutable",
														"name": "bond",
														"nameLocation": "2181:4:7",
														"nodeType": "VariableDeclaration",
														"scope": 1655,
														"src": "2173:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1548,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2173:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1557,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1554,
																	"name": "defaultCurrency",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1433,
																	"src": "2214:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$77",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1553,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2206:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1552,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2206:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1555,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2206:24:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1550,
															"name": "oo",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1436,
															"src": "2188:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																"typeString": "contract OptimisticOracleV3Interface"
															}
														},
														"id": 1551,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2191:14:7",
														"memberName": "getMinimumBond",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1366,
														"src": "2188:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2188:43:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2173:58:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1561,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2274:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2278:6:7",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2274:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1565,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2294:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_DeepFakeDetector_$1713",
																		"typeString": "contract DeepFakeDetector"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_DeepFakeDetector_$1713",
																		"typeString": "contract DeepFakeDetector"
																	}
																],
																"id": 1564,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2286:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1563,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2286:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1566,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2286:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1567,
															"name": "bond",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2301:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1558,
															"name": "defaultCurrency",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1433,
															"src": "2241:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 1560,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2257:16:7",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 173,
														"src": "2241:32:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$77_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1568,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2241:65:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1569,
												"nodeType": "ExpressionStatement",
												"src": "2241:65:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1575,
																	"name": "oo",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1436,
																	"src": "2352:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																		"typeString": "contract OptimisticOracleV3Interface"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																		"typeString": "contract OptimisticOracleV3Interface"
																	}
																],
																"id": 1574,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2344:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1573,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2344:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1576,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2344:11:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1577,
															"name": "bond",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1549,
															"src": "2357:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1570,
															"name": "defaultCurrency",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1433,
															"src": "2316:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$77",
																"typeString": "contract IERC20"
															}
														},
														"id": 1572,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2332:11:7",
														"memberName": "safeApprove",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 217,
														"src": "2316:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$77_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$77_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2316:46:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1579,
												"nodeType": "ExpressionStatement",
												"src": "2316:46:7"
											},
											{
												"expression": {
													"id": 1635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1580,
														"name": "assertionId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1533,
														"src": "2373:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"hexValue": "496d6167652061737365727465642061742075726c3a20",
																		"id": 1585,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2449:25:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_b366c87696ed46c73efedbc9431665681599b5bf15784ed35a7688a33aacb678",
																			"typeString": "literal_string \"Image asserted at url: \""
																		},
																		"value": "Image asserted at url: "
																	},
																	{
																		"id": 1586,
																		"name": "imageUrl",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1528,
																		"src": "2492:8:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_calldata_ptr",
																			"typeString": "string calldata"
																		}
																	},
																	{
																		"hexValue": "20666f7220696d61676549443a203078",
																		"id": 1587,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2518:18:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_bcf974f2119ba7d64309250380153894ac059dbe81f016cdcd5daec0a7737032",
																			"typeString": "literal_string \" for imageID: 0x\""
																		},
																		"value": " for imageID: 0x"
																	},
																	{
																		"arguments": [
																			{
																				"id": 1590,
																				"name": "imageId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1526,
																				"src": "2576:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"expression": {
																				"id": 1588,
																				"name": "ClaimData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1227,
																				"src": "2554:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_AncillaryData_$1227_$",
																					"typeString": "type(library AncillaryData)"
																				}
																			},
																			"id": 1589,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2564:11:7",
																			"memberName": "toUtf8Bytes",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 983,
																			"src": "2554:21:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (bytes32) pure returns (bytes memory)"
																			}
																		},
																		"id": 1591,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2554:30:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "20616e642061737365727465723a203078",
																		"id": 1592,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2602:19:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf",
																			"typeString": "literal_string \" and asserter: 0x\""
																		},
																		"value": " and asserter: 0x"
																	},
																	{
																		"arguments": [
																			{
																				"id": 1595,
																				"name": "asserter",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1530,
																				"src": "2668:8:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"expression": {
																				"id": 1593,
																				"name": "ClaimData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1227,
																				"src": "2639:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_AncillaryData_$1227_$",
																					"typeString": "type(library AncillaryData)"
																				}
																			},
																			"id": 1594,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2649:18:7",
																			"memberName": "toUtf8BytesAddress",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1016,
																			"src": "2639:28:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (address) pure returns (bytes memory)"
																			}
																		},
																		"id": 1596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2639:38:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 1599,
																				"name": "asserter",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1530,
																				"src": "2724:8:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"expression": {
																				"id": 1597,
																				"name": "ClaimData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1227,
																				"src": "2695:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_AncillaryData_$1227_$",
																					"typeString": "type(library AncillaryData)"
																				}
																			},
																			"id": 1598,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2705:18:7",
																			"memberName": "toUtf8BytesAddress",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1016,
																			"src": "2695:28:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (address) pure returns (bytes memory)"
																			}
																		},
																		"id": 1600,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2695:38:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "2061742074696d657374616d703a20",
																		"id": 1601,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2751:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49",
																			"typeString": "literal_string \" at timestamp: \""
																		},
																		"value": " at timestamp: "
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1604,
																					"name": "block",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967292,
																					"src": "2812:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_block",
																						"typeString": "block"
																					}
																				},
																				"id": 1605,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2818:9:7",
																				"memberName": "timestamp",
																				"nodeType": "MemberAccess",
																				"src": "2812:15:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1602,
																				"name": "ClaimData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1227,
																				"src": "2786:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_AncillaryData_$1227_$",
																					"typeString": "type(library AncillaryData)"
																				}
																			},
																			"id": 1603,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2796:15:7",
																			"memberName": "toUtf8BytesUint",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1109,
																			"src": "2786:25:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (uint256) pure returns (bytes memory)"
																			}
																		},
																		"id": 1606,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2786:42:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "20696e207468652044617461417373657274657220636f6e7472616374206174203078",
																		"id": 1607,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2846:37:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8",
																			"typeString": "literal_string \" in the DataAsserter contract at 0x\""
																		},
																		"value": " in the DataAsserter contract at 0x"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1612,
																						"name": "this",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967268,
																						"src": "2938:4:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_DeepFakeDetector_$1713",
																							"typeString": "contract DeepFakeDetector"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_DeepFakeDetector_$1713",
																							"typeString": "contract DeepFakeDetector"
																						}
																					],
																					"id": 1611,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "2930:7:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 1610,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "2930:7:7",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1613,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "2930:13:7",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"expression": {
																				"id": 1608,
																				"name": "ClaimData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1227,
																				"src": "2901:9:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_AncillaryData_$1227_$",
																					"typeString": "type(library AncillaryData)"
																				}
																			},
																			"id": 1609,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2911:18:7",
																			"memberName": "toUtf8BytesAddress",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1016,
																			"src": "2901:28:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_address_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (address) pure returns (bytes memory)"
																			}
																		},
																		"id": 1614,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2901:43:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"hexValue": "206973206e6f742061206465657066616b652e",
																		"id": 1615,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2962:21:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_19c8836c1ea35754620445faac202b424a0e6488620665649459ae40f269ae1b",
																			"typeString": "literal_string \" is not a deepfake.\""
																		},
																		"value": " is not a deepfake."
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_b366c87696ed46c73efedbc9431665681599b5bf15784ed35a7688a33aacb678",
																			"typeString": "literal_string \"Image asserted at url: \""
																		},
																		{
																			"typeIdentifier": "t_string_calldata_ptr",
																			"typeString": "string calldata"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_bcf974f2119ba7d64309250380153894ac059dbe81f016cdcd5daec0a7737032",
																			"typeString": "literal_string \" for imageID: 0x\""
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_c77a658518de669f0fa22457f32e31788885c7b0e4a4f4dc1fa539e8ef29dedf",
																			"typeString": "literal_string \" and asserter: 0x\""
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_0b443ca68139ec97c71a0472cd1c95aa0b393309e576d65ab97caf7affa69a49",
																			"typeString": "literal_string \" at timestamp: \""
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_ca440c0140d48ac69e555e32fbe16eceb8ce3061228f28ba3b8559a881e5e9a8",
																			"typeString": "literal_string \" in the DataAsserter contract at 0x\""
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_19c8836c1ea35754620445faac202b424a0e6488620665649459ae40f269ae1b",
																			"typeString": "literal_string \" is not a deepfake.\""
																		}
																	],
																	"expression": {
																		"id": 1583,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "2415:3:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1584,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2419:12:7",
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "2415:16:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 1616,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2415:582:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															{
																"id": 1617,
																"name": "asserter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1530,
																"src": "3011:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"arguments": [
																	{
																		"id": 1620,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "3041:4:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_DeepFakeDetector_$1713",
																			"typeString": "contract DeepFakeDetector"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_DeepFakeDetector_$1713",
																			"typeString": "contract DeepFakeDetector"
																		}
																	],
																	"id": 1619,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3033:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1618,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3033:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1621,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3033:13:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1624,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3068:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1623,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3060:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1622,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3060:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1625,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3060:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 1626,
																"name": "assertionLiveness",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1439,
																"src": "3084:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															{
																"id": 1627,
																"name": "defaultCurrency",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1433,
																"src": "3115:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$77",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 1628,
																"name": "bond",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1549,
																"src": "3144:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1629,
																"name": "defaultIdentifier",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1441,
																"src": "3162:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1632,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3201:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1631,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3193:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 1630,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "3193:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1633,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3193:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																},
																{
																	"typeIdentifier": "t_contract$_IERC20_$77",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"expression": {
																"id": 1581,
																"name": "oo",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1436,
																"src": "2387:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																	"typeString": "contract OptimisticOracleV3Interface"
																}
															},
															"id": 1582,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2390:11:7",
															"memberName": "assertTruth",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1328,
															"src": "2387:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_bytes_memory_ptr_$_t_address_$_t_address_$_t_address_$_t_uint64_$_t_contract$_IERC20_$77_$_t_uint256_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory,address,address,address,uint64,contract IERC20,uint256,bytes32,bytes32) external returns (bytes32)"
															}
														},
														"id": 1634,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2387:826:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2373:840:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1636,
												"nodeType": "ExpressionStatement",
												"src": "2373:840:7"
											},
											{
												"expression": {
													"id": 1646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1637,
															"name": "imageAssertions",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1455,
															"src": "3224:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ImageAssertion_$1450_storage_$",
																"typeString": "mapping(bytes32 => struct DeepFakeDetector.ImageAssertion storage ref)"
															}
														},
														"id": 1639,
														"indexExpression": {
															"id": 1638,
															"name": "assertionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1533,
															"src": "3240:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3224:28:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ImageAssertion_$1450_storage",
															"typeString": "struct DeepFakeDetector.ImageAssertion storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1641,
																"name": "imageId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1526,
																"src": "3283:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 1642,
																"name": "imageUrl",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1528,
																"src": "3304:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															},
															{
																"id": 1643,
																"name": "asserter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1530,
																"src": "3326:8:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"hexValue": "66616c7365",
																"id": 1644,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3348:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 1640,
															"name": "ImageAssertion",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1450,
															"src": "3255:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_ImageAssertion_$1450_storage_ptr_$",
																"typeString": "type(struct DeepFakeDetector.ImageAssertion storage pointer)"
															}
														},
														"id": 1645,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3255:108:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ImageAssertion_$1450_memory_ptr",
															"typeString": "struct DeepFakeDetector.ImageAssertion memory"
														}
													},
													"src": "3224:139:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ImageAssertion_$1450_storage",
														"typeString": "struct DeepFakeDetector.ImageAssertion storage ref"
													}
												},
												"id": 1647,
												"nodeType": "ExpressionStatement",
												"src": "3224:139:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1649,
															"name": "imageId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1526,
															"src": "3393:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1650,
															"name": "imageUrl",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1528,
															"src": "3402:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														},
														{
															"id": 1651,
															"name": "asserter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1530,
															"src": "3412:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1652,
															"name": "assertionId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1533,
															"src": "3422:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1648,
														"name": "ImageAsserted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1465,
														"src": "3379:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_string_memory_ptr_$_t_address_$_t_bytes32_$returns$__$",
															"typeString": "function (bytes32,string memory,address,bytes32)"
														}
													},
													"id": 1653,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3379:55:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1654,
												"nodeType": "EmitStatement",
												"src": "3374:60:7"
											}
										]
									},
									"functionSelector": "096464cc",
									"id": 1656,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "assertDataFor",
									"nameLocation": "1954:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1526,
												"mutability": "mutable",
												"name": "imageId",
												"nameLocation": "1985:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1656,
												"src": "1977:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1525,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1977:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1528,
												"mutability": "mutable",
												"name": "imageUrl",
												"nameLocation": "2018:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1656,
												"src": "2002:24:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1527,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2002:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "asserter",
												"nameLocation": "2044:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1656,
												"src": "2036:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2036:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1967:91:7"
									},
									"returnParameters": {
										"id": 1534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1533,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "2083:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1656,
												"src": "2075:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1532,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2075:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2074:21:7"
									},
									"scope": 1713,
									"src": "1945:1496:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1705,
										"nodeType": "Block",
										"src": "3601:557:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1670,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1664,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3619:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1665,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3623:6:7",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3619:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1668,
																		"name": "oo",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1436,
																		"src": "3641:2:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																			"typeString": "contract OptimisticOracleV3Interface"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_OptimisticOracleV3Interface_$1421",
																			"typeString": "contract OptimisticOracleV3Interface"
																		}
																	],
																	"id": 1667,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3633:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1666,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3633:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1669,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3633:11:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3619:25:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1663,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3611:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 1671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3611:34:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1672,
												"nodeType": "ExpressionStatement",
												"src": "3611:34:7"
											},
											{
												"condition": {
													"id": 1673,
													"name": "assertedTruthfully",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1660,
													"src": "3734:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"expression": {
														"id": 1702,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "delete",
														"prefix": true,
														"src": "4116:35:7",
														"subExpression": {
															"baseExpression": {
																"id": 1699,
																"name": "imageAssertions",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1455,
																"src": "4123:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ImageAssertion_$1450_storage_$",
																	"typeString": "mapping(bytes32 => struct DeepFakeDetector.ImageAssertion storage ref)"
																}
															},
															"id": 1701,
															"indexExpression": {
																"id": 1700,
																"name": "assertionId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1658,
																"src": "4139:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "IndexAccess",
															"src": "4123:28:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ImageAssertion_$1450_storage",
																"typeString": "struct DeepFakeDetector.ImageAssertion storage ref"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 1703,
													"nodeType": "ExpressionStatement",
													"src": "4116:35:7"
												},
												"id": 1704,
												"nodeType": "IfStatement",
												"src": "3730:421:7",
												"trueBody": {
													"id": 1698,
													"nodeType": "Block",
													"src": "3754:356:7",
													"statements": [
														{
															"expression": {
																"id": 1679,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 1674,
																			"name": "imageAssertions",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1455,
																			"src": "3768:15:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ImageAssertion_$1450_storage_$",
																				"typeString": "mapping(bytes32 => struct DeepFakeDetector.ImageAssertion storage ref)"
																			}
																		},
																		"id": 1676,
																		"indexExpression": {
																			"id": 1675,
																			"name": "assertionId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1658,
																			"src": "3784:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3768:28:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ImageAssertion_$1450_storage",
																			"typeString": "struct DeepFakeDetector.ImageAssertion storage ref"
																		}
																	},
																	"id": 1677,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "3797:8:7",
																	"memberName": "resolved",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1449,
																	"src": "3768:37:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 1678,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3808:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3768:44:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1680,
															"nodeType": "ExpressionStatement",
															"src": "3768:44:7"
														},
														{
															"assignments": [
																1683
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1683,
																	"mutability": "mutable",
																	"name": "imageAssertion",
																	"nameLocation": "3848:14:7",
																	"nodeType": "VariableDeclaration",
																	"scope": 1698,
																	"src": "3826:36:7",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ImageAssertion_$1450_memory_ptr",
																		"typeString": "struct DeepFakeDetector.ImageAssertion"
																	},
																	"typeName": {
																		"id": 1682,
																		"nodeType": "UserDefinedTypeName",
																		"pathNode": {
																			"id": 1681,
																			"name": "ImageAssertion",
																			"nameLocations": [
																				"3826:14:7"
																			],
																			"nodeType": "IdentifierPath",
																			"referencedDeclaration": 1450,
																			"src": "3826:14:7"
																		},
																		"referencedDeclaration": 1450,
																		"src": "3826:14:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ImageAssertion_$1450_storage_ptr",
																			"typeString": "struct DeepFakeDetector.ImageAssertion"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1687,
															"initialValue": {
																"baseExpression": {
																	"id": 1684,
																	"name": "imageAssertions",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1455,
																	"src": "3865:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_ImageAssertion_$1450_storage_$",
																		"typeString": "mapping(bytes32 => struct DeepFakeDetector.ImageAssertion storage ref)"
																	}
																},
																"id": 1686,
																"indexExpression": {
																	"id": 1685,
																	"name": "assertionId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1658,
																	"src": "3881:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3865:28:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ImageAssertion_$1450_storage",
																	"typeString": "struct DeepFakeDetector.ImageAssertion storage ref"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "3826:67:7"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1689,
																			"name": "imageAssertion",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1683,
																			"src": "3952:14:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_ImageAssertion_$1450_memory_ptr",
																				"typeString": "struct DeepFakeDetector.ImageAssertion memory"
																			}
																		},
																		"id": 1690,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "3967:7:7",
																		"memberName": "imageId",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1443,
																		"src": "3952:22:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"expression": {
																			"id": 1691,
																			"name": "imageAssertion",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1683,
																			"src": "3992:14:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_ImageAssertion_$1450_memory_ptr",
																				"typeString": "struct DeepFakeDetector.ImageAssertion memory"
																			}
																		},
																		"id": 1692,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4007:8:7",
																		"memberName": "imageUrl",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1445,
																		"src": "3992:23:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	},
																	{
																		"expression": {
																			"id": 1693,
																			"name": "imageAssertion",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1683,
																			"src": "4033:14:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_ImageAssertion_$1450_memory_ptr",
																				"typeString": "struct DeepFakeDetector.ImageAssertion memory"
																			}
																		},
																		"id": 1694,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4048:8:7",
																		"memberName": "asserter",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1447,
																		"src": "4033:23:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1695,
																		"name": "assertionId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1658,
																		"src": "4074:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1688,
																	"name": "ImageAssertionResolved",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1475,
																	"src": "3912:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_string_memory_ptr_$_t_address_$_t_bytes32_$returns$__$",
																		"typeString": "function (bytes32,string memory,address,bytes32)"
																	}
																},
																"id": 1696,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3912:187:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1697,
															"nodeType": "EmitStatement",
															"src": "3907:192:7"
														}
													]
												}
											}
										]
									},
									"functionSelector": "f1b156b2",
									"id": 1706,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "assertionResolvedCallback",
									"nameLocation": "3500:25:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1658,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "3543:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "3535:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1657,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3535:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1660,
												"mutability": "mutable",
												"name": "assertedTruthfully",
												"nameLocation": "3569:18:7",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "3564:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1659,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3564:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3525:68:7"
									},
									"returnParameters": {
										"id": 1662,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3601:0:7"
									},
									"scope": 1713,
									"src": "3491:667:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1711,
										"nodeType": "Block",
										"src": "4418:2:7",
										"statements": []
									},
									"functionSelector": "d448a4ec",
									"id": 1712,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "assertionDisputedCallback",
									"nameLocation": "4364:25:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1708,
												"mutability": "mutable",
												"name": "assertionId",
												"nameLocation": "4398:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 1712,
												"src": "4390:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1707,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4390:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4389:21:7"
									},
									"returnParameters": {
										"id": 1710,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4418:0:7"
									},
									"scope": 1713,
									"src": "4355:65:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1714,
							"src": "298:4124:7",
							"usedErrors": []
						}
					],
					"src": "32:4391:7"
				},
				"id": 7
			}
		}
	}
}